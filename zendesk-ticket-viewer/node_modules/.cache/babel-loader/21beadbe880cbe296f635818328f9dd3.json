{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.export_mixin.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nexport default {\n  _getEmptyCell: function () {\n    return {\n      text: \"\",\n      value: void 0,\n      colspan: 1,\n      rowspan: 1\n    };\n  },\n  _defaultSetter: function (value) {\n    return !value ? 1 : value;\n  },\n  _cloneItem: function (item) {\n    return extend({}, item, this._getEmptyCell());\n  },\n  _prepareItems: function (items) {\n    var that = this;\n    var resultItems = [];\n    var cols = (items[0] || []).reduce((sum, item) => sum + that._defaultSetter(item.colspan), 0);\n\n    var getItem = function (items) {\n      var rowIndex = 0;\n      var cellIndex = 0;\n      return function () {\n        var row = items[rowIndex] || [];\n        var item = row[cellIndex++];\n\n        if (cellIndex >= row.length) {\n          rowIndex++;\n          cellIndex = 0;\n        }\n\n        if (item) {\n          item.colspan = that._defaultSetter(item.colspan);\n          item.rowspan = that._defaultSetter(item.rowspan);\n        }\n\n        return item;\n      };\n    }(items);\n\n    function addItem(rowIndex, cellIndex, item) {\n      var row = resultItems[rowIndex] = resultItems[rowIndex] || [];\n      row[cellIndex] = item;\n\n      if (item.colspan > 1 || item.rowspan > 1) {\n        var clone = that._cloneItem(item);\n\n        for (var c = 1; c < item.colspan; c++) {\n          addItem(rowIndex, cellIndex + c, clone);\n        }\n\n        for (var r = 1; r < item.rowspan; r++) {\n          for (var _c = 0; _c < item.colspan; _c++) {\n            addItem(rowIndex + r, cellIndex + _c, clone);\n          }\n        }\n      }\n    }\n\n    var item = getItem();\n    var rowIndex = 0;\n\n    while (item) {\n      for (var cellIndex = 0; cellIndex < cols; cellIndex++) {\n        if (!item) {\n          break;\n        }\n\n        if (resultItems[rowIndex] && resultItems[rowIndex][cellIndex]) {\n          continue;\n        }\n\n        addItem(rowIndex, cellIndex, item);\n        cellIndex += item.colspan - 1;\n        item = getItem();\n      }\n\n      rowIndex++;\n    }\n\n    return resultItems;\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js"],"names":["extend","_getEmptyCell","text","value","colspan","rowspan","_defaultSetter","_cloneItem","item","_prepareItems","items","that","resultItems","cols","reduce","sum","getItem","rowIndex","cellIndex","row","length","addItem","clone","c","r","_c"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.export_mixin.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nexport default {\r\n    _getEmptyCell: function() {\r\n        return {\r\n            text: \"\",\r\n            value: void 0,\r\n            colspan: 1,\r\n            rowspan: 1\r\n        }\r\n    },\r\n    _defaultSetter: function(value) {\r\n        return !value ? 1 : value\r\n    },\r\n    _cloneItem: function(item) {\r\n        return extend({}, item, this._getEmptyCell())\r\n    },\r\n    _prepareItems: function(items) {\r\n        var that = this;\r\n        var resultItems = [];\r\n        var cols = (items[0] || []).reduce((sum, item) => sum + that._defaultSetter(item.colspan), 0);\r\n        var getItem = function(items) {\r\n            var rowIndex = 0;\r\n            var cellIndex = 0;\r\n            return function() {\r\n                var row = items[rowIndex] || [];\r\n                var item = row[cellIndex++];\r\n                if (cellIndex >= row.length) {\r\n                    rowIndex++;\r\n                    cellIndex = 0\r\n                }\r\n                if (item) {\r\n                    item.colspan = that._defaultSetter(item.colspan);\r\n                    item.rowspan = that._defaultSetter(item.rowspan)\r\n                }\r\n                return item\r\n            }\r\n        }(items);\r\n\r\n        function addItem(rowIndex, cellIndex, item) {\r\n            var row = resultItems[rowIndex] = resultItems[rowIndex] || [];\r\n            row[cellIndex] = item;\r\n            if (item.colspan > 1 || item.rowspan > 1) {\r\n                var clone = that._cloneItem(item);\r\n                for (var c = 1; c < item.colspan; c++) {\r\n                    addItem(rowIndex, cellIndex + c, clone)\r\n                }\r\n                for (var r = 1; r < item.rowspan; r++) {\r\n                    for (var _c = 0; _c < item.colspan; _c++) {\r\n                        addItem(rowIndex + r, cellIndex + _c, clone)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var item = getItem();\r\n        var rowIndex = 0;\r\n        while (item) {\r\n            for (var cellIndex = 0; cellIndex < cols; cellIndex++) {\r\n                if (!item) {\r\n                    break\r\n                }\r\n                if (resultItems[rowIndex] && resultItems[rowIndex][cellIndex]) {\r\n                    continue\r\n                }\r\n                addItem(rowIndex, cellIndex, item);\r\n                cellIndex += item.colspan - 1;\r\n                item = getItem()\r\n            }\r\n            rowIndex++\r\n        }\r\n        return resultItems\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}