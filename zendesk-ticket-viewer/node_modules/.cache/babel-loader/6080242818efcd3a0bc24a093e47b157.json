{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/chart_components/advanced_chart.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { extend as _extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport { each as _each, reverseEach as _reverseEach } from \"../../core/utils/iterator\";\nimport { Range } from \"../translators/range\";\nimport { Axis } from \"../axes/base_axis\";\nimport { SeriesFamily } from \"../core/series_family\";\nimport { BaseChart } from \"./base_chart\";\nimport { getMargins } from \"./crosshair\";\nimport rangeDataCalculator from \"../series/helpers/range_data_calculator\";\nimport { isDefined as _isDefined, type } from \"../../core/utils/type\";\nimport { noop as _noop } from \"../../core/utils/common\";\nimport { convertVisualRangeObject, rangesAreEqual, map as _map, mergeMarginOptions, setCanvasValues, unique } from \"../core/utils\";\nvar _isArray = Array.isArray;\nvar DEFAULT_AXIS_NAME = \"defaultAxisName\";\nvar FONT = \"font\";\nvar COMMON_AXIS_SETTINGS = \"commonAxisSettings\";\nvar DEFAULT_PANE_NAME = \"default\";\nvar VISUAL_RANGE = \"VISUAL_RANGE\";\n\nfunction prepareAxis(axisOptions) {\n  return _isArray(axisOptions) ? 0 === axisOptions.length ? [{}] : axisOptions : [axisOptions];\n}\n\nfunction processBubbleMargin(opt, bubbleSize) {\n  if (opt.processBubbleSize) {\n    opt.size = bubbleSize;\n  }\n\n  return opt;\n}\n\nfunction estimateBubbleSize(size, panesCount, maxSize, rotated) {\n  var width = rotated ? size.width / panesCount : size.width;\n  var height = rotated ? size.height : size.height / panesCount;\n  return Math.min(width, height) * maxSize;\n}\n\nfunction setAxisVisualRangeByOption(arg, axis, isDirectOption, index) {\n  var options;\n  var visualRange;\n\n  if (isDirectOption) {\n    visualRange = arg.value;\n    options = {\n      skipEventRising: true\n    };\n    var wrappedVisualRange = wrapVisualRange(arg.fullName, visualRange);\n\n    if (wrappedVisualRange) {\n      options = {\n        allowPartialUpdate: true\n      };\n      visualRange = wrappedVisualRange;\n    }\n  } else {\n    visualRange = (_isDefined(index) ? arg.value[index] : arg.value).visualRange;\n  }\n\n  axis.visualRange(visualRange, options);\n}\n\nfunction getAxisTypes(groupsData, axis, isArgumentAxes) {\n  if (isArgumentAxes) {\n    return {\n      argumentAxisType: groupsData.argumentAxisType,\n      argumentType: groupsData.argumentType\n    };\n  }\n\n  var {\n    valueAxisType: valueAxisType,\n    valueType: valueType\n  } = groupsData.groups.filter(g => g.valueAxis === axis)[0];\n  return {\n    valueAxisType: valueAxisType,\n    valueType: valueType\n  };\n}\n\nfunction wrapVisualRange(fullName, value) {\n  var pathElements = fullName.split(\".\");\n  var destElem = pathElements[pathElements.length - 1];\n\n  if (\"endValue\" === destElem || \"startValue\" === destElem) {\n    return {\n      [destElem]: value\n    };\n  }\n}\n\nexport var AdvancedChart = BaseChart.inherit({\n  _fontFields: [COMMON_AXIS_SETTINGS + \".label.\" + FONT, COMMON_AXIS_SETTINGS + \".title.\" + FONT],\n  _partialOptionChangesMap: {\n    visualRange: VISUAL_RANGE,\n    _customVisualRange: VISUAL_RANGE,\n    strips: \"REFRESH_AXES\",\n    constantLines: \"REFRESH_AXES\"\n  },\n  _partialOptionChangesPath: {\n    argumentAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"],\n    valueAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"]\n  },\n\n  _initCore() {\n    this._panesClipRects = {};\n    this.callBase();\n  },\n\n  _disposeCore() {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    var panesClipRects = this._panesClipRects;\n    this.callBase();\n    disposeObjectsInArray.call(panesClipRects, \"fixed\");\n    disposeObjectsInArray.call(panesClipRects, \"base\");\n    disposeObjectsInArray.call(panesClipRects, \"wide\");\n    this._panesClipRects = null;\n\n    this._labelsAxesGroup.linkOff();\n\n    this._labelsAxesGroup.dispose();\n\n    this._labelsAxesGroup = null;\n  },\n\n  _dispose: function () {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    this.callBase();\n    this.panes = null;\n\n    if (this._legend) {\n      this._legend.dispose();\n\n      this._legend = null;\n    }\n\n    disposeObjectsInArray.call(this, \"panesBackground\");\n    disposeObjectsInArray.call(this, \"seriesFamilies\");\n\n    this._disposeAxes();\n  },\n  _createPanes: function () {\n    this._cleanPanesClipRects(\"fixed\");\n\n    this._cleanPanesClipRects(\"base\");\n\n    this._cleanPanesClipRects(\"wide\");\n  },\n\n  _cleanPanesClipRects(clipArrayName) {\n    var clipArray = this._panesClipRects[clipArrayName];\n    (clipArray || []).forEach(clipRect => clipRect && clipRect.dispose());\n    this._panesClipRects[clipArrayName] = [];\n  },\n\n  _getElementsClipRectID(paneName) {\n    var clipShape = this._panesClipRects.fixed[this._getPaneIndex(paneName)];\n\n    return clipShape && clipShape.id;\n  },\n\n  _getPaneIndex(paneName) {\n    var paneIndex;\n    var name = paneName || DEFAULT_PANE_NAME;\n\n    _each(this.panes, (index, pane) => {\n      if (pane.name === name) {\n        paneIndex = index;\n        return false;\n      }\n    });\n\n    return paneIndex;\n  },\n\n  _updateSize() {\n    this.callBase();\n    setCanvasValues(this._canvas);\n  },\n\n  _reinitAxes: function () {\n    this.panes = this._createPanes();\n\n    this._populateAxes();\n\n    this._axesReinitialized = true;\n  },\n  _getCrosshairMargins: function () {\n    var crosshairOptions = this._getCrosshairOptions() || {};\n    var crosshairEnabled = crosshairOptions.enabled;\n    var margins = getMargins();\n    return {\n      x: crosshairEnabled && crosshairOptions.horizontalLine.visible ? margins.x : 0,\n      y: crosshairEnabled && crosshairOptions.verticalLine.visible ? margins.y : 0\n    };\n  },\n\n  _populateAxes() {\n    var that = this;\n    var panes = that.panes;\n\n    var rotated = that._isRotated();\n\n    var argumentAxesOptions = prepareAxis(that.option(\"argumentAxis\") || {})[0];\n    var valueAxisOption = that.option(\"valueAxis\");\n    var valueAxesOptions = prepareAxis(valueAxisOption || {});\n    var argumentAxesPopulatedOptions;\n    var valueAxesPopulatedOptions = [];\n    var axisNames = [];\n    var valueAxesCounter = 0;\n    var paneWithNonVirtualAxis;\n\n    var crosshairMargins = that._getCrosshairMargins();\n\n    if (rotated) {\n      paneWithNonVirtualAxis = \"right\" === argumentAxesOptions.position ? panes[panes.length - 1].name : panes[0].name;\n    } else {\n      paneWithNonVirtualAxis = \"top\" === argumentAxesOptions.position ? panes[0].name : panes[panes.length - 1].name;\n    }\n\n    argumentAxesPopulatedOptions = _map(panes, pane => {\n      var virtual = pane.name !== paneWithNonVirtualAxis;\n      return that._populateAxesOptions(\"argumentAxis\", argumentAxesOptions, {\n        pane: pane.name,\n        name: null,\n        optionPath: \"argumentAxis\",\n        crosshairMargin: rotated ? crosshairMargins.x : crosshairMargins.y\n      }, rotated, virtual);\n    });\n\n    _each(valueAxesOptions, (priority, axisOptions) => {\n      var _axisOptions$panes;\n\n      var axisPanes = [];\n      var name = axisOptions.name;\n\n      if (name && -1 !== inArray(name, axisNames)) {\n        that._incidentOccurred(\"E2102\");\n\n        return;\n      }\n\n      name && axisNames.push(name);\n\n      if (axisOptions.pane) {\n        axisPanes.push(axisOptions.pane);\n      }\n\n      if (null !== (_axisOptions$panes = axisOptions.panes) && void 0 !== _axisOptions$panes && _axisOptions$panes.length) {\n        axisPanes = axisPanes.concat(axisOptions.panes.slice(0));\n      }\n\n      axisPanes = unique(axisPanes);\n\n      if (!axisPanes.length) {\n        axisPanes.push(void 0);\n      }\n\n      _each(axisPanes, (_, pane) => {\n        var optionPath = _isArray(valueAxisOption) ? \"valueAxis[\".concat(priority, \"]\") : \"valueAxis\";\n        valueAxesPopulatedOptions.push(that._populateAxesOptions(\"valueAxis\", axisOptions, {\n          name: name || DEFAULT_AXIS_NAME + valueAxesCounter++,\n          pane: pane,\n          priority: priority,\n          optionPath: optionPath,\n          crosshairMargin: rotated ? crosshairMargins.y : crosshairMargins.x\n        }, rotated));\n      });\n    });\n\n    that._redesignAxes(argumentAxesPopulatedOptions, true, paneWithNonVirtualAxis);\n\n    that._redesignAxes(valueAxesPopulatedOptions, false);\n  },\n\n  _redesignAxes(options, isArgumentAxes, paneWithNonVirtualAxis) {\n    var that = this;\n    var axesBasis = [];\n    var axes = isArgumentAxes ? that._argumentAxes : that._valueAxes;\n\n    _each(options, (_, opt) => {\n      var curAxes = axes && axes.filter(a => a.name === opt.name && (!_isDefined(opt.pane) && that.panes.some(p => p.name === a.pane) || a.pane === opt.pane));\n\n      if (curAxes && curAxes.length > 0) {\n        _each(curAxes, (_, axis) => {\n          var axisTypes = getAxisTypes(that._groupsData, axis, isArgumentAxes);\n          axis.updateOptions(opt);\n\n          if (isArgumentAxes) {\n            axis.setTypes(axisTypes.argumentAxisType, axisTypes.argumentType, \"argumentType\");\n          } else {\n            axis.setTypes(axisTypes.valueAxisType, axisTypes.valueType, \"valueType\");\n          }\n\n          axis.validate();\n          axesBasis.push({\n            axis: axis\n          });\n        });\n      } else {\n        axesBasis.push({\n          options: opt\n        });\n      }\n    });\n\n    if (axes) {\n      _reverseEach(axes, (index, axis) => {\n        if (!axesBasis.some(basis => basis.axis && basis.axis === axis)) {\n          that._disposeAxis(index, isArgumentAxes);\n        }\n      });\n    } else if (isArgumentAxes) {\n      axes = that._argumentAxes = [];\n    } else {\n      axes = that._valueAxes = [];\n    }\n\n    _each(axesBasis, (_, basis) => {\n      var axis = basis.axis;\n\n      if (basis.axis && isArgumentAxes) {\n        basis.axis.isVirtual = basis.axis.pane !== paneWithNonVirtualAxis;\n      } else if (basis.options) {\n        axis = that._createAxis(isArgumentAxes, basis.options, isArgumentAxes ? basis.options.pane !== paneWithNonVirtualAxis : void 0);\n        axes.push(axis);\n      }\n\n      axis.applyVisualRangeSetter(that._getVisualRangeSetter());\n    });\n  },\n\n  _disposeAxis(index, isArgumentAxis) {\n    var axes = isArgumentAxis ? this._argumentAxes : this._valueAxes;\n    var axis = axes[index];\n\n    if (!axis) {\n      return;\n    }\n\n    axis.dispose();\n    axes.splice(index, 1);\n  },\n\n  _disposeAxes: function () {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    disposeObjectsInArray.call(this, \"_argumentAxes\");\n    disposeObjectsInArray.call(this, \"_valueAxes\");\n  },\n  _appendAdditionalSeriesGroups: function () {\n    this._crosshairCursorGroup.linkAppend();\n\n    this._scrollBar && this._scrollBarGroup.linkAppend();\n  },\n  _getLegendTargets: function () {\n    return (this.series || []).map(s => {\n      var item = this._getLegendOptions(s);\n\n      item.legendData.series = s;\n\n      if (!s.getOptions().showInLegend) {\n        item.legendData.visible = false;\n      }\n\n      return item;\n    });\n  },\n  _legendItemTextField: \"name\",\n  _seriesPopulatedHandlerCore: function () {\n    this._processSeriesFamilies();\n\n    this._processValueAxisFormat();\n  },\n  _renderTrackers: function () {\n    var i;\n\n    for (i = 0; i < this.series.length; ++i) {\n      this.series[i].drawTrackers();\n    }\n  },\n  _specialProcessSeries: function () {\n    this._processSeriesFamilies();\n  },\n  _processSeriesFamilies: function () {\n    var _that$seriesFamilies;\n\n    var that = this;\n    var types = [];\n    var families = [];\n    var paneSeries;\n    var themeManager = that._themeManager;\n    var negativesAsZeroes = themeManager.getOptions(\"negativesAsZeroes\");\n    var negativesAsZeros = themeManager.getOptions(\"negativesAsZeros\");\n    var familyOptions = {\n      minBubbleSize: themeManager.getOptions(\"minBubbleSize\"),\n      maxBubbleSize: themeManager.getOptions(\"maxBubbleSize\"),\n      barGroupPadding: themeManager.getOptions(\"barGroupPadding\"),\n      barGroupWidth: themeManager.getOptions(\"barGroupWidth\"),\n      negativesAsZeroes: _isDefined(negativesAsZeroes) ? negativesAsZeroes : negativesAsZeros\n    };\n\n    if (null !== (_that$seriesFamilies = that.seriesFamilies) && void 0 !== _that$seriesFamilies && _that$seriesFamilies.length) {\n      _each(that.seriesFamilies, function (_, family) {\n        family.updateOptions(familyOptions);\n        family.adjustSeriesValues();\n      });\n\n      return;\n    }\n\n    _each(that.series, function (_, item) {\n      if (-1 === inArray(item.type, types)) {\n        types.push(item.type);\n      }\n    });\n\n    _each(that._getLayoutTargets(), function (_, pane) {\n      paneSeries = that._getSeriesForPane(pane.name);\n\n      _each(types, function (_, type) {\n        var family = new SeriesFamily({\n          type: type,\n          pane: pane.name,\n          minBubbleSize: familyOptions.minBubbleSize,\n          maxBubbleSize: familyOptions.maxBubbleSize,\n          barGroupPadding: familyOptions.barGroupPadding,\n          barGroupWidth: familyOptions.barGroupWidth,\n          negativesAsZeroes: familyOptions.negativesAsZeroes,\n          rotated: that._isRotated()\n        });\n        family.add(paneSeries);\n        family.adjustSeriesValues();\n        families.push(family);\n      });\n    });\n\n    that.seriesFamilies = families;\n  },\n  _updateSeriesDimensions: function () {\n    var i;\n    var seriesFamilies = this.seriesFamilies || [];\n\n    for (i = 0; i < seriesFamilies.length; i++) {\n      var family = seriesFamilies[i];\n      family.updateSeriesValues();\n      family.adjustSeriesDimensions();\n    }\n  },\n  _getLegendCallBack: function (series) {\n    return this._legend && this._legend.getActionCallback(series);\n  },\n  _appendAxesGroups: function () {\n    this._stripsGroup.linkAppend();\n\n    this._gridGroup.linkAppend();\n\n    this._axesGroup.linkAppend();\n\n    this._labelsAxesGroup.linkAppend();\n\n    this._constantLinesGroup.linkAppend();\n\n    this._stripLabelAxesGroup.linkAppend();\n\n    this._scaleBreaksGroup.linkAppend();\n  },\n\n  _populateMarginOptions() {\n    var that = this;\n    var bubbleSize = estimateBubbleSize(that.getSize(), that.panes.length, that._themeManager.getOptions(\"maxBubbleSize\"), that._isRotated());\n    var argumentMarginOptions = {};\n\n    that._valueAxes.forEach(valueAxis => {\n      var groupSeries = that.series.filter(function (series) {\n        return series.getValueAxis() === valueAxis;\n      });\n      var marginOptions = {};\n      groupSeries.forEach(series => {\n        if (series.isVisible()) {\n          var seriesMarginOptions = processBubbleMargin(series.getMarginOptions(), bubbleSize);\n          marginOptions = mergeMarginOptions(marginOptions, seriesMarginOptions);\n          argumentMarginOptions = mergeMarginOptions(argumentMarginOptions, seriesMarginOptions);\n        }\n      });\n      valueAxis.setMarginOptions(marginOptions);\n    });\n\n    that._argumentAxes.forEach(a => a.setMarginOptions(argumentMarginOptions));\n  },\n\n  _populateBusinessRange(updatedAxis, keepRange) {\n    var that = this;\n\n    var rotated = that._isRotated();\n\n    var series = that._getVisibleSeries();\n\n    var argRanges = {};\n    var commonArgRange = new Range({\n      rotated: !!rotated\n    });\n\n    var getPaneName = axis => axis.pane || DEFAULT_PANE_NAME;\n\n    that.panes.forEach(p => argRanges[p.name] = new Range({\n      rotated: !!rotated\n    }));\n\n    that._valueAxes.forEach(valueAxis => {\n      var groupRange = new Range({\n        rotated: !!rotated,\n        pane: valueAxis.pane,\n        axis: valueAxis.name\n      });\n      var groupSeries = series.filter(series => series.getValueAxis() === valueAxis);\n      groupSeries.forEach(series => {\n        var seriesRange = series.getRangeData();\n        groupRange.addRange(seriesRange.val);\n        argRanges[getPaneName(valueAxis)].addRange(seriesRange.arg);\n      });\n\n      if (!updatedAxis || updatedAxis && groupSeries.length && valueAxis === updatedAxis) {\n        valueAxis.setGroupSeries(groupSeries);\n        valueAxis.setBusinessRange(groupRange, that._axesReinitialized || keepRange, that._argumentAxes[0]._lastVisualRangeUpdateMode);\n      }\n    });\n\n    if (!updatedAxis || updatedAxis && series.length) {\n      Object.keys(argRanges).forEach(p => commonArgRange.addRange(argRanges[p]));\n      var commonInterval = commonArgRange.interval;\n\n      that._argumentAxes.forEach(a => {\n        var _argRanges$getPaneNam;\n\n        var currentInterval = null !== (_argRanges$getPaneNam = argRanges[getPaneName(a)].interval) && void 0 !== _argRanges$getPaneNam ? _argRanges$getPaneNam : commonInterval;\n        a.setBusinessRange(new Range(_extends({}, commonArgRange, {\n          interval: currentInterval\n        })), that._axesReinitialized, void 0, that._groupsData.categories);\n      });\n    }\n\n    that._populateMarginOptions();\n  },\n\n  getArgumentAxis: function () {\n    return (this._argumentAxes || []).filter(a => !a.isVirtual)[0];\n  },\n  getValueAxis: function (name) {\n    return (this._valueAxes || []).filter(_isDefined(name) ? a => a.name === name : a => a.pane === this.defaultPane)[0];\n  },\n  _getGroupsData: function () {\n    var that = this;\n    var groups = [];\n\n    that._valueAxes.forEach(function (axis) {\n      groups.push({\n        series: that.series.filter(function (series) {\n          return series.getValueAxis() === axis;\n        }),\n        valueAxis: axis,\n        valueOptions: axis.getOptions()\n      });\n    });\n\n    return {\n      groups: groups,\n      argumentAxes: that._argumentAxes,\n      argumentOptions: that._argumentAxes[0].getOptions()\n    };\n  },\n  _groupSeries: function () {\n    this._correctValueAxes(false);\n\n    this._groupsData = this._getGroupsData();\n  },\n  _processValueAxisFormat: function () {\n    var axesWithFullStackedFormat = [];\n    this.series.forEach(function (series) {\n      var axis = series.getValueAxis();\n\n      if (series.isFullStackedSeries()) {\n        axis.setPercentLabelFormat();\n        axesWithFullStackedFormat.push(axis);\n      }\n    });\n\n    this._valueAxes.forEach(function (axis) {\n      if (-1 === axesWithFullStackedFormat.indexOf(axis)) {\n        axis.resetAutoLabelFormat();\n      }\n    });\n  },\n\n  _populateAxesOptions(typeSelector, userOptions, axisOptions, rotated, virtual) {\n    var preparedUserOptions = this._prepareStripsAndConstantLines(typeSelector, userOptions, rotated);\n\n    var options = _extend(true, {}, preparedUserOptions, axisOptions, this._prepareAxisOptions(typeSelector, preparedUserOptions, rotated));\n\n    if (virtual) {\n      options.visible = options.tick.visible = options.minorTick.visible = options.label.visible = false;\n      options.title = {};\n    }\n\n    return options;\n  },\n\n  _getValFilter: series => rangeDataCalculator.getViewPortFilter(series.getValueAxis().visualRange() || {}),\n\n  _createAxis(isArgumentAxes, options, virtual) {\n    var that = this;\n    var typeSelector = isArgumentAxes ? \"argumentAxis\" : \"valueAxis\";\n\n    var renderingSettings = _extend({\n      renderer: that._renderer,\n      incidentOccurred: that._incidentOccurred,\n      eventTrigger: that._eventTrigger,\n      axisClass: isArgumentAxes ? \"arg\" : \"val\",\n      widgetClass: \"dxc\",\n      stripsGroup: that._stripsGroup,\n      stripLabelAxesGroup: that._stripLabelAxesGroup,\n      constantLinesGroup: that._constantLinesGroup,\n      scaleBreaksGroup: that._scaleBreaksGroup,\n      axesContainerGroup: that._axesGroup,\n      labelsAxesGroup: that._labelsAxesGroup,\n      gridGroup: that._gridGroup,\n      isArgumentAxis: isArgumentAxes,\n      getTemplate: template => that._getTemplate(template)\n    }, that._getAxisRenderingOptions(typeSelector));\n\n    var axis = new Axis(renderingSettings);\n    axis.updateOptions(options);\n    axis.isVirtual = virtual;\n    return axis;\n  },\n\n  _applyVisualRangeByVirtualAxes: (axis, range) => false,\n\n  _applyCustomVisualRangeOption(axis, range) {\n    if (axis.getOptions().optionPath) {\n      this._parseVisualRangeOption(\"\".concat(axis.getOptions().optionPath, \".visualRange\"), range);\n    }\n  },\n\n  _getVisualRangeSetter() {\n    var chart = this;\n    return function (axis, _ref) {\n      var {\n        skipEventRising: skipEventRising,\n        range: range\n      } = _ref;\n\n      chart._applyCustomVisualRangeOption(axis, range);\n\n      axis.setCustomVisualRange(range);\n      axis.skipEventRising = skipEventRising;\n\n      if (!chart._applyVisualRangeByVirtualAxes(axis, range)) {\n        if (chart._applyingChanges) {\n          chart._change_VISUAL_RANGE();\n        } else {\n          chart._requestChange([VISUAL_RANGE]);\n        }\n      }\n    };\n  },\n\n  _getTrackerSettings: function () {\n    return _extend(this.callBase(), {\n      argumentAxis: this.getArgumentAxis()\n    });\n  },\n  _prepareStripsAndConstantLines: function (typeSelector, userOptions, rotated) {\n    userOptions = this._themeManager.getOptions(typeSelector, userOptions, rotated);\n\n    if (userOptions.strips) {\n      _each(userOptions.strips, function (i) {\n        userOptions.strips[i] = _extend(true, {}, userOptions.stripStyle, userOptions.strips[i]);\n      });\n    }\n\n    if (userOptions.constantLines) {\n      _each(userOptions.constantLines, function (i, line) {\n        userOptions.constantLines[i] = _extend(true, {}, userOptions.constantLineStyle, line);\n      });\n    }\n\n    return userOptions;\n  },\n  refresh: function () {\n    this._disposeAxes();\n\n    this.callBase();\n  },\n\n  _layoutAxes(drawAxes) {\n    drawAxes();\n    var needSpace = this.checkForMoreSpaceForPanesCanvas();\n\n    if (needSpace) {\n      var rect = this._rect.slice();\n\n      var size = this._layout.backward(rect, rect, [needSpace.width, needSpace.height]);\n\n      needSpace.width = Math.max(0, size[0]);\n      needSpace.height = Math.max(0, size[1]);\n      this._canvas = this._createCanvasFromRect(rect);\n      drawAxes(needSpace);\n    }\n  },\n\n  checkForMoreSpaceForPanesCanvas() {\n    return this.layoutManager.needMoreSpaceForPanesCanvas(this._getLayoutTargets(), this._isRotated());\n  },\n\n  _parseVisualRangeOption(fullName, value) {\n    var that = this;\n    var name = fullName.split(/[.[]/)[0];\n    var index = fullName.match(/\\d+/g);\n    index = _isDefined(index) ? parseInt(index[0]) : index;\n\n    if (fullName.indexOf(\"visualRange\") > 0) {\n      if (\"object\" !== type(value)) {\n        value = wrapVisualRange(fullName, value) || value;\n      }\n\n      that._setCustomVisualRange(name, index, value);\n    } else if ((\"object\" === type(value) || _isArray(value)) && name.indexOf(\"Axis\") > 0 && JSON.stringify(value).indexOf(\"visualRange\") > 0) {\n      if (_isDefined(value.visualRange)) {\n        that._setCustomVisualRange(name, index, value.visualRange);\n      } else if (_isArray(value)) {\n        value.forEach((a, i) => _isDefined(a.visualRange) && that._setCustomVisualRange(name, i, a.visualRange));\n      }\n    }\n  },\n\n  _setCustomVisualRange(axesName, index, value) {\n    var options = this._options.silent(axesName);\n\n    if (!options) {\n      return;\n    }\n\n    if (!_isDefined(index)) {\n      options._customVisualRange = value;\n    } else {\n      options[index]._customVisualRange = value;\n    }\n\n    this._axesReinitialized = true;\n  },\n\n  _raiseZoomEndHandlers() {\n    this._valueAxes.forEach(axis => axis.handleZoomEnd());\n  },\n\n  _setOptionsByReference() {\n    this.callBase();\n\n    _extend(this._optionsByReference, {\n      \"valueAxis.visualRange\": true\n    });\n  },\n\n  _notifyOptionChanged(option, value, previousValue) {\n    this.callBase.apply(this, arguments);\n\n    if (!this._optionChangedLocker) {\n      this._parseVisualRangeOption(option, value);\n    }\n  },\n\n  _notifyVisualRange() {\n    var that = this;\n\n    that._valueAxes.forEach(axis => {\n      var axisPath = axis.getOptions().optionPath;\n\n      if (axisPath) {\n        var path = \"\".concat(axisPath, \".visualRange\");\n        var visualRange = convertVisualRangeObject(axis.visualRange(), !_isArray(that.option(path)));\n\n        if (!axis.skipEventRising || !rangesAreEqual(visualRange, that.option(path))) {\n          if (!that.option(axisPath) && \"valueAxis\" !== axisPath) {\n            that.option(axisPath, {\n              name: axis.name,\n              visualRange: visualRange\n            });\n          } else {\n            that.option(path, visualRange);\n          }\n        } else {\n          axis.skipEventRising = null;\n        }\n      }\n    });\n  },\n\n  _notify() {\n    this.callBase();\n    this._axesReinitialized = false;\n\n    if (true !== this.option(\"disableTwoWayBinding\")) {\n      this._notifyVisualRange();\n    }\n  },\n\n  _getAxesForScaling() {\n    return this._valueAxes;\n  },\n\n  _getAxesByOptionPath(arg, isDirectOption, optionName) {\n    var sourceAxes = this._getAxesForScaling();\n\n    var axes = [];\n\n    if (isDirectOption) {\n      var axisPath;\n\n      if (arg.fullName) {\n        axisPath = arg.fullName.slice(0, arg.fullName.indexOf(\".\"));\n      }\n\n      axes = sourceAxes.filter(a => a.getOptions().optionPath === axisPath);\n    } else if (\"object\" === type(arg.value)) {\n      axes = sourceAxes.filter(a => a.getOptions().optionPath === arg.name);\n    } else if (_isArray(arg.value)) {\n      arg.value.forEach((v, index) => {\n        var axis = sourceAxes.filter(a => a.getOptions().optionPath === \"\".concat(arg.name, \"[\").concat(index, \"]\"))[0];\n        _isDefined(v[optionName]) && _isDefined(axis) && (axes[index] = axis);\n      });\n    }\n\n    return axes;\n  },\n\n  _optionChanged(arg) {\n    if (!this._optionChangedLocker) {\n      var axes;\n      var isDirectOption = arg.fullName.indexOf(\"visualRange\") > 0 ? true : this.getPartialChangeOptionsName(arg).indexOf(\"visualRange\") > -1 ? false : void 0;\n\n      if (_isDefined(isDirectOption)) {\n        axes = this._getAxesByOptionPath(arg, isDirectOption, \"visualRange\");\n\n        if (axes) {\n          if (axes.length > 1 || _isArray(arg.value)) {\n            axes.forEach((a, index) => setAxisVisualRangeByOption(arg, a, isDirectOption, index));\n          } else if (1 === axes.length) {\n            setAxisVisualRangeByOption(arg, axes[0], isDirectOption);\n          }\n        }\n      }\n    }\n\n    this.callBase(arg);\n  },\n\n  _change_VISUAL_RANGE: function () {\n    this._recreateSizeDependentObjects(false);\n\n    if (!this._changes.has(\"FULL_RENDER\")) {\n      var resizePanesOnZoom = this.option(\"resizePanesOnZoom\");\n\n      this._doRender({\n        force: true,\n        drawTitle: false,\n        drawLegend: false,\n        adjustAxes: null !== resizePanesOnZoom && void 0 !== resizePanesOnZoom ? resizePanesOnZoom : this.option(\"adjustAxesOnZoom\") || false,\n        animate: false\n      });\n\n      this._raiseZoomEndHandlers();\n    }\n  },\n\n  resetVisualRange() {\n    var that = this;\n\n    that._valueAxes.forEach(axis => {\n      axis.resetVisualRange(false);\n\n      that._applyCustomVisualRangeOption(axis);\n    });\n\n    that._requestChange([VISUAL_RANGE]);\n  },\n\n  _legendDataField: \"series\",\n  _adjustSeriesLabels: _noop,\n  _correctValueAxes: _noop\n});","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/chart_components/advanced_chart.js"],"names":["_extends","extend","_extend","inArray","each","_each","reverseEach","_reverseEach","Range","Axis","SeriesFamily","BaseChart","getMargins","rangeDataCalculator","isDefined","_isDefined","type","noop","_noop","convertVisualRangeObject","rangesAreEqual","map","_map","mergeMarginOptions","setCanvasValues","unique","_isArray","Array","isArray","DEFAULT_AXIS_NAME","FONT","COMMON_AXIS_SETTINGS","DEFAULT_PANE_NAME","VISUAL_RANGE","prepareAxis","axisOptions","length","processBubbleMargin","opt","bubbleSize","processBubbleSize","size","estimateBubbleSize","panesCount","maxSize","rotated","width","height","Math","min","setAxisVisualRangeByOption","arg","axis","isDirectOption","index","options","visualRange","value","skipEventRising","wrappedVisualRange","wrapVisualRange","fullName","allowPartialUpdate","getAxisTypes","groupsData","isArgumentAxes","argumentAxisType","argumentType","valueAxisType","valueType","groups","filter","g","valueAxis","pathElements","split","destElem","AdvancedChart","inherit","_fontFields","_partialOptionChangesMap","_customVisualRange","strips","constantLines","_partialOptionChangesPath","argumentAxis","_initCore","_panesClipRects","callBase","_disposeCore","disposeObjectsInArray","_disposeObjectsInArray","panesClipRects","call","_labelsAxesGroup","linkOff","dispose","_dispose","panes","_legend","_disposeAxes","_createPanes","_cleanPanesClipRects","clipArrayName","clipArray","forEach","clipRect","_getElementsClipRectID","paneName","clipShape","fixed","_getPaneIndex","id","paneIndex","name","pane","_updateSize","_canvas","_reinitAxes","_populateAxes","_axesReinitialized","_getCrosshairMargins","crosshairOptions","_getCrosshairOptions","crosshairEnabled","enabled","margins","x","horizontalLine","visible","y","verticalLine","that","_isRotated","argumentAxesOptions","option","valueAxisOption","valueAxesOptions","argumentAxesPopulatedOptions","valueAxesPopulatedOptions","axisNames","valueAxesCounter","paneWithNonVirtualAxis","crosshairMargins","position","virtual","_populateAxesOptions","optionPath","crosshairMargin","priority","_axisOptions$panes","axisPanes","_incidentOccurred","push","concat","slice","_","_redesignAxes","axesBasis","axes","_argumentAxes","_valueAxes","curAxes","a","some","p","axisTypes","_groupsData","updateOptions","setTypes","validate","basis","_disposeAxis","isVirtual","_createAxis","applyVisualRangeSetter","_getVisualRangeSetter","isArgumentAxis","splice","_appendAdditionalSeriesGroups","_crosshairCursorGroup","linkAppend","_scrollBar","_scrollBarGroup","_getLegendTargets","series","s","item","_getLegendOptions","legendData","getOptions","showInLegend","_legendItemTextField","_seriesPopulatedHandlerCore","_processSeriesFamilies","_processValueAxisFormat","_renderTrackers","i","drawTrackers","_specialProcessSeries","_that$seriesFamilies","types","families","paneSeries","themeManager","_themeManager","negativesAsZeroes","negativesAsZeros","familyOptions","minBubbleSize","maxBubbleSize","barGroupPadding","barGroupWidth","seriesFamilies","family","adjustSeriesValues","_getLayoutTargets","_getSeriesForPane","add","_updateSeriesDimensions","updateSeriesValues","adjustSeriesDimensions","_getLegendCallBack","getActionCallback","_appendAxesGroups","_stripsGroup","_gridGroup","_axesGroup","_constantLinesGroup","_stripLabelAxesGroup","_scaleBreaksGroup","_populateMarginOptions","getSize","argumentMarginOptions","groupSeries","getValueAxis","marginOptions","isVisible","seriesMarginOptions","getMarginOptions","setMarginOptions","_populateBusinessRange","updatedAxis","keepRange","_getVisibleSeries","argRanges","commonArgRange","getPaneName","groupRange","seriesRange","getRangeData","addRange","val","setGroupSeries","setBusinessRange","_lastVisualRangeUpdateMode","Object","keys","commonInterval","interval","_argRanges$getPaneNam","currentInterval","categories","getArgumentAxis","defaultPane","_getGroupsData","valueOptions","argumentAxes","argumentOptions","_groupSeries","_correctValueAxes","axesWithFullStackedFormat","isFullStackedSeries","setPercentLabelFormat","indexOf","resetAutoLabelFormat","typeSelector","userOptions","preparedUserOptions","_prepareStripsAndConstantLines","_prepareAxisOptions","tick","minorTick","label","title","_getValFilter","getViewPortFilter","renderingSettings","renderer","_renderer","incidentOccurred","eventTrigger","_eventTrigger","axisClass","widgetClass","stripsGroup","stripLabelAxesGroup","constantLinesGroup","scaleBreaksGroup","axesContainerGroup","labelsAxesGroup","gridGroup","getTemplate","template","_getTemplate","_getAxisRenderingOptions","_applyVisualRangeByVirtualAxes","range","_applyCustomVisualRangeOption","_parseVisualRangeOption","chart","_ref","setCustomVisualRange","_applyingChanges","_change_VISUAL_RANGE","_requestChange","_getTrackerSettings","stripStyle","line","constantLineStyle","refresh","_layoutAxes","drawAxes","needSpace","checkForMoreSpaceForPanesCanvas","rect","_rect","_layout","backward","max","_createCanvasFromRect","layoutManager","needMoreSpaceForPanesCanvas","match","parseInt","_setCustomVisualRange","JSON","stringify","axesName","_options","silent","_raiseZoomEndHandlers","handleZoomEnd","_setOptionsByReference","_optionsByReference","_notifyOptionChanged","previousValue","apply","arguments","_optionChangedLocker","_notifyVisualRange","axisPath","path","_notify","_getAxesForScaling","_getAxesByOptionPath","optionName","sourceAxes","v","_optionChanged","getPartialChangeOptionsName","_recreateSizeDependentObjects","_changes","has","resizePanesOnZoom","_doRender","force","drawTitle","drawLegend","adjustAxes","animate","resetVisualRange","_legendDataField","_adjustSeriesLabels"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/chart_components/advanced_chart.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    extend as _extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    each as _each,\r\n    reverseEach as _reverseEach\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    Range\r\n} from \"../translators/range\";\r\nimport {\r\n    Axis\r\n} from \"../axes/base_axis\";\r\nimport {\r\n    SeriesFamily\r\n} from \"../core/series_family\";\r\nimport {\r\n    BaseChart\r\n} from \"./base_chart\";\r\nimport {\r\n    getMargins\r\n} from \"./crosshair\";\r\nimport rangeDataCalculator from \"../series/helpers/range_data_calculator\";\r\nimport {\r\n    isDefined as _isDefined,\r\n    type\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    noop as _noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    convertVisualRangeObject,\r\n    rangesAreEqual,\r\n    map as _map,\r\n    mergeMarginOptions,\r\n    setCanvasValues,\r\n    unique\r\n} from \"../core/utils\";\r\nvar _isArray = Array.isArray;\r\nvar DEFAULT_AXIS_NAME = \"defaultAxisName\";\r\nvar FONT = \"font\";\r\nvar COMMON_AXIS_SETTINGS = \"commonAxisSettings\";\r\nvar DEFAULT_PANE_NAME = \"default\";\r\nvar VISUAL_RANGE = \"VISUAL_RANGE\";\r\n\r\nfunction prepareAxis(axisOptions) {\r\n    return _isArray(axisOptions) ? 0 === axisOptions.length ? [{}] : axisOptions : [axisOptions]\r\n}\r\n\r\nfunction processBubbleMargin(opt, bubbleSize) {\r\n    if (opt.processBubbleSize) {\r\n        opt.size = bubbleSize\r\n    }\r\n    return opt\r\n}\r\n\r\nfunction estimateBubbleSize(size, panesCount, maxSize, rotated) {\r\n    var width = rotated ? size.width / panesCount : size.width;\r\n    var height = rotated ? size.height : size.height / panesCount;\r\n    return Math.min(width, height) * maxSize\r\n}\r\n\r\nfunction setAxisVisualRangeByOption(arg, axis, isDirectOption, index) {\r\n    var options;\r\n    var visualRange;\r\n    if (isDirectOption) {\r\n        visualRange = arg.value;\r\n        options = {\r\n            skipEventRising: true\r\n        };\r\n        var wrappedVisualRange = wrapVisualRange(arg.fullName, visualRange);\r\n        if (wrappedVisualRange) {\r\n            options = {\r\n                allowPartialUpdate: true\r\n            };\r\n            visualRange = wrappedVisualRange\r\n        }\r\n    } else {\r\n        visualRange = (_isDefined(index) ? arg.value[index] : arg.value).visualRange\r\n    }\r\n    axis.visualRange(visualRange, options)\r\n}\r\n\r\nfunction getAxisTypes(groupsData, axis, isArgumentAxes) {\r\n    if (isArgumentAxes) {\r\n        return {\r\n            argumentAxisType: groupsData.argumentAxisType,\r\n            argumentType: groupsData.argumentType\r\n        }\r\n    }\r\n    var {\r\n        valueAxisType: valueAxisType,\r\n        valueType: valueType\r\n    } = groupsData.groups.filter(g => g.valueAxis === axis)[0];\r\n    return {\r\n        valueAxisType: valueAxisType,\r\n        valueType: valueType\r\n    }\r\n}\r\n\r\nfunction wrapVisualRange(fullName, value) {\r\n    var pathElements = fullName.split(\".\");\r\n    var destElem = pathElements[pathElements.length - 1];\r\n    if (\"endValue\" === destElem || \"startValue\" === destElem) {\r\n        return {\r\n            [destElem]: value\r\n        }\r\n    }\r\n}\r\nexport var AdvancedChart = BaseChart.inherit({\r\n    _fontFields: [COMMON_AXIS_SETTINGS + \".label.\" + FONT, COMMON_AXIS_SETTINGS + \".title.\" + FONT],\r\n    _partialOptionChangesMap: {\r\n        visualRange: VISUAL_RANGE,\r\n        _customVisualRange: VISUAL_RANGE,\r\n        strips: \"REFRESH_AXES\",\r\n        constantLines: \"REFRESH_AXES\"\r\n    },\r\n    _partialOptionChangesPath: {\r\n        argumentAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"],\r\n        valueAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"]\r\n    },\r\n    _initCore() {\r\n        this._panesClipRects = {};\r\n        this.callBase()\r\n    },\r\n    _disposeCore() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        var panesClipRects = this._panesClipRects;\r\n        this.callBase();\r\n        disposeObjectsInArray.call(panesClipRects, \"fixed\");\r\n        disposeObjectsInArray.call(panesClipRects, \"base\");\r\n        disposeObjectsInArray.call(panesClipRects, \"wide\");\r\n        this._panesClipRects = null;\r\n        this._labelsAxesGroup.linkOff();\r\n        this._labelsAxesGroup.dispose();\r\n        this._labelsAxesGroup = null\r\n    },\r\n    _dispose: function() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        this.callBase();\r\n        this.panes = null;\r\n        if (this._legend) {\r\n            this._legend.dispose();\r\n            this._legend = null\r\n        }\r\n        disposeObjectsInArray.call(this, \"panesBackground\");\r\n        disposeObjectsInArray.call(this, \"seriesFamilies\");\r\n        this._disposeAxes()\r\n    },\r\n    _createPanes: function() {\r\n        this._cleanPanesClipRects(\"fixed\");\r\n        this._cleanPanesClipRects(\"base\");\r\n        this._cleanPanesClipRects(\"wide\")\r\n    },\r\n    _cleanPanesClipRects(clipArrayName) {\r\n        var clipArray = this._panesClipRects[clipArrayName];\r\n        (clipArray || []).forEach(clipRect => clipRect && clipRect.dispose());\r\n        this._panesClipRects[clipArrayName] = []\r\n    },\r\n    _getElementsClipRectID(paneName) {\r\n        var clipShape = this._panesClipRects.fixed[this._getPaneIndex(paneName)];\r\n        return clipShape && clipShape.id\r\n    },\r\n    _getPaneIndex(paneName) {\r\n        var paneIndex;\r\n        var name = paneName || DEFAULT_PANE_NAME;\r\n        _each(this.panes, (index, pane) => {\r\n            if (pane.name === name) {\r\n                paneIndex = index;\r\n                return false\r\n            }\r\n        });\r\n        return paneIndex\r\n    },\r\n    _updateSize() {\r\n        this.callBase();\r\n        setCanvasValues(this._canvas)\r\n    },\r\n    _reinitAxes: function() {\r\n        this.panes = this._createPanes();\r\n        this._populateAxes();\r\n        this._axesReinitialized = true\r\n    },\r\n    _getCrosshairMargins: function() {\r\n        var crosshairOptions = this._getCrosshairOptions() || {};\r\n        var crosshairEnabled = crosshairOptions.enabled;\r\n        var margins = getMargins();\r\n        return {\r\n            x: crosshairEnabled && crosshairOptions.horizontalLine.visible ? margins.x : 0,\r\n            y: crosshairEnabled && crosshairOptions.verticalLine.visible ? margins.y : 0\r\n        }\r\n    },\r\n    _populateAxes() {\r\n        var that = this;\r\n        var panes = that.panes;\r\n        var rotated = that._isRotated();\r\n        var argumentAxesOptions = prepareAxis(that.option(\"argumentAxis\") || {})[0];\r\n        var valueAxisOption = that.option(\"valueAxis\");\r\n        var valueAxesOptions = prepareAxis(valueAxisOption || {});\r\n        var argumentAxesPopulatedOptions;\r\n        var valueAxesPopulatedOptions = [];\r\n        var axisNames = [];\r\n        var valueAxesCounter = 0;\r\n        var paneWithNonVirtualAxis;\r\n        var crosshairMargins = that._getCrosshairMargins();\r\n        if (rotated) {\r\n            paneWithNonVirtualAxis = \"right\" === argumentAxesOptions.position ? panes[panes.length - 1].name : panes[0].name\r\n        } else {\r\n            paneWithNonVirtualAxis = \"top\" === argumentAxesOptions.position ? panes[0].name : panes[panes.length - 1].name\r\n        }\r\n        argumentAxesPopulatedOptions = _map(panes, pane => {\r\n            var virtual = pane.name !== paneWithNonVirtualAxis;\r\n            return that._populateAxesOptions(\"argumentAxis\", argumentAxesOptions, {\r\n                pane: pane.name,\r\n                name: null,\r\n                optionPath: \"argumentAxis\",\r\n                crosshairMargin: rotated ? crosshairMargins.x : crosshairMargins.y\r\n            }, rotated, virtual)\r\n        });\r\n        _each(valueAxesOptions, (priority, axisOptions) => {\r\n            var _axisOptions$panes;\r\n            var axisPanes = [];\r\n            var name = axisOptions.name;\r\n            if (name && -1 !== inArray(name, axisNames)) {\r\n                that._incidentOccurred(\"E2102\");\r\n                return\r\n            }\r\n            name && axisNames.push(name);\r\n            if (axisOptions.pane) {\r\n                axisPanes.push(axisOptions.pane)\r\n            }\r\n            if (null !== (_axisOptions$panes = axisOptions.panes) && void 0 !== _axisOptions$panes && _axisOptions$panes.length) {\r\n                axisPanes = axisPanes.concat(axisOptions.panes.slice(0))\r\n            }\r\n            axisPanes = unique(axisPanes);\r\n            if (!axisPanes.length) {\r\n                axisPanes.push(void 0)\r\n            }\r\n            _each(axisPanes, (_, pane) => {\r\n                var optionPath = _isArray(valueAxisOption) ? \"valueAxis[\".concat(priority, \"]\") : \"valueAxis\";\r\n                valueAxesPopulatedOptions.push(that._populateAxesOptions(\"valueAxis\", axisOptions, {\r\n                    name: name || DEFAULT_AXIS_NAME + valueAxesCounter++,\r\n                    pane: pane,\r\n                    priority: priority,\r\n                    optionPath: optionPath,\r\n                    crosshairMargin: rotated ? crosshairMargins.y : crosshairMargins.x\r\n                }, rotated))\r\n            })\r\n        });\r\n        that._redesignAxes(argumentAxesPopulatedOptions, true, paneWithNonVirtualAxis);\r\n        that._redesignAxes(valueAxesPopulatedOptions, false)\r\n    },\r\n    _redesignAxes(options, isArgumentAxes, paneWithNonVirtualAxis) {\r\n        var that = this;\r\n        var axesBasis = [];\r\n        var axes = isArgumentAxes ? that._argumentAxes : that._valueAxes;\r\n        _each(options, (_, opt) => {\r\n            var curAxes = axes && axes.filter(a => a.name === opt.name && (!_isDefined(opt.pane) && that.panes.some(p => p.name === a.pane) || a.pane === opt.pane));\r\n            if (curAxes && curAxes.length > 0) {\r\n                _each(curAxes, (_, axis) => {\r\n                    var axisTypes = getAxisTypes(that._groupsData, axis, isArgumentAxes);\r\n                    axis.updateOptions(opt);\r\n                    if (isArgumentAxes) {\r\n                        axis.setTypes(axisTypes.argumentAxisType, axisTypes.argumentType, \"argumentType\")\r\n                    } else {\r\n                        axis.setTypes(axisTypes.valueAxisType, axisTypes.valueType, \"valueType\")\r\n                    }\r\n                    axis.validate();\r\n                    axesBasis.push({\r\n                        axis: axis\r\n                    })\r\n                })\r\n            } else {\r\n                axesBasis.push({\r\n                    options: opt\r\n                })\r\n            }\r\n        });\r\n        if (axes) {\r\n            _reverseEach(axes, (index, axis) => {\r\n                if (!axesBasis.some(basis => basis.axis && basis.axis === axis)) {\r\n                    that._disposeAxis(index, isArgumentAxes)\r\n                }\r\n            })\r\n        } else if (isArgumentAxes) {\r\n            axes = that._argumentAxes = []\r\n        } else {\r\n            axes = that._valueAxes = []\r\n        }\r\n        _each(axesBasis, (_, basis) => {\r\n            var axis = basis.axis;\r\n            if (basis.axis && isArgumentAxes) {\r\n                basis.axis.isVirtual = basis.axis.pane !== paneWithNonVirtualAxis\r\n            } else if (basis.options) {\r\n                axis = that._createAxis(isArgumentAxes, basis.options, isArgumentAxes ? basis.options.pane !== paneWithNonVirtualAxis : void 0);\r\n                axes.push(axis)\r\n            }\r\n            axis.applyVisualRangeSetter(that._getVisualRangeSetter())\r\n        })\r\n    },\r\n    _disposeAxis(index, isArgumentAxis) {\r\n        var axes = isArgumentAxis ? this._argumentAxes : this._valueAxes;\r\n        var axis = axes[index];\r\n        if (!axis) {\r\n            return\r\n        }\r\n        axis.dispose();\r\n        axes.splice(index, 1)\r\n    },\r\n    _disposeAxes: function() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        disposeObjectsInArray.call(this, \"_argumentAxes\");\r\n        disposeObjectsInArray.call(this, \"_valueAxes\")\r\n    },\r\n    _appendAdditionalSeriesGroups: function() {\r\n        this._crosshairCursorGroup.linkAppend();\r\n        this._scrollBar && this._scrollBarGroup.linkAppend()\r\n    },\r\n    _getLegendTargets: function() {\r\n        return (this.series || []).map(s => {\r\n            var item = this._getLegendOptions(s);\r\n            item.legendData.series = s;\r\n            if (!s.getOptions().showInLegend) {\r\n                item.legendData.visible = false\r\n            }\r\n            return item\r\n        })\r\n    },\r\n    _legendItemTextField: \"name\",\r\n    _seriesPopulatedHandlerCore: function() {\r\n        this._processSeriesFamilies();\r\n        this._processValueAxisFormat()\r\n    },\r\n    _renderTrackers: function() {\r\n        var i;\r\n        for (i = 0; i < this.series.length; ++i) {\r\n            this.series[i].drawTrackers()\r\n        }\r\n    },\r\n    _specialProcessSeries: function() {\r\n        this._processSeriesFamilies()\r\n    },\r\n    _processSeriesFamilies: function() {\r\n        var _that$seriesFamilies;\r\n        var that = this;\r\n        var types = [];\r\n        var families = [];\r\n        var paneSeries;\r\n        var themeManager = that._themeManager;\r\n        var negativesAsZeroes = themeManager.getOptions(\"negativesAsZeroes\");\r\n        var negativesAsZeros = themeManager.getOptions(\"negativesAsZeros\");\r\n        var familyOptions = {\r\n            minBubbleSize: themeManager.getOptions(\"minBubbleSize\"),\r\n            maxBubbleSize: themeManager.getOptions(\"maxBubbleSize\"),\r\n            barGroupPadding: themeManager.getOptions(\"barGroupPadding\"),\r\n            barGroupWidth: themeManager.getOptions(\"barGroupWidth\"),\r\n            negativesAsZeroes: _isDefined(negativesAsZeroes) ? negativesAsZeroes : negativesAsZeros\r\n        };\r\n        if (null !== (_that$seriesFamilies = that.seriesFamilies) && void 0 !== _that$seriesFamilies && _that$seriesFamilies.length) {\r\n            _each(that.seriesFamilies, (function(_, family) {\r\n                family.updateOptions(familyOptions);\r\n                family.adjustSeriesValues()\r\n            }));\r\n            return\r\n        }\r\n        _each(that.series, (function(_, item) {\r\n            if (-1 === inArray(item.type, types)) {\r\n                types.push(item.type)\r\n            }\r\n        }));\r\n        _each(that._getLayoutTargets(), (function(_, pane) {\r\n            paneSeries = that._getSeriesForPane(pane.name);\r\n            _each(types, (function(_, type) {\r\n                var family = new SeriesFamily({\r\n                    type: type,\r\n                    pane: pane.name,\r\n                    minBubbleSize: familyOptions.minBubbleSize,\r\n                    maxBubbleSize: familyOptions.maxBubbleSize,\r\n                    barGroupPadding: familyOptions.barGroupPadding,\r\n                    barGroupWidth: familyOptions.barGroupWidth,\r\n                    negativesAsZeroes: familyOptions.negativesAsZeroes,\r\n                    rotated: that._isRotated()\r\n                });\r\n                family.add(paneSeries);\r\n                family.adjustSeriesValues();\r\n                families.push(family)\r\n            }))\r\n        }));\r\n        that.seriesFamilies = families\r\n    },\r\n    _updateSeriesDimensions: function() {\r\n        var i;\r\n        var seriesFamilies = this.seriesFamilies || [];\r\n        for (i = 0; i < seriesFamilies.length; i++) {\r\n            var family = seriesFamilies[i];\r\n            family.updateSeriesValues();\r\n            family.adjustSeriesDimensions()\r\n        }\r\n    },\r\n    _getLegendCallBack: function(series) {\r\n        return this._legend && this._legend.getActionCallback(series)\r\n    },\r\n    _appendAxesGroups: function() {\r\n        this._stripsGroup.linkAppend();\r\n        this._gridGroup.linkAppend();\r\n        this._axesGroup.linkAppend();\r\n        this._labelsAxesGroup.linkAppend();\r\n        this._constantLinesGroup.linkAppend();\r\n        this._stripLabelAxesGroup.linkAppend();\r\n        this._scaleBreaksGroup.linkAppend()\r\n    },\r\n    _populateMarginOptions() {\r\n        var that = this;\r\n        var bubbleSize = estimateBubbleSize(that.getSize(), that.panes.length, that._themeManager.getOptions(\"maxBubbleSize\"), that._isRotated());\r\n        var argumentMarginOptions = {};\r\n        that._valueAxes.forEach(valueAxis => {\r\n            var groupSeries = that.series.filter((function(series) {\r\n                return series.getValueAxis() === valueAxis\r\n            }));\r\n            var marginOptions = {};\r\n            groupSeries.forEach(series => {\r\n                if (series.isVisible()) {\r\n                    var seriesMarginOptions = processBubbleMargin(series.getMarginOptions(), bubbleSize);\r\n                    marginOptions = mergeMarginOptions(marginOptions, seriesMarginOptions);\r\n                    argumentMarginOptions = mergeMarginOptions(argumentMarginOptions, seriesMarginOptions)\r\n                }\r\n            });\r\n            valueAxis.setMarginOptions(marginOptions)\r\n        });\r\n        that._argumentAxes.forEach(a => a.setMarginOptions(argumentMarginOptions))\r\n    },\r\n    _populateBusinessRange(updatedAxis, keepRange) {\r\n        var that = this;\r\n        var rotated = that._isRotated();\r\n        var series = that._getVisibleSeries();\r\n        var argRanges = {};\r\n        var commonArgRange = new Range({\r\n            rotated: !!rotated\r\n        });\r\n        var getPaneName = axis => axis.pane || DEFAULT_PANE_NAME;\r\n        that.panes.forEach(p => argRanges[p.name] = new Range({\r\n            rotated: !!rotated\r\n        }));\r\n        that._valueAxes.forEach(valueAxis => {\r\n            var groupRange = new Range({\r\n                rotated: !!rotated,\r\n                pane: valueAxis.pane,\r\n                axis: valueAxis.name\r\n            });\r\n            var groupSeries = series.filter(series => series.getValueAxis() === valueAxis);\r\n            groupSeries.forEach(series => {\r\n                var seriesRange = series.getRangeData();\r\n                groupRange.addRange(seriesRange.val);\r\n                argRanges[getPaneName(valueAxis)].addRange(seriesRange.arg)\r\n            });\r\n            if (!updatedAxis || updatedAxis && groupSeries.length && valueAxis === updatedAxis) {\r\n                valueAxis.setGroupSeries(groupSeries);\r\n                valueAxis.setBusinessRange(groupRange, that._axesReinitialized || keepRange, that._argumentAxes[0]._lastVisualRangeUpdateMode)\r\n            }\r\n        });\r\n        if (!updatedAxis || updatedAxis && series.length) {\r\n            Object.keys(argRanges).forEach(p => commonArgRange.addRange(argRanges[p]));\r\n            var commonInterval = commonArgRange.interval;\r\n            that._argumentAxes.forEach(a => {\r\n                var _argRanges$getPaneNam;\r\n                var currentInterval = null !== (_argRanges$getPaneNam = argRanges[getPaneName(a)].interval) && void 0 !== _argRanges$getPaneNam ? _argRanges$getPaneNam : commonInterval;\r\n                a.setBusinessRange(new Range(_extends({}, commonArgRange, {\r\n                    interval: currentInterval\r\n                })), that._axesReinitialized, void 0, that._groupsData.categories)\r\n            })\r\n        }\r\n        that._populateMarginOptions()\r\n    },\r\n    getArgumentAxis: function() {\r\n        return (this._argumentAxes || []).filter(a => !a.isVirtual)[0]\r\n    },\r\n    getValueAxis: function(name) {\r\n        return (this._valueAxes || []).filter(_isDefined(name) ? a => a.name === name : a => a.pane === this.defaultPane)[0]\r\n    },\r\n    _getGroupsData: function() {\r\n        var that = this;\r\n        var groups = [];\r\n        that._valueAxes.forEach((function(axis) {\r\n            groups.push({\r\n                series: that.series.filter((function(series) {\r\n                    return series.getValueAxis() === axis\r\n                })),\r\n                valueAxis: axis,\r\n                valueOptions: axis.getOptions()\r\n            })\r\n        }));\r\n        return {\r\n            groups: groups,\r\n            argumentAxes: that._argumentAxes,\r\n            argumentOptions: that._argumentAxes[0].getOptions()\r\n        }\r\n    },\r\n    _groupSeries: function() {\r\n        this._correctValueAxes(false);\r\n        this._groupsData = this._getGroupsData()\r\n    },\r\n    _processValueAxisFormat: function() {\r\n        var axesWithFullStackedFormat = [];\r\n        this.series.forEach((function(series) {\r\n            var axis = series.getValueAxis();\r\n            if (series.isFullStackedSeries()) {\r\n                axis.setPercentLabelFormat();\r\n                axesWithFullStackedFormat.push(axis)\r\n            }\r\n        }));\r\n        this._valueAxes.forEach((function(axis) {\r\n            if (-1 === axesWithFullStackedFormat.indexOf(axis)) {\r\n                axis.resetAutoLabelFormat()\r\n            }\r\n        }))\r\n    },\r\n    _populateAxesOptions(typeSelector, userOptions, axisOptions, rotated, virtual) {\r\n        var preparedUserOptions = this._prepareStripsAndConstantLines(typeSelector, userOptions, rotated);\r\n        var options = _extend(true, {}, preparedUserOptions, axisOptions, this._prepareAxisOptions(typeSelector, preparedUserOptions, rotated));\r\n        if (virtual) {\r\n            options.visible = options.tick.visible = options.minorTick.visible = options.label.visible = false;\r\n            options.title = {}\r\n        }\r\n        return options\r\n    },\r\n    _getValFilter: series => rangeDataCalculator.getViewPortFilter(series.getValueAxis().visualRange() || {}),\r\n    _createAxis(isArgumentAxes, options, virtual) {\r\n        var that = this;\r\n        var typeSelector = isArgumentAxes ? \"argumentAxis\" : \"valueAxis\";\r\n        var renderingSettings = _extend({\r\n            renderer: that._renderer,\r\n            incidentOccurred: that._incidentOccurred,\r\n            eventTrigger: that._eventTrigger,\r\n            axisClass: isArgumentAxes ? \"arg\" : \"val\",\r\n            widgetClass: \"dxc\",\r\n            stripsGroup: that._stripsGroup,\r\n            stripLabelAxesGroup: that._stripLabelAxesGroup,\r\n            constantLinesGroup: that._constantLinesGroup,\r\n            scaleBreaksGroup: that._scaleBreaksGroup,\r\n            axesContainerGroup: that._axesGroup,\r\n            labelsAxesGroup: that._labelsAxesGroup,\r\n            gridGroup: that._gridGroup,\r\n            isArgumentAxis: isArgumentAxes,\r\n            getTemplate: template => that._getTemplate(template)\r\n        }, that._getAxisRenderingOptions(typeSelector));\r\n        var axis = new Axis(renderingSettings);\r\n        axis.updateOptions(options);\r\n        axis.isVirtual = virtual;\r\n        return axis\r\n    },\r\n    _applyVisualRangeByVirtualAxes: (axis, range) => false,\r\n    _applyCustomVisualRangeOption(axis, range) {\r\n        if (axis.getOptions().optionPath) {\r\n            this._parseVisualRangeOption(\"\".concat(axis.getOptions().optionPath, \".visualRange\"), range)\r\n        }\r\n    },\r\n    _getVisualRangeSetter() {\r\n        var chart = this;\r\n        return function(axis, _ref) {\r\n            var {\r\n                skipEventRising: skipEventRising,\r\n                range: range\r\n            } = _ref;\r\n            chart._applyCustomVisualRangeOption(axis, range);\r\n            axis.setCustomVisualRange(range);\r\n            axis.skipEventRising = skipEventRising;\r\n            if (!chart._applyVisualRangeByVirtualAxes(axis, range)) {\r\n                if (chart._applyingChanges) {\r\n                    chart._change_VISUAL_RANGE()\r\n                } else {\r\n                    chart._requestChange([VISUAL_RANGE])\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getTrackerSettings: function() {\r\n        return _extend(this.callBase(), {\r\n            argumentAxis: this.getArgumentAxis()\r\n        })\r\n    },\r\n    _prepareStripsAndConstantLines: function(typeSelector, userOptions, rotated) {\r\n        userOptions = this._themeManager.getOptions(typeSelector, userOptions, rotated);\r\n        if (userOptions.strips) {\r\n            _each(userOptions.strips, (function(i) {\r\n                userOptions.strips[i] = _extend(true, {}, userOptions.stripStyle, userOptions.strips[i])\r\n            }))\r\n        }\r\n        if (userOptions.constantLines) {\r\n            _each(userOptions.constantLines, (function(i, line) {\r\n                userOptions.constantLines[i] = _extend(true, {}, userOptions.constantLineStyle, line)\r\n            }))\r\n        }\r\n        return userOptions\r\n    },\r\n    refresh: function() {\r\n        this._disposeAxes();\r\n        this.callBase()\r\n    },\r\n    _layoutAxes(drawAxes) {\r\n        drawAxes();\r\n        var needSpace = this.checkForMoreSpaceForPanesCanvas();\r\n        if (needSpace) {\r\n            var rect = this._rect.slice();\r\n            var size = this._layout.backward(rect, rect, [needSpace.width, needSpace.height]);\r\n            needSpace.width = Math.max(0, size[0]);\r\n            needSpace.height = Math.max(0, size[1]);\r\n            this._canvas = this._createCanvasFromRect(rect);\r\n            drawAxes(needSpace)\r\n        }\r\n    },\r\n    checkForMoreSpaceForPanesCanvas() {\r\n        return this.layoutManager.needMoreSpaceForPanesCanvas(this._getLayoutTargets(), this._isRotated())\r\n    },\r\n    _parseVisualRangeOption(fullName, value) {\r\n        var that = this;\r\n        var name = fullName.split(/[.[]/)[0];\r\n        var index = fullName.match(/\\d+/g);\r\n        index = _isDefined(index) ? parseInt(index[0]) : index;\r\n        if (fullName.indexOf(\"visualRange\") > 0) {\r\n            if (\"object\" !== type(value)) {\r\n                value = wrapVisualRange(fullName, value) || value\r\n            }\r\n            that._setCustomVisualRange(name, index, value)\r\n        } else if ((\"object\" === type(value) || _isArray(value)) && name.indexOf(\"Axis\") > 0 && JSON.stringify(value).indexOf(\"visualRange\") > 0) {\r\n            if (_isDefined(value.visualRange)) {\r\n                that._setCustomVisualRange(name, index, value.visualRange)\r\n            } else if (_isArray(value)) {\r\n                value.forEach((a, i) => _isDefined(a.visualRange) && that._setCustomVisualRange(name, i, a.visualRange))\r\n            }\r\n        }\r\n    },\r\n    _setCustomVisualRange(axesName, index, value) {\r\n        var options = this._options.silent(axesName);\r\n        if (!options) {\r\n            return\r\n        }\r\n        if (!_isDefined(index)) {\r\n            options._customVisualRange = value\r\n        } else {\r\n            options[index]._customVisualRange = value\r\n        }\r\n        this._axesReinitialized = true\r\n    },\r\n    _raiseZoomEndHandlers() {\r\n        this._valueAxes.forEach(axis => axis.handleZoomEnd())\r\n    },\r\n    _setOptionsByReference() {\r\n        this.callBase();\r\n        _extend(this._optionsByReference, {\r\n            \"valueAxis.visualRange\": true\r\n        })\r\n    },\r\n    _notifyOptionChanged(option, value, previousValue) {\r\n        this.callBase.apply(this, arguments);\r\n        if (!this._optionChangedLocker) {\r\n            this._parseVisualRangeOption(option, value)\r\n        }\r\n    },\r\n    _notifyVisualRange() {\r\n        var that = this;\r\n        that._valueAxes.forEach(axis => {\r\n            var axisPath = axis.getOptions().optionPath;\r\n            if (axisPath) {\r\n                var path = \"\".concat(axisPath, \".visualRange\");\r\n                var visualRange = convertVisualRangeObject(axis.visualRange(), !_isArray(that.option(path)));\r\n                if (!axis.skipEventRising || !rangesAreEqual(visualRange, that.option(path))) {\r\n                    if (!that.option(axisPath) && \"valueAxis\" !== axisPath) {\r\n                        that.option(axisPath, {\r\n                            name: axis.name,\r\n                            visualRange: visualRange\r\n                        })\r\n                    } else {\r\n                        that.option(path, visualRange)\r\n                    }\r\n                } else {\r\n                    axis.skipEventRising = null\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _notify() {\r\n        this.callBase();\r\n        this._axesReinitialized = false;\r\n        if (true !== this.option(\"disableTwoWayBinding\")) {\r\n            this._notifyVisualRange()\r\n        }\r\n    },\r\n    _getAxesForScaling() {\r\n        return this._valueAxes\r\n    },\r\n    _getAxesByOptionPath(arg, isDirectOption, optionName) {\r\n        var sourceAxes = this._getAxesForScaling();\r\n        var axes = [];\r\n        if (isDirectOption) {\r\n            var axisPath;\r\n            if (arg.fullName) {\r\n                axisPath = arg.fullName.slice(0, arg.fullName.indexOf(\".\"))\r\n            }\r\n            axes = sourceAxes.filter(a => a.getOptions().optionPath === axisPath)\r\n        } else if (\"object\" === type(arg.value)) {\r\n            axes = sourceAxes.filter(a => a.getOptions().optionPath === arg.name)\r\n        } else if (_isArray(arg.value)) {\r\n            arg.value.forEach((v, index) => {\r\n                var axis = sourceAxes.filter(a => a.getOptions().optionPath === \"\".concat(arg.name, \"[\").concat(index, \"]\"))[0];\r\n                _isDefined(v[optionName]) && _isDefined(axis) && (axes[index] = axis)\r\n            })\r\n        }\r\n        return axes\r\n    },\r\n    _optionChanged(arg) {\r\n        if (!this._optionChangedLocker) {\r\n            var axes;\r\n            var isDirectOption = arg.fullName.indexOf(\"visualRange\") > 0 ? true : this.getPartialChangeOptionsName(arg).indexOf(\"visualRange\") > -1 ? false : void 0;\r\n            if (_isDefined(isDirectOption)) {\r\n                axes = this._getAxesByOptionPath(arg, isDirectOption, \"visualRange\");\r\n                if (axes) {\r\n                    if (axes.length > 1 || _isArray(arg.value)) {\r\n                        axes.forEach((a, index) => setAxisVisualRangeByOption(arg, a, isDirectOption, index))\r\n                    } else if (1 === axes.length) {\r\n                        setAxisVisualRangeByOption(arg, axes[0], isDirectOption)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.callBase(arg)\r\n    },\r\n    _change_VISUAL_RANGE: function() {\r\n        this._recreateSizeDependentObjects(false);\r\n        if (!this._changes.has(\"FULL_RENDER\")) {\r\n            var resizePanesOnZoom = this.option(\"resizePanesOnZoom\");\r\n            this._doRender({\r\n                force: true,\r\n                drawTitle: false,\r\n                drawLegend: false,\r\n                adjustAxes: null !== resizePanesOnZoom && void 0 !== resizePanesOnZoom ? resizePanesOnZoom : this.option(\"adjustAxesOnZoom\") || false,\r\n                animate: false\r\n            });\r\n            this._raiseZoomEndHandlers()\r\n        }\r\n    },\r\n    resetVisualRange() {\r\n        var that = this;\r\n        that._valueAxes.forEach(axis => {\r\n            axis.resetVisualRange(false);\r\n            that._applyCustomVisualRangeOption(axis)\r\n        });\r\n        that._requestChange([VISUAL_RANGE])\r\n    },\r\n    _legendDataField: \"series\",\r\n    _adjustSeriesLabels: _noop,\r\n    _correctValueAxes: _noop\r\n});\r\n"]},"metadata":{},"sourceType":"module"}