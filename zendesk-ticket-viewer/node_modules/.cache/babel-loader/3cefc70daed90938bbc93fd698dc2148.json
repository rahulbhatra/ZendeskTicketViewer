{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/chart_components/multi_axes_synchronizer.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { debug } from \"../../core/utils/console\";\nimport { isDefined, isNumeric } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { getLog, raiseTo } from \"../core/utils\";\nimport { adjust } from \"../../core/utils/math\";\nvar _math = Math;\nvar _floor = _math.floor;\nvar _max = _math.max;\nvar _abs = _math.abs;\n\nfunction getValueAxesPerPanes(valueAxes) {\n  var result = {};\n  valueAxes.forEach(axis => {\n    var pane = axis.pane;\n\n    if (!result[pane]) {\n      result[pane] = [];\n    }\n\n    result[pane].push(axis);\n  });\n  return result;\n}\n\nvar linearConverter = {\n  transform: function (v, b) {\n    return adjust(getLog(v, b));\n  },\n  addInterval: function (v, i) {\n    return adjust(v + i);\n  },\n  getInterval: function (base, tickInterval) {\n    return tickInterval;\n  }\n};\nvar logConverter = {\n  transform: function (v, b) {\n    return adjust(raiseTo(v, b));\n  },\n  addInterval: function (v, i) {\n    return adjust(v * i);\n  },\n  getInterval: function (base, tickInterval) {\n    return _math.pow(base, tickInterval);\n  }\n};\n\nfunction convertAxisInfo(axisInfo, converter) {\n  if (!axisInfo.isLogarithmic) {\n    return;\n  }\n\n  var base = axisInfo.logarithmicBase;\n  var tickValues = axisInfo.tickValues;\n  var tick;\n  var ticks = [];\n  axisInfo.minValue = converter.transform(axisInfo.minValue, base);\n  axisInfo.oldMinValue = converter.transform(axisInfo.oldMinValue, base);\n  axisInfo.maxValue = converter.transform(axisInfo.maxValue, base);\n  axisInfo.oldMaxValue = converter.transform(axisInfo.oldMaxValue, base);\n  axisInfo.tickInterval = _math.round(axisInfo.tickInterval);\n\n  if (axisInfo.tickInterval < 1) {\n    axisInfo.tickInterval = 1;\n  }\n\n  var interval = converter.getInterval(base, axisInfo.tickInterval);\n  tick = converter.transform(tickValues[0], base);\n\n  while (ticks.length < tickValues.length) {\n    ticks.push(tick);\n    tick = converter.addInterval(tick, interval);\n  }\n\n  ticks.tickInterval = axisInfo.tickInterval;\n  axisInfo.tickValues = ticks;\n}\n\nfunction populateAxesInfo(axes) {\n  return axes.reduce(function (result, axis) {\n    var ticksValues = axis.getTicksValues();\n    var majorTicks = ticksValues.majorTicksValues;\n    var options = axis.getOptions();\n    var businessRange = axis.getTranslator().getBusinessRange();\n    var visibleArea = axis.getVisibleArea();\n    var axisInfo;\n    var tickInterval = axis._tickInterval;\n    var synchronizedValue = options.synchronizedValue;\n    var action = axis.getViewport().action;\n\n    if (majorTicks && majorTicks.length > 0 && isNumeric(majorTicks[0]) && \"discrete\" !== options.type && !businessRange.isEmpty() && !(businessRange.breaks && businessRange.breaks.length) && \"zoom\" !== action && \"pan\" !== action) {\n      axis.applyMargins();\n      var startValue = axis.getTranslator().from(visibleArea[0]);\n      var endValue = axis.getTranslator().from(visibleArea[1]);\n      var minValue = startValue < endValue ? startValue : endValue;\n      var maxValue = startValue < endValue ? endValue : startValue;\n\n      if (minValue === maxValue && isDefined(synchronizedValue)) {\n        tickInterval = _abs(majorTicks[0] - synchronizedValue) || 1;\n        minValue = majorTicks[0] - tickInterval;\n        maxValue = majorTicks[0] + tickInterval;\n      }\n\n      axisInfo = {\n        axis: axis,\n        isLogarithmic: \"logarithmic\" === options.type,\n        logarithmicBase: businessRange.base,\n        tickValues: majorTicks,\n        minorValues: ticksValues.minorTicksValues,\n        minorTickInterval: axis._minorTickInterval,\n        minValue: minValue,\n        oldMinValue: minValue,\n        maxValue: maxValue,\n        oldMaxValue: maxValue,\n        inverted: businessRange.invert,\n        tickInterval: tickInterval,\n        synchronizedValue: synchronizedValue\n      };\n      convertAxisInfo(axisInfo, linearConverter);\n      result.push(axisInfo);\n    }\n\n    return result;\n  }, []);\n}\n\nfunction updateTickValues(axesInfo) {\n  var maxTicksCount = axesInfo.reduce((max, axisInfo) => _max(max, axisInfo.tickValues.length), 0);\n  axesInfo.forEach(axisInfo => {\n    var ticksMultiplier;\n    var ticksCount;\n    var additionalStartTicksCount = 0;\n    var synchronizedValue = axisInfo.synchronizedValue;\n    var tickValues = axisInfo.tickValues;\n    var tickInterval = axisInfo.tickInterval;\n\n    if (isDefined(synchronizedValue)) {\n      axisInfo.baseTickValue = axisInfo.invertedBaseTickValue = synchronizedValue;\n      axisInfo.tickValues = [axisInfo.baseTickValue];\n    } else {\n      if (tickValues.length > 1 && tickInterval) {\n        ticksMultiplier = _floor((maxTicksCount + 1) / tickValues.length);\n        ticksCount = ticksMultiplier > 1 ? _floor((maxTicksCount + 1) / ticksMultiplier) : maxTicksCount;\n        additionalStartTicksCount = _floor((ticksCount - tickValues.length) / 2);\n\n        while (additionalStartTicksCount > 0 && 0 !== tickValues[0]) {\n          tickValues.unshift(adjust(tickValues[0] - tickInterval));\n          additionalStartTicksCount--;\n        }\n\n        while (tickValues.length < ticksCount) {\n          tickValues.push(adjust(tickValues[tickValues.length - 1] + tickInterval));\n        }\n\n        axisInfo.tickInterval = tickInterval / ticksMultiplier;\n      }\n\n      axisInfo.baseTickValue = tickValues[0];\n      axisInfo.invertedBaseTickValue = tickValues[tickValues.length - 1];\n    }\n  });\n}\n\nfunction getAxisRange(axisInfo) {\n  return axisInfo.maxValue - axisInfo.minValue || 1;\n}\n\nfunction getMainAxisInfo(axesInfo) {\n  for (var i = 0; i < axesInfo.length; i++) {\n    if (!axesInfo[i].stubData) {\n      return axesInfo[i];\n    }\n  }\n\n  return null;\n}\n\nfunction correctMinMaxValues(axesInfo) {\n  var mainAxisInfo = getMainAxisInfo(axesInfo);\n  var mainAxisInfoTickInterval = mainAxisInfo.tickInterval;\n  axesInfo.forEach(axisInfo => {\n    var scale;\n    var move;\n    var mainAxisBaseValueOffset;\n    var valueFromAxisInfo;\n\n    if (axisInfo !== mainAxisInfo) {\n      if (mainAxisInfoTickInterval && axisInfo.tickInterval) {\n        if (axisInfo.stubData && isDefined(axisInfo.synchronizedValue)) {\n          axisInfo.oldMinValue = axisInfo.minValue = axisInfo.baseTickValue - (mainAxisInfo.baseTickValue - mainAxisInfo.minValue) / mainAxisInfoTickInterval * axisInfo.tickInterval;\n          axisInfo.oldMaxValue = axisInfo.maxValue = axisInfo.baseTickValue - (mainAxisInfo.baseTickValue - mainAxisInfo.maxValue) / mainAxisInfoTickInterval * axisInfo.tickInterval;\n        }\n\n        scale = mainAxisInfoTickInterval / getAxisRange(mainAxisInfo) / axisInfo.tickInterval * getAxisRange(axisInfo);\n        axisInfo.maxValue = axisInfo.minValue + getAxisRange(axisInfo) / scale;\n      }\n\n      if (mainAxisInfo.inverted && !axisInfo.inverted || !mainAxisInfo.inverted && axisInfo.inverted) {\n        mainAxisBaseValueOffset = mainAxisInfo.maxValue - mainAxisInfo.invertedBaseTickValue;\n      } else {\n        mainAxisBaseValueOffset = mainAxisInfo.baseTickValue - mainAxisInfo.minValue;\n      }\n\n      valueFromAxisInfo = getAxisRange(axisInfo);\n      move = (mainAxisBaseValueOffset / getAxisRange(mainAxisInfo) - (axisInfo.baseTickValue - axisInfo.minValue) / valueFromAxisInfo) * valueFromAxisInfo;\n      axisInfo.minValue -= move;\n      axisInfo.maxValue -= move;\n    }\n  });\n}\n\nfunction calculatePaddings(axesInfo) {\n  var minPadding;\n  var maxPadding;\n  var startPadding = 0;\n  var endPadding = 0;\n  axesInfo.forEach(axisInfo => {\n    var inverted = axisInfo.inverted;\n    minPadding = axisInfo.minValue > axisInfo.oldMinValue ? (axisInfo.minValue - axisInfo.oldMinValue) / getAxisRange(axisInfo) : 0;\n    maxPadding = axisInfo.maxValue < axisInfo.oldMaxValue ? (axisInfo.oldMaxValue - axisInfo.maxValue) / getAxisRange(axisInfo) : 0;\n    startPadding = _max(startPadding, inverted ? maxPadding : minPadding);\n    endPadding = _max(endPadding, inverted ? minPadding : maxPadding);\n  });\n  return {\n    start: startPadding,\n    end: endPadding\n  };\n}\n\nfunction correctMinMaxValuesByPaddings(axesInfo, paddings) {\n  axesInfo.forEach(info => {\n    var range = getAxisRange(info);\n    var inverted = info.inverted;\n    info.minValue = adjust(info.minValue - paddings[inverted ? \"end\" : \"start\"] * range);\n    info.maxValue = adjust(info.maxValue + paddings[inverted ? \"start\" : \"end\"] * range);\n  });\n}\n\nfunction updateTickValuesIfSynchronizedValueUsed(axesInfo) {\n  var hasSynchronizedValue = false;\n  axesInfo.forEach(info => {\n    hasSynchronizedValue = hasSynchronizedValue || isDefined(info.synchronizedValue);\n  });\n  axesInfo.forEach(info => {\n    var tickInterval = info.tickInterval;\n    var tickValues = info.tickValues;\n    var maxValue = info.maxValue;\n    var minValue = info.minValue;\n    var tick;\n\n    if (hasSynchronizedValue && tickInterval) {\n      while ((tick = adjust(tickValues[0] - tickInterval)) >= minValue) {\n        tickValues.unshift(tick);\n      }\n\n      tick = tickValues[tickValues.length - 1];\n\n      while ((tick = adjust(tick + tickInterval)) <= maxValue) {\n        tickValues.push(tick);\n      }\n    }\n\n    while (tickValues[0] + tickInterval / 10 < minValue) {\n      tickValues.shift();\n    }\n\n    while (tickValues[tickValues.length - 1] - tickInterval / 10 > maxValue) {\n      tickValues.pop();\n    }\n  });\n}\n\nfunction applyMinMaxValues(axesInfo) {\n  axesInfo.forEach(info => {\n    var axis = info.axis;\n    var range = axis.getTranslator().getBusinessRange();\n\n    if (range.min === range.minVisible) {\n      range.min = info.minValue;\n    }\n\n    if (range.max === range.maxVisible) {\n      range.max = info.maxValue;\n    }\n\n    range.minVisible = info.minValue;\n    range.maxVisible = info.maxValue;\n\n    if (range.min > range.minVisible) {\n      range.min = range.minVisible;\n    }\n\n    if (range.max < range.maxVisible) {\n      range.max = range.maxVisible;\n    }\n\n    axis.getTranslator().updateBusinessRange(range);\n    axis.setTicks({\n      majorTicks: info.tickValues,\n      minorTicks: info.minorValues\n    });\n  });\n}\n\nfunction correctAfterSynchronize(axesInfo) {\n  var invalidAxisInfo = [];\n  var correctValue;\n  axesInfo.forEach(info => {\n    if (info.oldMaxValue - info.oldMinValue === 0) {\n      invalidAxisInfo.push(info);\n    } else if (!isDefined(correctValue) && !isDefined(info.synchronizedValue)) {\n      correctValue = _abs((info.maxValue - info.minValue) / (info.tickValues[_floor(info.tickValues.length / 2)] - info.minValue || info.maxValue));\n    }\n  });\n\n  if (!isDefined(correctValue)) {\n    return;\n  }\n\n  invalidAxisInfo.forEach(info => {\n    var firstTick = info.tickValues[0];\n    var correctedTick = firstTick * correctValue;\n\n    if (firstTick > 0) {\n      info.maxValue = correctedTick;\n      info.minValue = 0;\n    } else if (firstTick < 0) {\n      info.minValue = correctedTick;\n      info.maxValue = 0;\n    }\n  });\n}\n\nfunction updateMinorTicks(axesInfo) {\n  axesInfo.forEach(function (axisInfo) {\n    if (!axisInfo.minorTickInterval) {\n      return;\n    }\n\n    var ticks = [];\n    var interval = axisInfo.minorTickInterval;\n    var tickCount = axisInfo.tickInterval / interval - 1;\n\n    for (var i = 1; i < axisInfo.tickValues.length; i++) {\n      var tick = axisInfo.tickValues[i - 1];\n\n      for (var j = 0; j < tickCount; j++) {\n        tick += interval;\n        ticks.push(tick);\n      }\n    }\n\n    axisInfo.minorValues = ticks;\n  });\n}\n\nfunction correctPaddings(axesInfo, paddings) {\n  return axesInfo.reduce((prev, info) => {\n    var inverted = info.inverted;\n    var {\n      start: start,\n      end: end\n    } = info.axis.getCorrectedValuesToZero(info.minValue, info.maxValue);\n\n    if (isDefined(start) || isDefined(end)) {\n      return inverted ? {\n        start: prev.start,\n        end: Math.min(prev.end, end)\n      } : {\n        start: Math.min(prev.start, start),\n        end: prev.end\n      };\n    }\n\n    return prev;\n  }, paddings);\n}\n\nvar multiAxesSynchronizer = {\n  synchronize: function (valueAxes) {\n    each(getValueAxesPerPanes(valueAxes), function (_, axes) {\n      var axesInfo;\n      var paddings;\n\n      if (axes.length > 1) {\n        axesInfo = populateAxesInfo(axes);\n\n        if (axesInfo.length < 2 || !getMainAxisInfo(axesInfo)) {\n          return;\n        }\n\n        updateTickValues(axesInfo);\n        correctMinMaxValues(axesInfo);\n        paddings = calculatePaddings(axesInfo);\n        paddings = correctPaddings(axesInfo, paddings);\n        correctMinMaxValuesByPaddings(axesInfo, paddings);\n        correctAfterSynchronize(axesInfo);\n        updateTickValuesIfSynchronizedValueUsed(axesInfo);\n        updateMinorTicks(axesInfo);\n        axesInfo.forEach(info => {\n          convertAxisInfo(info, logConverter);\n        });\n        applyMinMaxValues(axesInfo);\n      }\n    });\n  }\n};\nexport default multiAxesSynchronizer;","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/chart_components/multi_axes_synchronizer.js"],"names":["debug","isDefined","isNumeric","each","getLog","raiseTo","adjust","_math","Math","_floor","floor","_max","max","_abs","abs","getValueAxesPerPanes","valueAxes","result","forEach","axis","pane","push","linearConverter","transform","v","b","addInterval","i","getInterval","base","tickInterval","logConverter","pow","convertAxisInfo","axisInfo","converter","isLogarithmic","logarithmicBase","tickValues","tick","ticks","minValue","oldMinValue","maxValue","oldMaxValue","round","interval","length","populateAxesInfo","axes","reduce","ticksValues","getTicksValues","majorTicks","majorTicksValues","options","getOptions","businessRange","getTranslator","getBusinessRange","visibleArea","getVisibleArea","_tickInterval","synchronizedValue","action","getViewport","type","isEmpty","breaks","applyMargins","startValue","from","endValue","minorValues","minorTicksValues","minorTickInterval","_minorTickInterval","inverted","invert","updateTickValues","axesInfo","maxTicksCount","ticksMultiplier","ticksCount","additionalStartTicksCount","baseTickValue","invertedBaseTickValue","unshift","getAxisRange","getMainAxisInfo","stubData","correctMinMaxValues","mainAxisInfo","mainAxisInfoTickInterval","scale","move","mainAxisBaseValueOffset","valueFromAxisInfo","calculatePaddings","minPadding","maxPadding","startPadding","endPadding","start","end","correctMinMaxValuesByPaddings","paddings","info","range","updateTickValuesIfSynchronizedValueUsed","hasSynchronizedValue","shift","pop","applyMinMaxValues","min","minVisible","maxVisible","updateBusinessRange","setTicks","minorTicks","correctAfterSynchronize","invalidAxisInfo","correctValue","firstTick","correctedTick","updateMinorTicks","tickCount","j","correctPaddings","prev","getCorrectedValuesToZero","multiAxesSynchronizer","synchronize","_"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/chart_components/multi_axes_synchronizer.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    debug\r\n} from \"../../core/utils/console\";\r\nimport {\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    getLog,\r\n    raiseTo\r\n} from \"../core/utils\";\r\nimport {\r\n    adjust\r\n} from \"../../core/utils/math\";\r\nvar _math = Math;\r\nvar _floor = _math.floor;\r\nvar _max = _math.max;\r\nvar _abs = _math.abs;\r\n\r\nfunction getValueAxesPerPanes(valueAxes) {\r\n    var result = {};\r\n    valueAxes.forEach(axis => {\r\n        var pane = axis.pane;\r\n        if (!result[pane]) {\r\n            result[pane] = []\r\n        }\r\n        result[pane].push(axis)\r\n    });\r\n    return result\r\n}\r\nvar linearConverter = {\r\n    transform: function(v, b) {\r\n        return adjust(getLog(v, b))\r\n    },\r\n    addInterval: function(v, i) {\r\n        return adjust(v + i)\r\n    },\r\n    getInterval: function(base, tickInterval) {\r\n        return tickInterval\r\n    }\r\n};\r\nvar logConverter = {\r\n    transform: function(v, b) {\r\n        return adjust(raiseTo(v, b))\r\n    },\r\n    addInterval: function(v, i) {\r\n        return adjust(v * i)\r\n    },\r\n    getInterval: function(base, tickInterval) {\r\n        return _math.pow(base, tickInterval)\r\n    }\r\n};\r\n\r\nfunction convertAxisInfo(axisInfo, converter) {\r\n    if (!axisInfo.isLogarithmic) {\r\n        return\r\n    }\r\n    var base = axisInfo.logarithmicBase;\r\n    var tickValues = axisInfo.tickValues;\r\n    var tick;\r\n    var ticks = [];\r\n    axisInfo.minValue = converter.transform(axisInfo.minValue, base);\r\n    axisInfo.oldMinValue = converter.transform(axisInfo.oldMinValue, base);\r\n    axisInfo.maxValue = converter.transform(axisInfo.maxValue, base);\r\n    axisInfo.oldMaxValue = converter.transform(axisInfo.oldMaxValue, base);\r\n    axisInfo.tickInterval = _math.round(axisInfo.tickInterval);\r\n    if (axisInfo.tickInterval < 1) {\r\n        axisInfo.tickInterval = 1\r\n    }\r\n    var interval = converter.getInterval(base, axisInfo.tickInterval);\r\n    tick = converter.transform(tickValues[0], base);\r\n    while (ticks.length < tickValues.length) {\r\n        ticks.push(tick);\r\n        tick = converter.addInterval(tick, interval)\r\n    }\r\n    ticks.tickInterval = axisInfo.tickInterval;\r\n    axisInfo.tickValues = ticks\r\n}\r\n\r\nfunction populateAxesInfo(axes) {\r\n    return axes.reduce((function(result, axis) {\r\n        var ticksValues = axis.getTicksValues();\r\n        var majorTicks = ticksValues.majorTicksValues;\r\n        var options = axis.getOptions();\r\n        var businessRange = axis.getTranslator().getBusinessRange();\r\n        var visibleArea = axis.getVisibleArea();\r\n        var axisInfo;\r\n        var tickInterval = axis._tickInterval;\r\n        var synchronizedValue = options.synchronizedValue;\r\n        var action = axis.getViewport().action;\r\n        if (majorTicks && majorTicks.length > 0 && isNumeric(majorTicks[0]) && \"discrete\" !== options.type && !businessRange.isEmpty() && !(businessRange.breaks && businessRange.breaks.length) && \"zoom\" !== action && \"pan\" !== action) {\r\n            axis.applyMargins();\r\n            var startValue = axis.getTranslator().from(visibleArea[0]);\r\n            var endValue = axis.getTranslator().from(visibleArea[1]);\r\n            var minValue = startValue < endValue ? startValue : endValue;\r\n            var maxValue = startValue < endValue ? endValue : startValue;\r\n            if (minValue === maxValue && isDefined(synchronizedValue)) {\r\n                tickInterval = _abs(majorTicks[0] - synchronizedValue) || 1;\r\n                minValue = majorTicks[0] - tickInterval;\r\n                maxValue = majorTicks[0] + tickInterval\r\n            }\r\n            axisInfo = {\r\n                axis: axis,\r\n                isLogarithmic: \"logarithmic\" === options.type,\r\n                logarithmicBase: businessRange.base,\r\n                tickValues: majorTicks,\r\n                minorValues: ticksValues.minorTicksValues,\r\n                minorTickInterval: axis._minorTickInterval,\r\n                minValue: minValue,\r\n                oldMinValue: minValue,\r\n                maxValue: maxValue,\r\n                oldMaxValue: maxValue,\r\n                inverted: businessRange.invert,\r\n                tickInterval: tickInterval,\r\n                synchronizedValue: synchronizedValue\r\n            };\r\n            convertAxisInfo(axisInfo, linearConverter);\r\n            result.push(axisInfo)\r\n        }\r\n        return result\r\n    }), [])\r\n}\r\n\r\nfunction updateTickValues(axesInfo) {\r\n    var maxTicksCount = axesInfo.reduce((max, axisInfo) => _max(max, axisInfo.tickValues.length), 0);\r\n    axesInfo.forEach(axisInfo => {\r\n        var ticksMultiplier;\r\n        var ticksCount;\r\n        var additionalStartTicksCount = 0;\r\n        var synchronizedValue = axisInfo.synchronizedValue;\r\n        var tickValues = axisInfo.tickValues;\r\n        var tickInterval = axisInfo.tickInterval;\r\n        if (isDefined(synchronizedValue)) {\r\n            axisInfo.baseTickValue = axisInfo.invertedBaseTickValue = synchronizedValue;\r\n            axisInfo.tickValues = [axisInfo.baseTickValue]\r\n        } else {\r\n            if (tickValues.length > 1 && tickInterval) {\r\n                ticksMultiplier = _floor((maxTicksCount + 1) / tickValues.length);\r\n                ticksCount = ticksMultiplier > 1 ? _floor((maxTicksCount + 1) / ticksMultiplier) : maxTicksCount;\r\n                additionalStartTicksCount = _floor((ticksCount - tickValues.length) / 2);\r\n                while (additionalStartTicksCount > 0 && 0 !== tickValues[0]) {\r\n                    tickValues.unshift(adjust(tickValues[0] - tickInterval));\r\n                    additionalStartTicksCount--\r\n                }\r\n                while (tickValues.length < ticksCount) {\r\n                    tickValues.push(adjust(tickValues[tickValues.length - 1] + tickInterval))\r\n                }\r\n                axisInfo.tickInterval = tickInterval / ticksMultiplier\r\n            }\r\n            axisInfo.baseTickValue = tickValues[0];\r\n            axisInfo.invertedBaseTickValue = tickValues[tickValues.length - 1]\r\n        }\r\n    })\r\n}\r\n\r\nfunction getAxisRange(axisInfo) {\r\n    return axisInfo.maxValue - axisInfo.minValue || 1\r\n}\r\n\r\nfunction getMainAxisInfo(axesInfo) {\r\n    for (var i = 0; i < axesInfo.length; i++) {\r\n        if (!axesInfo[i].stubData) {\r\n            return axesInfo[i]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction correctMinMaxValues(axesInfo) {\r\n    var mainAxisInfo = getMainAxisInfo(axesInfo);\r\n    var mainAxisInfoTickInterval = mainAxisInfo.tickInterval;\r\n    axesInfo.forEach(axisInfo => {\r\n        var scale;\r\n        var move;\r\n        var mainAxisBaseValueOffset;\r\n        var valueFromAxisInfo;\r\n        if (axisInfo !== mainAxisInfo) {\r\n            if (mainAxisInfoTickInterval && axisInfo.tickInterval) {\r\n                if (axisInfo.stubData && isDefined(axisInfo.synchronizedValue)) {\r\n                    axisInfo.oldMinValue = axisInfo.minValue = axisInfo.baseTickValue - (mainAxisInfo.baseTickValue - mainAxisInfo.minValue) / mainAxisInfoTickInterval * axisInfo.tickInterval;\r\n                    axisInfo.oldMaxValue = axisInfo.maxValue = axisInfo.baseTickValue - (mainAxisInfo.baseTickValue - mainAxisInfo.maxValue) / mainAxisInfoTickInterval * axisInfo.tickInterval\r\n                }\r\n                scale = mainAxisInfoTickInterval / getAxisRange(mainAxisInfo) / axisInfo.tickInterval * getAxisRange(axisInfo);\r\n                axisInfo.maxValue = axisInfo.minValue + getAxisRange(axisInfo) / scale\r\n            }\r\n            if (mainAxisInfo.inverted && !axisInfo.inverted || !mainAxisInfo.inverted && axisInfo.inverted) {\r\n                mainAxisBaseValueOffset = mainAxisInfo.maxValue - mainAxisInfo.invertedBaseTickValue\r\n            } else {\r\n                mainAxisBaseValueOffset = mainAxisInfo.baseTickValue - mainAxisInfo.minValue\r\n            }\r\n            valueFromAxisInfo = getAxisRange(axisInfo);\r\n            move = (mainAxisBaseValueOffset / getAxisRange(mainAxisInfo) - (axisInfo.baseTickValue - axisInfo.minValue) / valueFromAxisInfo) * valueFromAxisInfo;\r\n            axisInfo.minValue -= move;\r\n            axisInfo.maxValue -= move\r\n        }\r\n    })\r\n}\r\n\r\nfunction calculatePaddings(axesInfo) {\r\n    var minPadding;\r\n    var maxPadding;\r\n    var startPadding = 0;\r\n    var endPadding = 0;\r\n    axesInfo.forEach(axisInfo => {\r\n        var inverted = axisInfo.inverted;\r\n        minPadding = axisInfo.minValue > axisInfo.oldMinValue ? (axisInfo.minValue - axisInfo.oldMinValue) / getAxisRange(axisInfo) : 0;\r\n        maxPadding = axisInfo.maxValue < axisInfo.oldMaxValue ? (axisInfo.oldMaxValue - axisInfo.maxValue) / getAxisRange(axisInfo) : 0;\r\n        startPadding = _max(startPadding, inverted ? maxPadding : minPadding);\r\n        endPadding = _max(endPadding, inverted ? minPadding : maxPadding)\r\n    });\r\n    return {\r\n        start: startPadding,\r\n        end: endPadding\r\n    }\r\n}\r\n\r\nfunction correctMinMaxValuesByPaddings(axesInfo, paddings) {\r\n    axesInfo.forEach(info => {\r\n        var range = getAxisRange(info);\r\n        var inverted = info.inverted;\r\n        info.minValue = adjust(info.minValue - paddings[inverted ? \"end\" : \"start\"] * range);\r\n        info.maxValue = adjust(info.maxValue + paddings[inverted ? \"start\" : \"end\"] * range)\r\n    })\r\n}\r\n\r\nfunction updateTickValuesIfSynchronizedValueUsed(axesInfo) {\r\n    var hasSynchronizedValue = false;\r\n    axesInfo.forEach(info => {\r\n        hasSynchronizedValue = hasSynchronizedValue || isDefined(info.synchronizedValue)\r\n    });\r\n    axesInfo.forEach(info => {\r\n        var tickInterval = info.tickInterval;\r\n        var tickValues = info.tickValues;\r\n        var maxValue = info.maxValue;\r\n        var minValue = info.minValue;\r\n        var tick;\r\n        if (hasSynchronizedValue && tickInterval) {\r\n            while ((tick = adjust(tickValues[0] - tickInterval)) >= minValue) {\r\n                tickValues.unshift(tick)\r\n            }\r\n            tick = tickValues[tickValues.length - 1];\r\n            while ((tick = adjust(tick + tickInterval)) <= maxValue) {\r\n                tickValues.push(tick)\r\n            }\r\n        }\r\n        while (tickValues[0] + tickInterval / 10 < minValue) {\r\n            tickValues.shift()\r\n        }\r\n        while (tickValues[tickValues.length - 1] - tickInterval / 10 > maxValue) {\r\n            tickValues.pop()\r\n        }\r\n    })\r\n}\r\n\r\nfunction applyMinMaxValues(axesInfo) {\r\n    axesInfo.forEach(info => {\r\n        var axis = info.axis;\r\n        var range = axis.getTranslator().getBusinessRange();\r\n        if (range.min === range.minVisible) {\r\n            range.min = info.minValue\r\n        }\r\n        if (range.max === range.maxVisible) {\r\n            range.max = info.maxValue\r\n        }\r\n        range.minVisible = info.minValue;\r\n        range.maxVisible = info.maxValue;\r\n        if (range.min > range.minVisible) {\r\n            range.min = range.minVisible\r\n        }\r\n        if (range.max < range.maxVisible) {\r\n            range.max = range.maxVisible\r\n        }\r\n        axis.getTranslator().updateBusinessRange(range);\r\n        axis.setTicks({\r\n            majorTicks: info.tickValues,\r\n            minorTicks: info.minorValues\r\n        })\r\n    })\r\n}\r\n\r\nfunction correctAfterSynchronize(axesInfo) {\r\n    var invalidAxisInfo = [];\r\n    var correctValue;\r\n    axesInfo.forEach(info => {\r\n        if (info.oldMaxValue - info.oldMinValue === 0) {\r\n            invalidAxisInfo.push(info)\r\n        } else if (!isDefined(correctValue) && !isDefined(info.synchronizedValue)) {\r\n            correctValue = _abs((info.maxValue - info.minValue) / (info.tickValues[_floor(info.tickValues.length / 2)] - info.minValue || info.maxValue))\r\n        }\r\n    });\r\n    if (!isDefined(correctValue)) {\r\n        return\r\n    }\r\n    invalidAxisInfo.forEach(info => {\r\n        var firstTick = info.tickValues[0];\r\n        var correctedTick = firstTick * correctValue;\r\n        if (firstTick > 0) {\r\n            info.maxValue = correctedTick;\r\n            info.minValue = 0\r\n        } else if (firstTick < 0) {\r\n            info.minValue = correctedTick;\r\n            info.maxValue = 0\r\n        }\r\n    })\r\n}\r\n\r\nfunction updateMinorTicks(axesInfo) {\r\n    axesInfo.forEach((function(axisInfo) {\r\n        if (!axisInfo.minorTickInterval) {\r\n            return\r\n        }\r\n        var ticks = [];\r\n        var interval = axisInfo.minorTickInterval;\r\n        var tickCount = axisInfo.tickInterval / interval - 1;\r\n        for (var i = 1; i < axisInfo.tickValues.length; i++) {\r\n            var tick = axisInfo.tickValues[i - 1];\r\n            for (var j = 0; j < tickCount; j++) {\r\n                tick += interval;\r\n                ticks.push(tick)\r\n            }\r\n        }\r\n        axisInfo.minorValues = ticks\r\n    }))\r\n}\r\n\r\nfunction correctPaddings(axesInfo, paddings) {\r\n    return axesInfo.reduce((prev, info) => {\r\n        var inverted = info.inverted;\r\n        var {\r\n            start: start,\r\n            end: end\r\n        } = info.axis.getCorrectedValuesToZero(info.minValue, info.maxValue);\r\n        if (isDefined(start) || isDefined(end)) {\r\n            return inverted ? {\r\n                start: prev.start,\r\n                end: Math.min(prev.end, end)\r\n            } : {\r\n                start: Math.min(prev.start, start),\r\n                end: prev.end\r\n            }\r\n        }\r\n        return prev\r\n    }, paddings)\r\n}\r\nvar multiAxesSynchronizer = {\r\n    synchronize: function(valueAxes) {\r\n        each(getValueAxesPerPanes(valueAxes), (function(_, axes) {\r\n            var axesInfo;\r\n            var paddings;\r\n            if (axes.length > 1) {\r\n                axesInfo = populateAxesInfo(axes);\r\n                if (axesInfo.length < 2 || !getMainAxisInfo(axesInfo)) {\r\n                    return\r\n                }\r\n                updateTickValues(axesInfo);\r\n                correctMinMaxValues(axesInfo);\r\n                paddings = calculatePaddings(axesInfo);\r\n                paddings = correctPaddings(axesInfo, paddings);\r\n                correctMinMaxValuesByPaddings(axesInfo, paddings);\r\n                correctAfterSynchronize(axesInfo);\r\n                updateTickValuesIfSynchronizedValueUsed(axesInfo);\r\n                updateMinorTicks(axesInfo);\r\n                axesInfo.forEach(info => {\r\n                    convertAxisInfo(info, logConverter)\r\n                });\r\n                applyMinMaxValues(axesInfo)\r\n            }\r\n        }))\r\n    }\r\n};\r\nexport default multiAxesSynchronizer;\r\n"]},"metadata":{},"sourceType":"module"}