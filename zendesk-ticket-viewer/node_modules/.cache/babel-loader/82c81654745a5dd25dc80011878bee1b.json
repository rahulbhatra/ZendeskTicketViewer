{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_fixing.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as wheelEventName } from \"../../events/core/wheel\";\nimport messageLocalization from \"../../localization/message\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { move } from \"../../animation/translator\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nvar CONTENT_CLASS = \"content\";\nvar CONTENT_FIXED_CLASS = \"content-fixed\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar FIRST_CELL_CLASS = \"dx-first-cell\";\nvar LAST_CELL_CLASS = \"dx-last-cell\";\nvar HOVER_STATE_CLASS = \"dx-state-hover\";\nvar FIXED_COL_CLASS = \"dx-col-fixed\";\nvar FIXED_COLUMNS_CLASS = \"dx-fixed-columns\";\nvar POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\";\nvar COMMAND_TRANSPARENT = \"transparent\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\n\nvar getTransparentColumnIndex = function (fixedColumns) {\n  var transparentColumnIndex = -1;\n  each(fixedColumns, function (index, column) {\n    if (column.command === COMMAND_TRANSPARENT) {\n      transparentColumnIndex = index;\n      return false;\n    }\n  });\n  return transparentColumnIndex;\n};\n\nvar normalizeColumnWidths = function (fixedColumns, widths, fixedWidths) {\n  var fixedColumnIndex = 0;\n\n  if (fixedColumns && widths && fixedWidths) {\n    for (var i = 0; i < fixedColumns.length; i++) {\n      if (fixedColumns[i].command === COMMAND_TRANSPARENT) {\n        fixedColumnIndex += fixedColumns[i].colspan;\n      } else {\n        if (widths[fixedColumnIndex] < fixedWidths[i]) {\n          widths[fixedColumnIndex] = fixedWidths[i];\n        }\n\n        fixedColumnIndex++;\n      }\n    }\n  }\n\n  return widths;\n};\n\nvar baseFixedColumns = {\n  init: function () {\n    this.callBase();\n    this._isFixedTableRendering = false;\n    this._isFixedColumns = false;\n  },\n  _createCol: function (column) {\n    return this.callBase(column).toggleClass(FIXED_COL_CLASS, !!(this._isFixedTableRendering && (column.fixed || column.command && column.command !== COMMAND_TRANSPARENT)));\n  },\n  _correctColumnIndicesForFixedColumns: function (fixedColumns, change) {\n    var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n    var transparentColspan = fixedColumns[transparentColumnIndex].colspan;\n    var columnIndices = change && change.columnIndices;\n\n    if (columnIndices) {\n      change.columnIndices = columnIndices.map(function (columnIndices) {\n        if (columnIndices) {\n          return columnIndices.map(function (columnIndex) {\n            if (columnIndex < transparentColumnIndex) {\n              return columnIndex;\n            } else if (columnIndex >= transparentColumnIndex + transparentColspan) {\n              return columnIndex - transparentColspan + 1;\n            }\n\n            return -1;\n          }).filter(function (columnIndex) {\n            return columnIndex >= 0;\n          });\n        }\n      });\n    }\n  },\n\n  _partialUpdateFixedTable(fixedColumns) {\n    var fixedTableElement = this._fixedTableElement;\n    var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n    var transparentColumn = fixedColumns[transparentColumnIndex];\n\n    var columnIndexOffset = this._columnsController.getColumnIndexOffset();\n\n    var $rows = this._getRowElementsCore(fixedTableElement);\n\n    var $colgroup = fixedTableElement.children(\"colgroup\");\n    $colgroup.replaceWith(this._createColGroup(fixedColumns));\n\n    for (var i = 0; i < $rows.length; i++) {\n      var cellElements = $rows[i].childNodes;\n      var colIndex = columnIndexOffset + 1;\n\n      for (var j = 0; j < cellElements.length; j++) {\n        cellElements[j].setAttribute(\"aria-colindex\", colIndex);\n\n        if (j === transparentColumnIndex) {\n          cellElements[j].setAttribute(\"colspan\", transparentColumn.colspan);\n          colIndex += transparentColumn.colspan;\n        } else {\n          colIndex++;\n        }\n      }\n    }\n  },\n\n  _renderTable: function (options) {\n    var $fixedTable;\n    var fixedColumns = this.getFixedColumns();\n    this._isFixedColumns = !!fixedColumns.length;\n    var $table = this.callBase(options);\n\n    if (this._isFixedColumns) {\n      var change = null === options || void 0 === options ? void 0 : options.change;\n      this._isFixedTableRendering = true;\n\n      if (null !== change && void 0 !== change && change.virtualColumnsScrolling && true !== this.option(\"scrolling.legacyMode\")) {\n        this._partialUpdateFixedTable(fixedColumns);\n      } else {\n        var columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;\n\n        this._correctColumnIndicesForFixedColumns(fixedColumns, change);\n\n        $fixedTable = this._createTable(fixedColumns);\n\n        this._renderRows($fixedTable, extend({}, options, {\n          columns: fixedColumns\n        }));\n\n        this._updateContent($fixedTable, change);\n\n        if (columnIndices) {\n          change.columnIndices = columnIndices;\n        }\n      }\n\n      this._isFixedTableRendering = false;\n    } else {\n      this._fixedTableElement && this._fixedTableElement.parent().remove();\n      this._fixedTableElement = null;\n    }\n\n    return $table;\n  },\n  _renderRow: function ($table, options) {\n    var fixedCorrection;\n    var cells = options.row.cells;\n    this.callBase.apply(this, arguments);\n\n    if (this._isFixedTableRendering && cells && cells.length) {\n      fixedCorrection = 0;\n      var fixedCells = options.row.cells || [];\n      cells = cells.slice();\n      options.row.cells = cells;\n\n      for (var i = 0; i < fixedCells.length; i++) {\n        if (fixedCells[i].column && fixedCells[i].column.command === COMMAND_TRANSPARENT) {\n          fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;\n          continue;\n        }\n\n        cells[i + fixedCorrection] = fixedCells[i];\n      }\n    }\n  },\n  _createCell: function (options) {\n    var that = this;\n    var column = options.column;\n    var columnCommand = column && column.command;\n    var rowType = options.rowType;\n    var $cell = that.callBase.apply(that, arguments);\n    var fixedColumns;\n    var prevFixedColumn;\n    var transparentColumnIndex;\n\n    if (that._isFixedTableRendering || \"filter\" === rowType) {\n      fixedColumns = that.getFixedColumns();\n      transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n      prevFixedColumn = fixedColumns[transparentColumnIndex - 1];\n    }\n\n    if (that._isFixedTableRendering) {\n      if (columnCommand === COMMAND_TRANSPARENT) {\n        $cell.addClass(POINTER_EVENTS_NONE_CLASS).toggleClass(FIRST_CELL_CLASS, 0 === transparentColumnIndex || prevFixedColumn && \"expand\" === prevFixedColumn.command).toggleClass(LAST_CELL_CLASS, fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);\n\n        if (\"freeSpace\" !== rowType) {\n          gridCoreUtils.setEmptyText($cell);\n        }\n      }\n    } else if (\"filter\" === rowType) {\n      $cell.toggleClass(FIRST_CELL_CLASS, options.columnIndex === transparentColumnIndex);\n    }\n\n    var isRowAltStyle = that.option(\"rowAlternationEnabled\") && options.isAltRow;\n\n    if (browser.mozilla && options.column.fixed && \"group\" !== options.rowType && !isRowAltStyle) {\n      $cell.addClass(FIXED_COL_CLASS);\n    }\n\n    return $cell;\n  },\n  _wrapTableInScrollContainer: function () {\n    var $scrollContainer = this.callBase.apply(this, arguments);\n\n    if (this._isFixedTableRendering) {\n      $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_FIXED_CLASS));\n    }\n\n    return $scrollContainer;\n  },\n  _renderCellContent: function ($cell, options) {\n    var isEmptyCell;\n    var column = options.column;\n    var isFixedTableRendering = this._isFixedTableRendering;\n    var isGroupCell = \"group\" === options.rowType && isDefined(column.groupIndex);\n\n    if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {\n      $cell.css(\"pointerEvents\", \"none\");\n    }\n\n    if (!isFixedTableRendering && this._isFixedColumns) {\n      isEmptyCell = column.fixed || column.command && false !== column.fixed;\n\n      if (isGroupCell) {\n        isEmptyCell = false;\n\n        if (options.row.summaryCells && options.row.summaryCells.length) {\n          var columns = this._columnsController.getVisibleColumns();\n\n          var alignByFixedColumnCellCount = this._getAlignByColumnCellCount ? this._getAlignByColumnCellCount(column.colspan, {\n            columns: columns,\n            row: options.row,\n            isFixed: true\n          }) : 0;\n\n          if (alignByFixedColumnCellCount > 0) {\n            var transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());\n            isEmptyCell = columns.length - alignByFixedColumnCellCount < transparentColumnIndex;\n          }\n        }\n      }\n\n      if (isEmptyCell) {\n        if (column.command && \"buttons\" !== column.type || \"group\" === options.rowType) {\n          $cell.html(\"&nbsp;\").addClass(column.cssClass);\n          return;\n        } else {\n          $cell.addClass(\"dx-hidden-cell\");\n        }\n      }\n    }\n\n    if (column.command !== COMMAND_TRANSPARENT) {\n      this.callBase($cell, options);\n    }\n  },\n  _getCellElementsCore: function (rowIndex) {\n    var cellElements = this.callBase.apply(this, arguments);\n    var isGroupRow = cellElements.parent().hasClass(GROUP_ROW_CLASS);\n    var headerRowIndex = \"columnHeadersView\" === this.name ? rowIndex : void 0;\n\n    if (this._fixedTableElement && cellElements) {\n      var fixedColumns = this.getFixedColumns(headerRowIndex);\n\n      var fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children(\"td\");\n\n      each(fixedCellElements, (columnIndex, cell) => {\n        if (isGroupRow) {\n          if (cellElements[columnIndex] && \"hidden\" !== cell.style.visibility) {\n            cellElements[columnIndex] = cell;\n          }\n        } else {\n          var fixedColumn = fixedColumns[columnIndex];\n\n          if (fixedColumn) {\n            if (fixedColumn.command === COMMAND_TRANSPARENT) {\n              if (fixedCellElements.eq(columnIndex).hasClass(MASTER_DETAIL_CELL_CLASS)) {\n                cellElements[columnIndex] = cell || cellElements[columnIndex];\n              }\n            } else {\n              var fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);\n\n              cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex];\n            }\n          }\n        }\n      });\n    }\n\n    return cellElements;\n  },\n  getColumnWidths: function () {\n    var fixedWidths;\n    var result = this.callBase();\n    var fixedColumns = this.getFixedColumns();\n\n    if (this._fixedTableElement && result.length) {\n      fixedWidths = this.callBase(this._fixedTableElement);\n    }\n\n    return normalizeColumnWidths(fixedColumns, result, fixedWidths);\n  },\n  getTableElement: function () {\n    var tableElement = this._isFixedTableRendering ? this._fixedTableElement : this.callBase();\n    return tableElement;\n  },\n  setTableElement: function (tableElement) {\n    if (this._isFixedTableRendering) {\n      this._fixedTableElement = tableElement.addClass(POINTER_EVENTS_NONE_CLASS);\n    } else {\n      this.callBase(tableElement);\n    }\n  },\n  getColumns: function (rowIndex, $tableElement) {\n    $tableElement = $tableElement || this.getTableElement();\n\n    if (this._isFixedTableRendering || $tableElement && $tableElement.closest(\"table\").parent(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).length) {\n      return this.getFixedColumns(rowIndex);\n    }\n\n    return this.callBase(rowIndex, $tableElement);\n  },\n  getRowIndex: function ($row) {\n    var $fixedTable = this._fixedTableElement;\n\n    if ($fixedTable && $fixedTable.find($row).length) {\n      return this._getRowElements($fixedTable).index($row);\n    }\n\n    return this.callBase($row);\n  },\n  getTableElements: function () {\n    var result = this.callBase.apply(this, arguments);\n\n    if (this._fixedTableElement) {\n      result = $([result.get(0), this._fixedTableElement.get(0)]);\n    }\n\n    return result;\n  },\n  getFixedColumns: function (rowIndex) {\n    return this._columnsController.getFixedColumns(rowIndex);\n  },\n  getFixedColumnsOffset: function () {\n    var offset = {\n      left: 0,\n      right: 0\n    };\n    var $transparentColumn;\n\n    if (this._fixedTableElement) {\n      $transparentColumn = this.getTransparentColumnElement();\n      var positionTransparentColumn = $transparentColumn.position();\n      offset = {\n        left: positionTransparentColumn.left,\n        right: getOuterWidth(this.element(), true) - (getOuterWidth($transparentColumn, true) + positionTransparentColumn.left)\n      };\n    }\n\n    return offset;\n  },\n  getTransparentColumnElement: function () {\n    return this._fixedTableElement && this._fixedTableElement.find(\".\" + POINTER_EVENTS_NONE_CLASS).first();\n  },\n  getFixedTableElement: function () {\n    return this._fixedTableElement;\n  },\n  isFixedColumns: function () {\n    return this._isFixedColumns;\n  },\n  _resizeCore: function () {\n    this.callBase();\n    this.synchronizeRows();\n  },\n  setColumnWidths: function (options) {\n    var columns;\n\n    var visibleColumns = this._columnsController.getVisibleColumns();\n\n    var widths = options.widths;\n    var isWidthsSynchronized = widths && widths.length && isDefined(visibleColumns[0].visibleWidth);\n    var optionNames = options.optionNames;\n    var isColumnWidthChanged = optionNames && optionNames.width;\n    var useVisibleColumns = false;\n    this.callBase.apply(this, arguments);\n\n    if (this._fixedTableElement) {\n      var hasAutoWidth = widths && widths.some(function (width) {\n        return \"auto\" === width;\n      });\n      useVisibleColumns = hasAutoWidth && (!isWidthsSynchronized || !this.isScrollbarVisible(true));\n\n      if (useVisibleColumns) {\n        columns = visibleColumns;\n      }\n\n      this.callBase(extend({}, options, {\n        $tableElement: this._fixedTableElement,\n        columns: columns,\n        fixed: true\n      }));\n    }\n\n    if (isWidthsSynchronized || isColumnWidthChanged && this.option(\"wordWrapEnabled\")) {\n      this.synchronizeRows();\n    }\n  },\n  _createColGroup: function (columns) {\n    if (this._isFixedTableRendering && !this.option(\"columnAutoWidth\")) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var useVisibleColumns = visibleColumns.filter(function (column) {\n        return !column.width;\n      }).length;\n\n      if (useVisibleColumns) {\n        columns = visibleColumns;\n      }\n    }\n\n    return this.callBase(columns);\n  },\n  _getClientHeight: function (element) {\n    var boundingClientRectElement = element.getBoundingClientRect && getBoundingRect(element);\n    return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight;\n  },\n  synchronizeRows: function () {\n    var rowHeights = [];\n    var fixedRowHeights = [];\n    var rowIndex;\n    var $rowElements;\n    var $fixedRowElements;\n    var $contentElement;\n\n    if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {\n      var heightTable = this._getClientHeight(this._tableElement.get(0));\n\n      var heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));\n\n      $rowElements = this._getRowElements(this._tableElement);\n      $fixedRowElements = this._getRowElements(this._fixedTableElement);\n      $contentElement = this._findContentElement();\n\n      if (heightTable !== heightFixedTable) {\n        $contentElement && $contentElement.css(\"height\", heightTable);\n        $rowElements.css(\"height\", \"\");\n        $fixedRowElements.css(\"height\", \"\");\n\n        for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\n          rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));\n          fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)));\n        }\n\n        for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\n          var rowHeight = rowHeights[rowIndex];\n          var fixedRowHeight = fixedRowHeights[rowIndex];\n\n          if (rowHeight > fixedRowHeight) {\n            $fixedRowElements.eq(rowIndex).css(\"height\", rowHeight);\n          } else if (rowHeight < fixedRowHeight) {\n            $rowElements.eq(rowIndex).css(\"height\", fixedRowHeight);\n          }\n        }\n\n        $contentElement && $contentElement.css(\"height\", \"\");\n      }\n    }\n  },\n  setScrollerSpacing: function (width) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    this.callBase(width);\n    this.element().children(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).css({\n      paddingLeft: rtlEnabled ? width : \"\",\n      paddingRight: !rtlEnabled ? width : \"\"\n    });\n  }\n};\nvar ColumnHeadersViewFixedColumnsExtender = extend({}, baseFixedColumns, {\n  _getRowVisibleColumns: function (rowIndex) {\n    if (this._isFixedTableRendering) {\n      return this.getFixedColumns(rowIndex);\n    }\n\n    return this.callBase(rowIndex);\n  },\n  getContextMenuItems: function (options) {\n    var column = options.column;\n    var columnFixingOptions = this.option(\"columnFixing\");\n    var items = this.callBase(options);\n\n    if (options.row && \"header\" === options.row.rowType) {\n      if (true === columnFixingOptions.enabled && column && column.allowFixing) {\n        var onItemClick = params => {\n          switch (params.itemData.value) {\n            case \"none\":\n              this._columnsController.columnOption(column.index, \"fixed\", false);\n\n              break;\n\n            case \"left\":\n              this._columnsController.columnOption(column.index, {\n                fixed: true,\n                fixedPosition: \"left\"\n              });\n\n              break;\n\n            case \"right\":\n              this._columnsController.columnOption(column.index, {\n                fixed: true,\n                fixedPosition: \"right\"\n              });\n\n          }\n        };\n\n        items = items || [];\n        items.push({\n          text: columnFixingOptions.texts.fix,\n          beginGroup: true,\n          items: [{\n            text: columnFixingOptions.texts.leftPosition,\n            value: \"left\",\n            disabled: column.fixed && (!column.fixedPosition || \"left\" === column.fixedPosition),\n            onItemClick: onItemClick\n          }, {\n            text: columnFixingOptions.texts.rightPosition,\n            value: \"right\",\n            disabled: column.fixed && \"right\" === column.fixedPosition,\n            onItemClick: onItemClick\n          }]\n        }, {\n          text: columnFixingOptions.texts.unfix,\n          value: \"none\",\n          disabled: !column.fixed,\n          onItemClick: onItemClick\n        });\n      }\n    }\n\n    return items;\n  },\n  getFixedColumnElements: function (rowIndex) {\n    if (isDefined(rowIndex)) {\n      return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children();\n    }\n\n    var columnElements = this.getColumnElements();\n    var $transparentColumnElement = this.getTransparentColumnElement();\n\n    if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {\n      var transparentColumnIndex = getTransparentColumnIndex(this.getFixedColumns());\n      columnElements.splice(transparentColumnIndex, $transparentColumnElement.get(0).colSpan, $transparentColumnElement.get(0));\n    }\n\n    return columnElements;\n  },\n  getColumnWidths: function () {\n    var fixedWidths;\n    var result = this.callBase();\n    var $fixedColumnElements = this.getFixedColumnElements();\n    var fixedColumns = this.getFixedColumns();\n\n    if (this._fixedTableElement) {\n      if ($fixedColumnElements && $fixedColumnElements.length) {\n        fixedWidths = this._getWidths($fixedColumnElements);\n      } else {\n        fixedWidths = this.callBase(this._fixedTableElement);\n      }\n    }\n\n    return normalizeColumnWidths(fixedColumns, result, fixedWidths);\n  }\n});\nvar RowsViewFixedColumnsExtender = extend({}, baseFixedColumns, {\n  _detachHoverEvents: function () {\n    this._fixedTableElement && eventsEngine.off(this._fixedTableElement, \"mouseover mouseout\", \".dx-data-row\");\n    this._tableElement && eventsEngine.off(this._tableElement, \"mouseover mouseout\", \".dx-data-row\");\n  },\n  _attachHoverEvents: function () {\n    var that = this;\n\n    var attachHoverEvent = function ($table) {\n      eventsEngine.on($table, \"mouseover mouseout\", \".dx-data-row\", that.createAction(function (args) {\n        var event = args.event;\n        var rowIndex = that.getRowIndex($(event.target).closest(\".dx-row\"));\n        var isHover = \"mouseover\" === event.type;\n\n        if (rowIndex >= 0) {\n          that._tableElement && that._getRowElements(that._tableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);\n          that._fixedTableElement && that._getRowElements(that._fixedTableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);\n        }\n      }));\n    };\n\n    if (that._fixedTableElement && that._tableElement) {\n      attachHoverEvent(that._fixedTableElement);\n      attachHoverEvent(that._tableElement);\n    }\n  },\n  _findContentElement: function () {\n    var that = this;\n    var $content;\n    var scrollTop;\n    var contentClass = that.addWidgetPrefix(CONTENT_CLASS);\n    var element = that.element();\n    var scrollDelay = browser.mozilla ? 60 : 0;\n\n    if (element && that._isFixedTableRendering) {\n      $content = element.children(\".\" + contentClass);\n      var scrollable = that.getScrollable();\n\n      if (!$content.length && scrollable) {\n        $content = $(\"<div>\").addClass(contentClass);\n        eventsEngine.on($content, \"scroll\", function (e) {\n          clearTimeout(that._fixedScrollTimeout);\n          that._fixedScrollTimeout = setTimeout(function () {\n            scrollTop = $(e.target).scrollTop();\n            scrollable.scrollTo({\n              y: scrollTop\n            });\n          }, scrollDelay);\n        });\n        eventsEngine.on($content, wheelEventName, function (e) {\n          var $nearestScrollable = $(e.target).closest(\".dx-scrollable\");\n          var shouldScroll = false;\n\n          if (scrollable && scrollable.$element().is($nearestScrollable)) {\n            shouldScroll = true;\n          } else {\n            var nearestScrollableInstance = $nearestScrollable.length && Scrollable.getInstance($nearestScrollable.get(0));\n            var nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;\n            shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar;\n          }\n\n          if (shouldScroll) {\n            scrollTop = scrollable.scrollTop();\n            scrollable.scrollTo({\n              y: scrollTop - e.delta\n            });\n\n            if (scrollable.scrollTop() > 0 && scrollable.scrollTop() + scrollable.clientHeight() < scrollable.scrollHeight() + that.getScrollbarWidth()) {\n              return false;\n            }\n          }\n        });\n        $content.appendTo(element);\n      }\n\n      return $content;\n    }\n\n    return that.callBase();\n  },\n  _updateScrollable: function () {\n    this.callBase();\n    var scrollable = this.getScrollable();\n\n    if (null !== scrollable && void 0 !== scrollable && scrollable._disposed) {\n      return;\n    }\n\n    var scrollTop = scrollable && scrollable.scrollOffset().top;\n\n    this._updateFixedTablePosition(scrollTop);\n  },\n  _renderContent: function (contentElement, tableElement) {\n    if (this._isFixedTableRendering) {\n      return contentElement.empty().addClass(this.addWidgetPrefix(CONTENT_CLASS) + \" \" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).append(tableElement);\n    }\n\n    return this.callBase(contentElement, tableElement);\n  },\n  _getGroupCellOptions: function (options) {\n    if (this._isFixedTableRendering) {\n      return this.callBase(extend({}, options, {\n        columns: this._columnsController.getVisibleColumns()\n      }));\n    }\n\n    return this.callBase(options);\n  },\n  _renderGroupedCells: function ($row, options) {\n    return this.callBase($row, extend({}, options, {\n      columns: this._columnsController.getVisibleColumns()\n    }));\n  },\n  _renderGroupSummaryCells: function ($row, options) {\n    if (this._isFixedTableRendering) {\n      this.callBase($row, extend({}, options, {\n        columns: this._columnsController.getVisibleColumns()\n      }));\n    } else {\n      this.callBase($row, options);\n    }\n  },\n  _hasAlignByColumnSummaryItems: function (columnIndex, options) {\n    var result = this.callBase.apply(this, arguments);\n    var column = options.columns[columnIndex];\n\n    if (options.isFixed) {\n      return column.fixed && (result || \"right\" === column.fixedPosition);\n    }\n\n    return result && (!this._isFixedColumns || !column.fixed);\n  },\n  _renderGroupSummaryCellsCore: function ($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n    var alignByFixedColumnCellCount;\n\n    if (this._isFixedTableRendering) {\n      options.isFixed = true;\n      alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n      options.isFixed = false;\n      var startColumnIndex = options.columns.length - alignByFixedColumnCellCount;\n      options = extend({}, options, {\n        columns: this.getFixedColumns()\n      });\n      var transparentColumnIndex = getTransparentColumnIndex(options.columns);\n\n      if (startColumnIndex < transparentColumnIndex) {\n        alignByFixedColumnCellCount -= options.columns[transparentColumnIndex].colspan - 1 || 0;\n        groupCellColSpan -= options.columns[transparentColumnIndex].colspan - 1 || 0;\n      } else if (alignByColumnCellCount > 0) {\n        $groupCell.css(\"visibility\", \"hidden\");\n      }\n\n      alignByColumnCellCount = alignByFixedColumnCellCount;\n    }\n\n    this.callBase($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n  },\n  _getSummaryCellIndex: function (columnIndex, columns) {\n    if (this._isFixedTableRendering) {\n      var transparentColumnIndex = getTransparentColumnIndex(columns);\n\n      if (columnIndex > transparentColumnIndex) {\n        columnIndex += columns[transparentColumnIndex].colspan - 1;\n      }\n\n      return columnIndex;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _renderCore: function (change) {\n    this._detachHoverEvents();\n\n    this.callBase(change);\n    var isFixedColumns = this._isFixedColumns;\n    this.element().toggleClass(FIXED_COLUMNS_CLASS, isFixedColumns);\n\n    if (this.option(\"hoverStateEnabled\") && isFixedColumns) {\n      this._attachHoverEvents();\n    }\n  },\n  setRowsOpacity: function (columnIndex, value) {\n    this.callBase(columnIndex, value);\n\n    var $rows = this._getRowElements(this._fixedTableElement);\n\n    this._setRowsOpacityCore($rows, this.getFixedColumns(), columnIndex, value);\n  },\n  optionChanged: function (args) {\n    this.callBase(args);\n\n    if (\"hoverStateEnabled\" === args.name && this._isFixedColumns) {\n      args.value ? this._attachHoverEvents() : this._detachHoverEvents();\n    }\n  },\n  getCellIndex: function ($cell) {\n    var $fixedTable = this._fixedTableElement;\n    var cellIndex = 0;\n\n    if ($fixedTable && $cell.is(\"td\") && $cell.closest($fixedTable).length) {\n      var columns = this.getFixedColumns();\n      each(columns, function (index, column) {\n        if (index === $cell[0].cellIndex) {\n          return false;\n        }\n\n        if (column.colspan) {\n          cellIndex += column.colspan;\n          return;\n        }\n\n        cellIndex++;\n      });\n      return cellIndex;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _updateFixedTablePosition: function (scrollTop, needFocus) {\n    if (this._fixedTableElement && this._tableElement) {\n      var $focusedElement;\n      var editorFactory = this.getController(\"editorFactory\");\n\n      this._fixedTableElement.parent().scrollTop(scrollTop);\n\n      if (needFocus && editorFactory) {\n        $focusedElement = editorFactory.focus();\n        $focusedElement && editorFactory.focus($focusedElement);\n      }\n    }\n  },\n  setScrollerSpacing: function (vWidth, hWidth) {\n    var styles = {\n      marginBottom: 0\n    };\n    var $fixedContent = this.element().children(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS));\n\n    if ($fixedContent.length && this._fixedTableElement) {\n      $fixedContent.css(styles);\n\n      this._fixedTableElement.css(styles);\n\n      styles[this.option(\"rtlEnabled\") ? \"marginLeft\" : \"marginRight\"] = vWidth;\n      styles.marginBottom = hWidth;\n\n      var useNativeScrolling = this._scrollable && this._scrollable.option(\"useNative\");\n\n      (useNativeScrolling ? $fixedContent : this._fixedTableElement).css(styles);\n    }\n  },\n  _getElasticScrollTop: function (e) {\n    var elasticScrollTop = 0;\n    var scrollbarWidth = this.getScrollbarWidth(true);\n\n    if (e.scrollOffset.top < 0) {\n      elasticScrollTop = -e.scrollOffset.top;\n    } else if (e.reachedBottom) {\n      var scrollableContent = this._findContentElement();\n\n      var $scrollableContainer = $(e.component.container());\n      var maxScrollTop = Math.max(getHeight(scrollableContent) + scrollbarWidth - getHeight($scrollableContainer), 0);\n      elasticScrollTop = maxScrollTop - e.scrollOffset.top;\n    }\n\n    return elasticScrollTop;\n  },\n  _applyElasticScrolling: function (e) {\n    if (this._fixedTableElement) {\n      var elasticScrollTop = this._getElasticScrollTop(e);\n\n      if (0 !== Math.ceil(elasticScrollTop)) {\n        move(this._fixedTableElement, {\n          top: elasticScrollTop\n        });\n      } else {\n        this._fixedTableElement.css(\"transform\", \"\");\n      }\n    }\n  },\n  _handleScroll: function (e) {\n    this._updateFixedTablePosition(e.scrollOffset.top, true);\n\n    this._applyElasticScrolling(e);\n\n    this.callBase(e);\n  },\n  _updateContentPosition: function (isRender) {\n    this.callBase.apply(this, arguments);\n\n    if (!isRender) {\n      this._updateFixedTablePosition(this._scrollTop);\n    }\n  },\n  _afterRowPrepared: function (e) {\n    if (this._isFixedTableRendering) {\n      return;\n    }\n\n    this.callBase(e);\n  },\n  _scrollToElement: function ($element) {\n    this.callBase($element, this.getFixedColumnsOffset());\n  },\n  dispose: function () {\n    this.callBase.apply(this, arguments);\n    clearTimeout(this._fixedScrollTimeout);\n  }\n});\nvar FooterViewFixedColumnsExtender = baseFixedColumns;\nexport var columnFixingModule = {\n  defaultOptions: function () {\n    return {\n      columnFixing: {\n        enabled: false,\n        texts: {\n          fix: messageLocalization.format(\"dxDataGrid-columnFixingFix\"),\n          unfix: messageLocalization.format(\"dxDataGrid-columnFixingUnfix\"),\n          leftPosition: messageLocalization.format(\"dxDataGrid-columnFixingLeftPosition\"),\n          rightPosition: messageLocalization.format(\"dxDataGrid-columnFixingRightPosition\")\n        }\n      }\n    };\n  },\n  extenders: {\n    views: {\n      columnHeadersView: ColumnHeadersViewFixedColumnsExtender,\n      rowsView: RowsViewFixedColumnsExtender,\n      footerView: FooterViewFixedColumnsExtender\n    },\n    controllers: function () {\n      var normalizeColumnIndicesByPoints = function (columns, fixedColumns, pointsByColumns) {\n        var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n        var correctIndex = columns.length - fixedColumns.length;\n        each(pointsByColumns, function (_, point) {\n          if (point.index > transparentColumnIndex) {\n            point.columnIndex += correctIndex;\n            point.index += correctIndex;\n          }\n        });\n        return pointsByColumns;\n      };\n\n      return {\n        draggingHeader: {\n          _generatePointsByColumns: function (options) {\n            var visibleColumns = options.columns;\n            var targetDraggingPanel = options.targetDraggingPanel;\n\n            if (targetDraggingPanel && \"headers\" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {\n              if (options.sourceColumn.fixed) {\n                if (!options.rowIndex) {\n                  options.columnElements = targetDraggingPanel.getFixedColumnElements(0);\n                }\n\n                options.columns = targetDraggingPanel.getFixedColumns(options.rowIndex);\n                var pointsByColumns = this.callBase(options);\n                normalizeColumnIndicesByPoints(visibleColumns, options.columns, pointsByColumns);\n                return pointsByColumns;\n              }\n            }\n\n            return this.callBase(options);\n          },\n          _pointCreated: function (point, columns, location, sourceColumn) {\n            var result = this.callBase.apply(this, arguments);\n            var targetColumn = columns[point.columnIndex];\n\n            var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\n\n            if (!result && \"headers\" === location && $transparentColumn && $transparentColumn.length) {\n              var boundingRect = getBoundingRect($transparentColumn.get(0));\n\n              if (sourceColumn && sourceColumn.fixed) {\n                return \"right\" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left;\n              } else {\n                if (targetColumn && targetColumn.fixed && \"right\" !== targetColumn.fixedPosition) {\n                  return true;\n                }\n\n                return point.x < boundingRect.left || point.x > boundingRect.right;\n              }\n            }\n\n            return result;\n          }\n        },\n        columnsResizer: {\n          _generatePointsByColumns: function () {\n            var that = this;\n            var columnsController = that._columnsController;\n\n            var columns = columnsController && that._columnsController.getVisibleColumns();\n\n            var fixedColumns = columnsController && that._columnsController.getFixedColumns();\n\n            var cells = that._columnHeadersView.getFixedColumnElements();\n\n            var pointsByFixedColumns = [];\n            that.callBase();\n\n            if (cells && cells.length > 0) {\n              pointsByFixedColumns = gridCoreUtils.getPointsByColumns(cells, function (point) {\n                return that._pointCreated(point, cells.length, fixedColumns);\n              });\n              that._pointsByFixedColumns = normalizeColumnIndicesByPoints(columns, fixedColumns, pointsByFixedColumns);\n            }\n          },\n          _pointCreated: function (point, cellsLength, columns) {\n            var isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\n\n            if (point.index > 0 && point.index < cellsLength) {\n              var currentColumn = columns[point.columnIndex - 1] || {};\n              var nextColumn = columns[point.columnIndex] || {};\n\n              if (currentColumn.fixed || nextColumn.fixed) {\n                point.columnIndex -= 1;\n                return !((currentColumn.allowResizing || currentColumn.command === COMMAND_TRANSPARENT) && (isWidgetResizingMode || nextColumn.allowResizing || nextColumn.command === COMMAND_TRANSPARENT));\n              }\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _getTargetPoint: function (pointsByColumns, currentX, deltaX) {\n            var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\n\n            if ($transparentColumn && $transparentColumn.length) {\n              var boundingRect = getBoundingRect($transparentColumn.get(0));\n\n              if (currentX <= boundingRect.left || currentX >= boundingRect.right) {\n                return this.callBase(this._pointsByFixedColumns, currentX, deltaX);\n              }\n            }\n\n            return this.callBase(pointsByColumns, currentX, deltaX);\n          }\n        }\n      };\n    }()\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_fixing.js"],"names":["getOuterWidth","getHeight","$","eventsEngine","name","wheelEventName","messageLocalization","gridCoreUtils","isDefined","extend","each","browser","getBoundingRect","move","Scrollable","CONTENT_CLASS","CONTENT_FIXED_CLASS","MASTER_DETAIL_CELL_CLASS","FIRST_CELL_CLASS","LAST_CELL_CLASS","HOVER_STATE_CLASS","FIXED_COL_CLASS","FIXED_COLUMNS_CLASS","POINTER_EVENTS_NONE_CLASS","COMMAND_TRANSPARENT","GROUP_ROW_CLASS","getTransparentColumnIndex","fixedColumns","transparentColumnIndex","index","column","command","normalizeColumnWidths","widths","fixedWidths","fixedColumnIndex","i","length","colspan","baseFixedColumns","init","callBase","_isFixedTableRendering","_isFixedColumns","_createCol","toggleClass","fixed","_correctColumnIndicesForFixedColumns","change","transparentColspan","columnIndices","map","columnIndex","filter","_partialUpdateFixedTable","fixedTableElement","_fixedTableElement","transparentColumn","columnIndexOffset","_columnsController","getColumnIndexOffset","$rows","_getRowElementsCore","$colgroup","children","replaceWith","_createColGroup","cellElements","childNodes","colIndex","j","setAttribute","_renderTable","options","$fixedTable","getFixedColumns","$table","virtualColumnsScrolling","option","_createTable","_renderRows","columns","_updateContent","parent","remove","_renderRow","fixedCorrection","cells","row","apply","arguments","fixedCells","slice","_createCell","that","columnCommand","rowType","$cell","prevFixedColumn","addClass","setEmptyText","isRowAltStyle","isAltRow","mozilla","_wrapTableInScrollContainer","$scrollContainer","addWidgetPrefix","_renderCellContent","isEmptyCell","isFixedTableRendering","isGroupCell","groupIndex","groupCellTemplate","css","summaryCells","getVisibleColumns","alignByFixedColumnCellCount","_getAlignByColumnCellCount","isFixed","type","html","cssClass","_getCellElementsCore","rowIndex","isGroupRow","hasClass","headerRowIndex","fixedCellElements","_getRowElements","eq","cell","style","visibility","fixedColumn","getVisibleIndexByColumn","getColumnWidths","result","getTableElement","tableElement","setTableElement","getColumns","$tableElement","closest","getRowIndex","$row","find","getTableElements","get","getFixedColumnsOffset","offset","left","right","$transparentColumn","getTransparentColumnElement","positionTransparentColumn","position","element","first","getFixedTableElement","isFixedColumns","_resizeCore","synchronizeRows","setColumnWidths","visibleColumns","isWidthsSynchronized","visibleWidth","optionNames","isColumnWidthChanged","width","useVisibleColumns","hasAutoWidth","some","isScrollbarVisible","_getClientHeight","boundingClientRectElement","getBoundingClientRect","height","clientHeight","rowHeights","fixedRowHeights","$rowElements","$fixedRowElements","$contentElement","_tableElement","heightTable","heightFixedTable","_findContentElement","push","rowHeight","fixedRowHeight","setScrollerSpacing","rtlEnabled","paddingLeft","paddingRight","ColumnHeadersViewFixedColumnsExtender","_getRowVisibleColumns","getContextMenuItems","columnFixingOptions","items","enabled","allowFixing","onItemClick","params","itemData","value","columnOption","fixedPosition","text","texts","fix","beginGroup","leftPosition","disabled","rightPosition","unfix","getFixedColumnElements","columnElements","getColumnElements","$transparentColumnElement","splice","colSpan","$fixedColumnElements","_getWidths","RowsViewFixedColumnsExtender","_detachHoverEvents","off","_attachHoverEvents","attachHoverEvent","on","createAction","args","event","target","isHover","$content","scrollTop","contentClass","scrollDelay","scrollable","getScrollable","e","clearTimeout","_fixedScrollTimeout","setTimeout","scrollTo","y","$nearestScrollable","shouldScroll","$element","is","nearestScrollableInstance","getInstance","nearestScrollableHasVerticalScrollbar","scrollHeight","delta","getScrollbarWidth","appendTo","_updateScrollable","_disposed","scrollOffset","top","_updateFixedTablePosition","_renderContent","contentElement","empty","append","_getGroupCellOptions","_renderGroupedCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","_renderGroupSummaryCellsCore","$groupCell","groupCellColSpan","alignByColumnCellCount","startColumnIndex","_getSummaryCellIndex","_renderCore","setRowsOpacity","_setRowsOpacityCore","optionChanged","getCellIndex","cellIndex","needFocus","$focusedElement","editorFactory","getController","focus","vWidth","hWidth","styles","marginBottom","$fixedContent","useNativeScrolling","_scrollable","_getElasticScrollTop","elasticScrollTop","scrollbarWidth","reachedBottom","scrollableContent","$scrollableContainer","component","container","maxScrollTop","Math","max","_applyElasticScrolling","ceil","_handleScroll","_updateContentPosition","isRender","_scrollTop","_afterRowPrepared","_scrollToElement","dispose","FooterViewFixedColumnsExtender","columnFixingModule","defaultOptions","columnFixing","format","extenders","views","columnHeadersView","rowsView","footerView","controllers","normalizeColumnIndicesByPoints","pointsByColumns","correctIndex","_","point","draggingHeader","_generatePointsByColumns","targetDraggingPanel","getName","sourceColumn","_pointCreated","location","targetColumn","_columnHeadersView","boundingRect","x","columnsResizer","columnsController","pointsByFixedColumns","getPointsByColumns","_pointsByFixedColumns","cellsLength","isWidgetResizingMode","currentColumn","nextColumn","allowResizing","_getTargetPoint","currentX","deltaX"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_fixing.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    name as wheelEventName\r\n} from \"../../events/core/wheel\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    move\r\n} from \"../../animation/translator\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar CONTENT_FIXED_CLASS = \"content-fixed\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar FIRST_CELL_CLASS = \"dx-first-cell\";\r\nvar LAST_CELL_CLASS = \"dx-last-cell\";\r\nvar HOVER_STATE_CLASS = \"dx-state-hover\";\r\nvar FIXED_COL_CLASS = \"dx-col-fixed\";\r\nvar FIXED_COLUMNS_CLASS = \"dx-fixed-columns\";\r\nvar POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\";\r\nvar COMMAND_TRANSPARENT = \"transparent\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar getTransparentColumnIndex = function(fixedColumns) {\r\n    var transparentColumnIndex = -1;\r\n    each(fixedColumns, (function(index, column) {\r\n        if (column.command === COMMAND_TRANSPARENT) {\r\n            transparentColumnIndex = index;\r\n            return false\r\n        }\r\n    }));\r\n    return transparentColumnIndex\r\n};\r\nvar normalizeColumnWidths = function(fixedColumns, widths, fixedWidths) {\r\n    var fixedColumnIndex = 0;\r\n    if (fixedColumns && widths && fixedWidths) {\r\n        for (var i = 0; i < fixedColumns.length; i++) {\r\n            if (fixedColumns[i].command === COMMAND_TRANSPARENT) {\r\n                fixedColumnIndex += fixedColumns[i].colspan\r\n            } else {\r\n                if (widths[fixedColumnIndex] < fixedWidths[i]) {\r\n                    widths[fixedColumnIndex] = fixedWidths[i]\r\n                }\r\n                fixedColumnIndex++\r\n            }\r\n        }\r\n    }\r\n    return widths\r\n};\r\nvar baseFixedColumns = {\r\n    init: function() {\r\n        this.callBase();\r\n        this._isFixedTableRendering = false;\r\n        this._isFixedColumns = false\r\n    },\r\n    _createCol: function(column) {\r\n        return this.callBase(column).toggleClass(FIXED_COL_CLASS, !!(this._isFixedTableRendering && (column.fixed || column.command && column.command !== COMMAND_TRANSPARENT)))\r\n    },\r\n    _correctColumnIndicesForFixedColumns: function(fixedColumns, change) {\r\n        var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n        var transparentColspan = fixedColumns[transparentColumnIndex].colspan;\r\n        var columnIndices = change && change.columnIndices;\r\n        if (columnIndices) {\r\n            change.columnIndices = columnIndices.map((function(columnIndices) {\r\n                if (columnIndices) {\r\n                    return columnIndices.map((function(columnIndex) {\r\n                        if (columnIndex < transparentColumnIndex) {\r\n                            return columnIndex\r\n                        } else if (columnIndex >= transparentColumnIndex + transparentColspan) {\r\n                            return columnIndex - transparentColspan + 1\r\n                        }\r\n                        return -1\r\n                    })).filter((function(columnIndex) {\r\n                        return columnIndex >= 0\r\n                    }))\r\n                }\r\n            }))\r\n        }\r\n    },\r\n    _partialUpdateFixedTable(fixedColumns) {\r\n        var fixedTableElement = this._fixedTableElement;\r\n        var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n        var transparentColumn = fixedColumns[transparentColumnIndex];\r\n        var columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n        var $rows = this._getRowElementsCore(fixedTableElement);\r\n        var $colgroup = fixedTableElement.children(\"colgroup\");\r\n        $colgroup.replaceWith(this._createColGroup(fixedColumns));\r\n        for (var i = 0; i < $rows.length; i++) {\r\n            var cellElements = $rows[i].childNodes;\r\n            var colIndex = columnIndexOffset + 1;\r\n            for (var j = 0; j < cellElements.length; j++) {\r\n                cellElements[j].setAttribute(\"aria-colindex\", colIndex);\r\n                if (j === transparentColumnIndex) {\r\n                    cellElements[j].setAttribute(\"colspan\", transparentColumn.colspan);\r\n                    colIndex += transparentColumn.colspan\r\n                } else {\r\n                    colIndex++\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _renderTable: function(options) {\r\n        var $fixedTable;\r\n        var fixedColumns = this.getFixedColumns();\r\n        this._isFixedColumns = !!fixedColumns.length;\r\n        var $table = this.callBase(options);\r\n        if (this._isFixedColumns) {\r\n            var change = null === options || void 0 === options ? void 0 : options.change;\r\n            this._isFixedTableRendering = true;\r\n            if (null !== change && void 0 !== change && change.virtualColumnsScrolling && true !== this.option(\"scrolling.legacyMode\")) {\r\n                this._partialUpdateFixedTable(fixedColumns)\r\n            } else {\r\n                var columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;\r\n                this._correctColumnIndicesForFixedColumns(fixedColumns, change);\r\n                $fixedTable = this._createTable(fixedColumns);\r\n                this._renderRows($fixedTable, extend({}, options, {\r\n                    columns: fixedColumns\r\n                }));\r\n                this._updateContent($fixedTable, change);\r\n                if (columnIndices) {\r\n                    change.columnIndices = columnIndices\r\n                }\r\n            }\r\n            this._isFixedTableRendering = false\r\n        } else {\r\n            this._fixedTableElement && this._fixedTableElement.parent().remove();\r\n            this._fixedTableElement = null\r\n        }\r\n        return $table\r\n    },\r\n    _renderRow: function($table, options) {\r\n        var fixedCorrection;\r\n        var cells = options.row.cells;\r\n        this.callBase.apply(this, arguments);\r\n        if (this._isFixedTableRendering && cells && cells.length) {\r\n            fixedCorrection = 0;\r\n            var fixedCells = options.row.cells || [];\r\n            cells = cells.slice();\r\n            options.row.cells = cells;\r\n            for (var i = 0; i < fixedCells.length; i++) {\r\n                if (fixedCells[i].column && fixedCells[i].column.command === COMMAND_TRANSPARENT) {\r\n                    fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;\r\n                    continue\r\n                }\r\n                cells[i + fixedCorrection] = fixedCells[i]\r\n            }\r\n        }\r\n    },\r\n    _createCell: function(options) {\r\n        var that = this;\r\n        var column = options.column;\r\n        var columnCommand = column && column.command;\r\n        var rowType = options.rowType;\r\n        var $cell = that.callBase.apply(that, arguments);\r\n        var fixedColumns;\r\n        var prevFixedColumn;\r\n        var transparentColumnIndex;\r\n        if (that._isFixedTableRendering || \"filter\" === rowType) {\r\n            fixedColumns = that.getFixedColumns();\r\n            transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n            prevFixedColumn = fixedColumns[transparentColumnIndex - 1]\r\n        }\r\n        if (that._isFixedTableRendering) {\r\n            if (columnCommand === COMMAND_TRANSPARENT) {\r\n                $cell.addClass(POINTER_EVENTS_NONE_CLASS).toggleClass(FIRST_CELL_CLASS, 0 === transparentColumnIndex || prevFixedColumn && \"expand\" === prevFixedColumn.command).toggleClass(LAST_CELL_CLASS, fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);\r\n                if (\"freeSpace\" !== rowType) {\r\n                    gridCoreUtils.setEmptyText($cell)\r\n                }\r\n            }\r\n        } else if (\"filter\" === rowType) {\r\n            $cell.toggleClass(FIRST_CELL_CLASS, options.columnIndex === transparentColumnIndex)\r\n        }\r\n        var isRowAltStyle = that.option(\"rowAlternationEnabled\") && options.isAltRow;\r\n        if (browser.mozilla && options.column.fixed && \"group\" !== options.rowType && !isRowAltStyle) {\r\n            $cell.addClass(FIXED_COL_CLASS)\r\n        }\r\n        return $cell\r\n    },\r\n    _wrapTableInScrollContainer: function() {\r\n        var $scrollContainer = this.callBase.apply(this, arguments);\r\n        if (this._isFixedTableRendering) {\r\n            $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_FIXED_CLASS))\r\n        }\r\n        return $scrollContainer\r\n    },\r\n    _renderCellContent: function($cell, options) {\r\n        var isEmptyCell;\r\n        var column = options.column;\r\n        var isFixedTableRendering = this._isFixedTableRendering;\r\n        var isGroupCell = \"group\" === options.rowType && isDefined(column.groupIndex);\r\n        if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {\r\n            $cell.css(\"pointerEvents\", \"none\")\r\n        }\r\n        if (!isFixedTableRendering && this._isFixedColumns) {\r\n            isEmptyCell = column.fixed || column.command && false !== column.fixed;\r\n            if (isGroupCell) {\r\n                isEmptyCell = false;\r\n                if (options.row.summaryCells && options.row.summaryCells.length) {\r\n                    var columns = this._columnsController.getVisibleColumns();\r\n                    var alignByFixedColumnCellCount = this._getAlignByColumnCellCount ? this._getAlignByColumnCellCount(column.colspan, {\r\n                        columns: columns,\r\n                        row: options.row,\r\n                        isFixed: true\r\n                    }) : 0;\r\n                    if (alignByFixedColumnCellCount > 0) {\r\n                        var transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());\r\n                        isEmptyCell = columns.length - alignByFixedColumnCellCount < transparentColumnIndex\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyCell) {\r\n                if (column.command && \"buttons\" !== column.type || \"group\" === options.rowType) {\r\n                    $cell.html(\"&nbsp;\").addClass(column.cssClass);\r\n                    return\r\n                } else {\r\n                    $cell.addClass(\"dx-hidden-cell\")\r\n                }\r\n            }\r\n        }\r\n        if (column.command !== COMMAND_TRANSPARENT) {\r\n            this.callBase($cell, options)\r\n        }\r\n    },\r\n    _getCellElementsCore: function(rowIndex) {\r\n        var cellElements = this.callBase.apply(this, arguments);\r\n        var isGroupRow = cellElements.parent().hasClass(GROUP_ROW_CLASS);\r\n        var headerRowIndex = \"columnHeadersView\" === this.name ? rowIndex : void 0;\r\n        if (this._fixedTableElement && cellElements) {\r\n            var fixedColumns = this.getFixedColumns(headerRowIndex);\r\n            var fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children(\"td\");\r\n            each(fixedCellElements, (columnIndex, cell) => {\r\n                if (isGroupRow) {\r\n                    if (cellElements[columnIndex] && \"hidden\" !== cell.style.visibility) {\r\n                        cellElements[columnIndex] = cell\r\n                    }\r\n                } else {\r\n                    var fixedColumn = fixedColumns[columnIndex];\r\n                    if (fixedColumn) {\r\n                        if (fixedColumn.command === COMMAND_TRANSPARENT) {\r\n                            if (fixedCellElements.eq(columnIndex).hasClass(MASTER_DETAIL_CELL_CLASS)) {\r\n                                cellElements[columnIndex] = cell || cellElements[columnIndex]\r\n                            }\r\n                        } else {\r\n                            var fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);\r\n                            cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return cellElements\r\n    },\r\n    getColumnWidths: function() {\r\n        var fixedWidths;\r\n        var result = this.callBase();\r\n        var fixedColumns = this.getFixedColumns();\r\n        if (this._fixedTableElement && result.length) {\r\n            fixedWidths = this.callBase(this._fixedTableElement)\r\n        }\r\n        return normalizeColumnWidths(fixedColumns, result, fixedWidths)\r\n    },\r\n    getTableElement: function() {\r\n        var tableElement = this._isFixedTableRendering ? this._fixedTableElement : this.callBase();\r\n        return tableElement\r\n    },\r\n    setTableElement: function(tableElement) {\r\n        if (this._isFixedTableRendering) {\r\n            this._fixedTableElement = tableElement.addClass(POINTER_EVENTS_NONE_CLASS)\r\n        } else {\r\n            this.callBase(tableElement)\r\n        }\r\n    },\r\n    getColumns: function(rowIndex, $tableElement) {\r\n        $tableElement = $tableElement || this.getTableElement();\r\n        if (this._isFixedTableRendering || $tableElement && $tableElement.closest(\"table\").parent(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).length) {\r\n            return this.getFixedColumns(rowIndex)\r\n        }\r\n        return this.callBase(rowIndex, $tableElement)\r\n    },\r\n    getRowIndex: function($row) {\r\n        var $fixedTable = this._fixedTableElement;\r\n        if ($fixedTable && $fixedTable.find($row).length) {\r\n            return this._getRowElements($fixedTable).index($row)\r\n        }\r\n        return this.callBase($row)\r\n    },\r\n    getTableElements: function() {\r\n        var result = this.callBase.apply(this, arguments);\r\n        if (this._fixedTableElement) {\r\n            result = $([result.get(0), this._fixedTableElement.get(0)])\r\n        }\r\n        return result\r\n    },\r\n    getFixedColumns: function(rowIndex) {\r\n        return this._columnsController.getFixedColumns(rowIndex)\r\n    },\r\n    getFixedColumnsOffset: function() {\r\n        var offset = {\r\n            left: 0,\r\n            right: 0\r\n        };\r\n        var $transparentColumn;\r\n        if (this._fixedTableElement) {\r\n            $transparentColumn = this.getTransparentColumnElement();\r\n            var positionTransparentColumn = $transparentColumn.position();\r\n            offset = {\r\n                left: positionTransparentColumn.left,\r\n                right: getOuterWidth(this.element(), true) - (getOuterWidth($transparentColumn, true) + positionTransparentColumn.left)\r\n            }\r\n        }\r\n        return offset\r\n    },\r\n    getTransparentColumnElement: function() {\r\n        return this._fixedTableElement && this._fixedTableElement.find(\".\" + POINTER_EVENTS_NONE_CLASS).first()\r\n    },\r\n    getFixedTableElement: function() {\r\n        return this._fixedTableElement\r\n    },\r\n    isFixedColumns: function() {\r\n        return this._isFixedColumns\r\n    },\r\n    _resizeCore: function() {\r\n        this.callBase();\r\n        this.synchronizeRows()\r\n    },\r\n    setColumnWidths: function(options) {\r\n        var columns;\r\n        var visibleColumns = this._columnsController.getVisibleColumns();\r\n        var widths = options.widths;\r\n        var isWidthsSynchronized = widths && widths.length && isDefined(visibleColumns[0].visibleWidth);\r\n        var optionNames = options.optionNames;\r\n        var isColumnWidthChanged = optionNames && optionNames.width;\r\n        var useVisibleColumns = false;\r\n        this.callBase.apply(this, arguments);\r\n        if (this._fixedTableElement) {\r\n            var hasAutoWidth = widths && widths.some((function(width) {\r\n                return \"auto\" === width\r\n            }));\r\n            useVisibleColumns = hasAutoWidth && (!isWidthsSynchronized || !this.isScrollbarVisible(true));\r\n            if (useVisibleColumns) {\r\n                columns = visibleColumns\r\n            }\r\n            this.callBase(extend({}, options, {\r\n                $tableElement: this._fixedTableElement,\r\n                columns: columns,\r\n                fixed: true\r\n            }))\r\n        }\r\n        if (isWidthsSynchronized || isColumnWidthChanged && this.option(\"wordWrapEnabled\")) {\r\n            this.synchronizeRows()\r\n        }\r\n    },\r\n    _createColGroup: function(columns) {\r\n        if (this._isFixedTableRendering && !this.option(\"columnAutoWidth\")) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var useVisibleColumns = visibleColumns.filter((function(column) {\r\n                return !column.width\r\n            })).length;\r\n            if (useVisibleColumns) {\r\n                columns = visibleColumns\r\n            }\r\n        }\r\n        return this.callBase(columns)\r\n    },\r\n    _getClientHeight: function(element) {\r\n        var boundingClientRectElement = element.getBoundingClientRect && getBoundingRect(element);\r\n        return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight\r\n    },\r\n    synchronizeRows: function() {\r\n        var rowHeights = [];\r\n        var fixedRowHeights = [];\r\n        var rowIndex;\r\n        var $rowElements;\r\n        var $fixedRowElements;\r\n        var $contentElement;\r\n        if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {\r\n            var heightTable = this._getClientHeight(this._tableElement.get(0));\r\n            var heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));\r\n            $rowElements = this._getRowElements(this._tableElement);\r\n            $fixedRowElements = this._getRowElements(this._fixedTableElement);\r\n            $contentElement = this._findContentElement();\r\n            if (heightTable !== heightFixedTable) {\r\n                $contentElement && $contentElement.css(\"height\", heightTable);\r\n                $rowElements.css(\"height\", \"\");\r\n                $fixedRowElements.css(\"height\", \"\");\r\n                for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\r\n                    rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));\r\n                    fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)))\r\n                }\r\n                for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\r\n                    var rowHeight = rowHeights[rowIndex];\r\n                    var fixedRowHeight = fixedRowHeights[rowIndex];\r\n                    if (rowHeight > fixedRowHeight) {\r\n                        $fixedRowElements.eq(rowIndex).css(\"height\", rowHeight)\r\n                    } else if (rowHeight < fixedRowHeight) {\r\n                        $rowElements.eq(rowIndex).css(\"height\", fixedRowHeight)\r\n                    }\r\n                }\r\n                $contentElement && $contentElement.css(\"height\", \"\")\r\n            }\r\n        }\r\n    },\r\n    setScrollerSpacing: function(width) {\r\n        var rtlEnabled = this.option(\"rtlEnabled\");\r\n        this.callBase(width);\r\n        this.element().children(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).css({\r\n            paddingLeft: rtlEnabled ? width : \"\",\r\n            paddingRight: !rtlEnabled ? width : \"\"\r\n        })\r\n    }\r\n};\r\nvar ColumnHeadersViewFixedColumnsExtender = extend({}, baseFixedColumns, {\r\n    _getRowVisibleColumns: function(rowIndex) {\r\n        if (this._isFixedTableRendering) {\r\n            return this.getFixedColumns(rowIndex)\r\n        }\r\n        return this.callBase(rowIndex)\r\n    },\r\n    getContextMenuItems: function(options) {\r\n        var column = options.column;\r\n        var columnFixingOptions = this.option(\"columnFixing\");\r\n        var items = this.callBase(options);\r\n        if (options.row && \"header\" === options.row.rowType) {\r\n            if (true === columnFixingOptions.enabled && column && column.allowFixing) {\r\n                var onItemClick = params => {\r\n                    switch (params.itemData.value) {\r\n                        case \"none\":\r\n                            this._columnsController.columnOption(column.index, \"fixed\", false);\r\n                            break;\r\n                        case \"left\":\r\n                            this._columnsController.columnOption(column.index, {\r\n                                fixed: true,\r\n                                fixedPosition: \"left\"\r\n                            });\r\n                            break;\r\n                        case \"right\":\r\n                            this._columnsController.columnOption(column.index, {\r\n                                fixed: true,\r\n                                fixedPosition: \"right\"\r\n                            })\r\n                    }\r\n                };\r\n                items = items || [];\r\n                items.push({\r\n                    text: columnFixingOptions.texts.fix,\r\n                    beginGroup: true,\r\n                    items: [{\r\n                        text: columnFixingOptions.texts.leftPosition,\r\n                        value: \"left\",\r\n                        disabled: column.fixed && (!column.fixedPosition || \"left\" === column.fixedPosition),\r\n                        onItemClick: onItemClick\r\n                    }, {\r\n                        text: columnFixingOptions.texts.rightPosition,\r\n                        value: \"right\",\r\n                        disabled: column.fixed && \"right\" === column.fixedPosition,\r\n                        onItemClick: onItemClick\r\n                    }]\r\n                }, {\r\n                    text: columnFixingOptions.texts.unfix,\r\n                    value: \"none\",\r\n                    disabled: !column.fixed,\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    },\r\n    getFixedColumnElements: function(rowIndex) {\r\n        if (isDefined(rowIndex)) {\r\n            return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children()\r\n        }\r\n        var columnElements = this.getColumnElements();\r\n        var $transparentColumnElement = this.getTransparentColumnElement();\r\n        if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {\r\n            var transparentColumnIndex = getTransparentColumnIndex(this.getFixedColumns());\r\n            columnElements.splice(transparentColumnIndex, $transparentColumnElement.get(0).colSpan, $transparentColumnElement.get(0))\r\n        }\r\n        return columnElements\r\n    },\r\n    getColumnWidths: function() {\r\n        var fixedWidths;\r\n        var result = this.callBase();\r\n        var $fixedColumnElements = this.getFixedColumnElements();\r\n        var fixedColumns = this.getFixedColumns();\r\n        if (this._fixedTableElement) {\r\n            if ($fixedColumnElements && $fixedColumnElements.length) {\r\n                fixedWidths = this._getWidths($fixedColumnElements)\r\n            } else {\r\n                fixedWidths = this.callBase(this._fixedTableElement)\r\n            }\r\n        }\r\n        return normalizeColumnWidths(fixedColumns, result, fixedWidths)\r\n    }\r\n});\r\nvar RowsViewFixedColumnsExtender = extend({}, baseFixedColumns, {\r\n    _detachHoverEvents: function() {\r\n        this._fixedTableElement && eventsEngine.off(this._fixedTableElement, \"mouseover mouseout\", \".dx-data-row\");\r\n        this._tableElement && eventsEngine.off(this._tableElement, \"mouseover mouseout\", \".dx-data-row\")\r\n    },\r\n    _attachHoverEvents: function() {\r\n        var that = this;\r\n        var attachHoverEvent = function($table) {\r\n            eventsEngine.on($table, \"mouseover mouseout\", \".dx-data-row\", that.createAction((function(args) {\r\n                var event = args.event;\r\n                var rowIndex = that.getRowIndex($(event.target).closest(\".dx-row\"));\r\n                var isHover = \"mouseover\" === event.type;\r\n                if (rowIndex >= 0) {\r\n                    that._tableElement && that._getRowElements(that._tableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);\r\n                    that._fixedTableElement && that._getRowElements(that._fixedTableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover)\r\n                }\r\n            })))\r\n        };\r\n        if (that._fixedTableElement && that._tableElement) {\r\n            attachHoverEvent(that._fixedTableElement);\r\n            attachHoverEvent(that._tableElement)\r\n        }\r\n    },\r\n    _findContentElement: function() {\r\n        var that = this;\r\n        var $content;\r\n        var scrollTop;\r\n        var contentClass = that.addWidgetPrefix(CONTENT_CLASS);\r\n        var element = that.element();\r\n        var scrollDelay = browser.mozilla ? 60 : 0;\r\n        if (element && that._isFixedTableRendering) {\r\n            $content = element.children(\".\" + contentClass);\r\n            var scrollable = that.getScrollable();\r\n            if (!$content.length && scrollable) {\r\n                $content = $(\"<div>\").addClass(contentClass);\r\n                eventsEngine.on($content, \"scroll\", (function(e) {\r\n                    clearTimeout(that._fixedScrollTimeout);\r\n                    that._fixedScrollTimeout = setTimeout((function() {\r\n                        scrollTop = $(e.target).scrollTop();\r\n                        scrollable.scrollTo({\r\n                            y: scrollTop\r\n                        })\r\n                    }), scrollDelay)\r\n                }));\r\n                eventsEngine.on($content, wheelEventName, (function(e) {\r\n                    var $nearestScrollable = $(e.target).closest(\".dx-scrollable\");\r\n                    var shouldScroll = false;\r\n                    if (scrollable && scrollable.$element().is($nearestScrollable)) {\r\n                        shouldScroll = true\r\n                    } else {\r\n                        var nearestScrollableInstance = $nearestScrollable.length && Scrollable.getInstance($nearestScrollable.get(0));\r\n                        var nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;\r\n                        shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar\r\n                    }\r\n                    if (shouldScroll) {\r\n                        scrollTop = scrollable.scrollTop();\r\n                        scrollable.scrollTo({\r\n                            y: scrollTop - e.delta\r\n                        });\r\n                        if (scrollable.scrollTop() > 0 && scrollable.scrollTop() + scrollable.clientHeight() < scrollable.scrollHeight() + that.getScrollbarWidth()) {\r\n                            return false\r\n                        }\r\n                    }\r\n                }));\r\n                $content.appendTo(element)\r\n            }\r\n            return $content\r\n        }\r\n        return that.callBase()\r\n    },\r\n    _updateScrollable: function() {\r\n        this.callBase();\r\n        var scrollable = this.getScrollable();\r\n        if (null !== scrollable && void 0 !== scrollable && scrollable._disposed) {\r\n            return\r\n        }\r\n        var scrollTop = scrollable && scrollable.scrollOffset().top;\r\n        this._updateFixedTablePosition(scrollTop)\r\n    },\r\n    _renderContent: function(contentElement, tableElement) {\r\n        if (this._isFixedTableRendering) {\r\n            return contentElement.empty().addClass(this.addWidgetPrefix(CONTENT_CLASS) + \" \" + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).append(tableElement)\r\n        }\r\n        return this.callBase(contentElement, tableElement)\r\n    },\r\n    _getGroupCellOptions: function(options) {\r\n        if (this._isFixedTableRendering) {\r\n            return this.callBase(extend({}, options, {\r\n                columns: this._columnsController.getVisibleColumns()\r\n            }))\r\n        }\r\n        return this.callBase(options)\r\n    },\r\n    _renderGroupedCells: function($row, options) {\r\n        return this.callBase($row, extend({}, options, {\r\n            columns: this._columnsController.getVisibleColumns()\r\n        }))\r\n    },\r\n    _renderGroupSummaryCells: function($row, options) {\r\n        if (this._isFixedTableRendering) {\r\n            this.callBase($row, extend({}, options, {\r\n                columns: this._columnsController.getVisibleColumns()\r\n            }))\r\n        } else {\r\n            this.callBase($row, options)\r\n        }\r\n    },\r\n    _hasAlignByColumnSummaryItems: function(columnIndex, options) {\r\n        var result = this.callBase.apply(this, arguments);\r\n        var column = options.columns[columnIndex];\r\n        if (options.isFixed) {\r\n            return column.fixed && (result || \"right\" === column.fixedPosition)\r\n        }\r\n        return result && (!this._isFixedColumns || !column.fixed)\r\n    },\r\n    _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n        var alignByFixedColumnCellCount;\r\n        if (this._isFixedTableRendering) {\r\n            options.isFixed = true;\r\n            alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n            options.isFixed = false;\r\n            var startColumnIndex = options.columns.length - alignByFixedColumnCellCount;\r\n            options = extend({}, options, {\r\n                columns: this.getFixedColumns()\r\n            });\r\n            var transparentColumnIndex = getTransparentColumnIndex(options.columns);\r\n            if (startColumnIndex < transparentColumnIndex) {\r\n                alignByFixedColumnCellCount -= options.columns[transparentColumnIndex].colspan - 1 || 0;\r\n                groupCellColSpan -= options.columns[transparentColumnIndex].colspan - 1 || 0\r\n            } else if (alignByColumnCellCount > 0) {\r\n                $groupCell.css(\"visibility\", \"hidden\")\r\n            }\r\n            alignByColumnCellCount = alignByFixedColumnCellCount\r\n        }\r\n        this.callBase($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n    },\r\n    _getSummaryCellIndex: function(columnIndex, columns) {\r\n        if (this._isFixedTableRendering) {\r\n            var transparentColumnIndex = getTransparentColumnIndex(columns);\r\n            if (columnIndex > transparentColumnIndex) {\r\n                columnIndex += columns[transparentColumnIndex].colspan - 1\r\n            }\r\n            return columnIndex\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _renderCore: function(change) {\r\n        this._detachHoverEvents();\r\n        this.callBase(change);\r\n        var isFixedColumns = this._isFixedColumns;\r\n        this.element().toggleClass(FIXED_COLUMNS_CLASS, isFixedColumns);\r\n        if (this.option(\"hoverStateEnabled\") && isFixedColumns) {\r\n            this._attachHoverEvents()\r\n        }\r\n    },\r\n    setRowsOpacity: function(columnIndex, value) {\r\n        this.callBase(columnIndex, value);\r\n        var $rows = this._getRowElements(this._fixedTableElement);\r\n        this._setRowsOpacityCore($rows, this.getFixedColumns(), columnIndex, value)\r\n    },\r\n    optionChanged: function(args) {\r\n        this.callBase(args);\r\n        if (\"hoverStateEnabled\" === args.name && this._isFixedColumns) {\r\n            args.value ? this._attachHoverEvents() : this._detachHoverEvents()\r\n        }\r\n    },\r\n    getCellIndex: function($cell) {\r\n        var $fixedTable = this._fixedTableElement;\r\n        var cellIndex = 0;\r\n        if ($fixedTable && $cell.is(\"td\") && $cell.closest($fixedTable).length) {\r\n            var columns = this.getFixedColumns();\r\n            each(columns, (function(index, column) {\r\n                if (index === $cell[0].cellIndex) {\r\n                    return false\r\n                }\r\n                if (column.colspan) {\r\n                    cellIndex += column.colspan;\r\n                    return\r\n                }\r\n                cellIndex++\r\n            }));\r\n            return cellIndex\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _updateFixedTablePosition: function(scrollTop, needFocus) {\r\n        if (this._fixedTableElement && this._tableElement) {\r\n            var $focusedElement;\r\n            var editorFactory = this.getController(\"editorFactory\");\r\n            this._fixedTableElement.parent().scrollTop(scrollTop);\r\n            if (needFocus && editorFactory) {\r\n                $focusedElement = editorFactory.focus();\r\n                $focusedElement && editorFactory.focus($focusedElement)\r\n            }\r\n        }\r\n    },\r\n    setScrollerSpacing: function(vWidth, hWidth) {\r\n        var styles = {\r\n            marginBottom: 0\r\n        };\r\n        var $fixedContent = this.element().children(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS));\r\n        if ($fixedContent.length && this._fixedTableElement) {\r\n            $fixedContent.css(styles);\r\n            this._fixedTableElement.css(styles);\r\n            styles[this.option(\"rtlEnabled\") ? \"marginLeft\" : \"marginRight\"] = vWidth;\r\n            styles.marginBottom = hWidth;\r\n            var useNativeScrolling = this._scrollable && this._scrollable.option(\"useNative\");\r\n            (useNativeScrolling ? $fixedContent : this._fixedTableElement).css(styles)\r\n        }\r\n    },\r\n    _getElasticScrollTop: function(e) {\r\n        var elasticScrollTop = 0;\r\n        var scrollbarWidth = this.getScrollbarWidth(true);\r\n        if (e.scrollOffset.top < 0) {\r\n            elasticScrollTop = -e.scrollOffset.top\r\n        } else if (e.reachedBottom) {\r\n            var scrollableContent = this._findContentElement();\r\n            var $scrollableContainer = $(e.component.container());\r\n            var maxScrollTop = Math.max(getHeight(scrollableContent) + scrollbarWidth - getHeight($scrollableContainer), 0);\r\n            elasticScrollTop = maxScrollTop - e.scrollOffset.top\r\n        }\r\n        return elasticScrollTop\r\n    },\r\n    _applyElasticScrolling: function(e) {\r\n        if (this._fixedTableElement) {\r\n            var elasticScrollTop = this._getElasticScrollTop(e);\r\n            if (0 !== Math.ceil(elasticScrollTop)) {\r\n                move(this._fixedTableElement, {\r\n                    top: elasticScrollTop\r\n                })\r\n            } else {\r\n                this._fixedTableElement.css(\"transform\", \"\")\r\n            }\r\n        }\r\n    },\r\n    _handleScroll: function(e) {\r\n        this._updateFixedTablePosition(e.scrollOffset.top, true);\r\n        this._applyElasticScrolling(e);\r\n        this.callBase(e)\r\n    },\r\n    _updateContentPosition: function(isRender) {\r\n        this.callBase.apply(this, arguments);\r\n        if (!isRender) {\r\n            this._updateFixedTablePosition(this._scrollTop)\r\n        }\r\n    },\r\n    _afterRowPrepared: function(e) {\r\n        if (this._isFixedTableRendering) {\r\n            return\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _scrollToElement: function($element) {\r\n        this.callBase($element, this.getFixedColumnsOffset())\r\n    },\r\n    dispose: function() {\r\n        this.callBase.apply(this, arguments);\r\n        clearTimeout(this._fixedScrollTimeout)\r\n    }\r\n});\r\nvar FooterViewFixedColumnsExtender = baseFixedColumns;\r\nexport var columnFixingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnFixing: {\r\n                enabled: false,\r\n                texts: {\r\n                    fix: messageLocalization.format(\"dxDataGrid-columnFixingFix\"),\r\n                    unfix: messageLocalization.format(\"dxDataGrid-columnFixingUnfix\"),\r\n                    leftPosition: messageLocalization.format(\"dxDataGrid-columnFixingLeftPosition\"),\r\n                    rightPosition: messageLocalization.format(\"dxDataGrid-columnFixingRightPosition\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewFixedColumnsExtender,\r\n            rowsView: RowsViewFixedColumnsExtender,\r\n            footerView: FooterViewFixedColumnsExtender\r\n        },\r\n        controllers: function() {\r\n            var normalizeColumnIndicesByPoints = function(columns, fixedColumns, pointsByColumns) {\r\n                var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n                var correctIndex = columns.length - fixedColumns.length;\r\n                each(pointsByColumns, (function(_, point) {\r\n                    if (point.index > transparentColumnIndex) {\r\n                        point.columnIndex += correctIndex;\r\n                        point.index += correctIndex\r\n                    }\r\n                }));\r\n                return pointsByColumns\r\n            };\r\n            return {\r\n                draggingHeader: {\r\n                    _generatePointsByColumns: function(options) {\r\n                        var visibleColumns = options.columns;\r\n                        var targetDraggingPanel = options.targetDraggingPanel;\r\n                        if (targetDraggingPanel && \"headers\" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {\r\n                            if (options.sourceColumn.fixed) {\r\n                                if (!options.rowIndex) {\r\n                                    options.columnElements = targetDraggingPanel.getFixedColumnElements(0)\r\n                                }\r\n                                options.columns = targetDraggingPanel.getFixedColumns(options.rowIndex);\r\n                                var pointsByColumns = this.callBase(options);\r\n                                normalizeColumnIndicesByPoints(visibleColumns, options.columns, pointsByColumns);\r\n                                return pointsByColumns\r\n                            }\r\n                        }\r\n                        return this.callBase(options)\r\n                    },\r\n                    _pointCreated: function(point, columns, location, sourceColumn) {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        var targetColumn = columns[point.columnIndex];\r\n                        var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\r\n                        if (!result && \"headers\" === location && $transparentColumn && $transparentColumn.length) {\r\n                            var boundingRect = getBoundingRect($transparentColumn.get(0));\r\n                            if (sourceColumn && sourceColumn.fixed) {\r\n                                return \"right\" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left\r\n                            } else {\r\n                                if (targetColumn && targetColumn.fixed && \"right\" !== targetColumn.fixedPosition) {\r\n                                    return true\r\n                                }\r\n                                return point.x < boundingRect.left || point.x > boundingRect.right\r\n                            }\r\n                        }\r\n                        return result\r\n                    }\r\n                },\r\n                columnsResizer: {\r\n                    _generatePointsByColumns: function() {\r\n                        var that = this;\r\n                        var columnsController = that._columnsController;\r\n                        var columns = columnsController && that._columnsController.getVisibleColumns();\r\n                        var fixedColumns = columnsController && that._columnsController.getFixedColumns();\r\n                        var cells = that._columnHeadersView.getFixedColumnElements();\r\n                        var pointsByFixedColumns = [];\r\n                        that.callBase();\r\n                        if (cells && cells.length > 0) {\r\n                            pointsByFixedColumns = gridCoreUtils.getPointsByColumns(cells, (function(point) {\r\n                                return that._pointCreated(point, cells.length, fixedColumns)\r\n                            }));\r\n                            that._pointsByFixedColumns = normalizeColumnIndicesByPoints(columns, fixedColumns, pointsByFixedColumns)\r\n                        }\r\n                    },\r\n                    _pointCreated: function(point, cellsLength, columns) {\r\n                        var isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\r\n                        if (point.index > 0 && point.index < cellsLength) {\r\n                            var currentColumn = columns[point.columnIndex - 1] || {};\r\n                            var nextColumn = columns[point.columnIndex] || {};\r\n                            if (currentColumn.fixed || nextColumn.fixed) {\r\n                                point.columnIndex -= 1;\r\n                                return !((currentColumn.allowResizing || currentColumn.command === COMMAND_TRANSPARENT) && (isWidgetResizingMode || nextColumn.allowResizing || nextColumn.command === COMMAND_TRANSPARENT))\r\n                            }\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _getTargetPoint: function(pointsByColumns, currentX, deltaX) {\r\n                        var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\r\n                        if ($transparentColumn && $transparentColumn.length) {\r\n                            var boundingRect = getBoundingRect($transparentColumn.get(0));\r\n                            if (currentX <= boundingRect.left || currentX >= boundingRect.right) {\r\n                                return this.callBase(this._pointsByFixedColumns, currentX, deltaX)\r\n                            }\r\n                        }\r\n                        return this.callBase(pointsByColumns, currentX, deltaX)\r\n                    }\r\n                }\r\n            }\r\n        }()\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}