{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { touch } from \"../../core/utils/support\";\nimport { name as clickEventName } from \"../../events/click\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport Selection from \"../selection/selection\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport errors from \"../widget/ui.errors\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function (that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nvar SelectionController = gridCore.Controller.inherit(function () {\n  var selectionCellTemplate = (container, options) => {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer($(container), options);\n  };\n\n  var selectionHeaderTemplate = (container, options) => {\n    var column = options.column;\n    var $cellElement = $(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function () {\n      var {\n        deferred: deferred,\n        selectAllMode: selectAllMode,\n        mode: mode\n      } = this.option(\"selection\") || {};\n\n      if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n        errors.log(\"W1018\");\n      }\n\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = mode;\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    },\n    _getSelectionConfig: function () {\n      var dataController = this._dataController;\n      var selectionOptions = this.option(\"selection\") || {};\n      var deferred = selectionOptions.deferred;\n      return {\n        selectedKeys: this.option(\"selectedRowKeys\"),\n        mode: this._selectionMode,\n        deferred: deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: this.option(\"selectionFilter\"),\n        ignoreDisabledItems: true,\n        key: function () {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.key();\n        },\n        keyOf: function (item) {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item);\n        },\n        dataFields: function () {\n          var _dataController$dataS;\n\n          return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select();\n        },\n        load: function (options) {\n          var _dataController$dataS2;\n\n          return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || new Deferred().resolve([]);\n        },\n        plainItems: function (allItems) {\n          return dataController.items(allItems);\n        },\n        isItemSelected: function (item) {\n          return item.selected;\n        },\n        isSelectableItem: function (item) {\n          return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow;\n        },\n        getItemData: function (item) {\n          return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item;\n        },\n        filter: function () {\n          return dataController.getCombinedFilter(deferred);\n        },\n        totalCount: () => dataController.totalCount(),\n        onSelectionChanged: this._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function () {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function () {\n      var options = this._getSelectionConfig();\n\n      return new Selection(options);\n    },\n    _fireSelectionChanged: function (options) {\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n    },\n    _updateCheckboxesState: function (options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && function (that, selectionFilter) {\n          var keyIndex = 0;\n\n          var store = that._dataController.store();\n\n          var key = store && store.key();\n          var isComplexKey = Array.isArray(key);\n\n          if (!selectionFilter.length) {\n            return false;\n          }\n\n          if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n            for (var i = 0; i < selectionFilter.length; i++) {\n              if (Array.isArray(selectionFilter[i])) {\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n                  return true;\n                }\n\n                keyIndex++;\n              }\n            }\n\n            return false;\n          }\n\n          return key !== selectionFilter[0];\n        }(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n          this.stopSelectionWithCheckboxes();\n        }\n      }\n    },\n    _updateSelectedItems: function (args) {\n      var selectionChangedOptions;\n      var isDeferredMode = this.option(\"selection.deferred\");\n\n      var selectionFilter = this._selection.selectionFilter();\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\n      var changedItemIndexes = this.getChangedItemIndexes(items);\n\n      this._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: changedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        this.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n        this._selectedItemsInternalChange = true;\n        this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n        this._selectedItemsInternalChange = false;\n        selectionChangedOptions = {\n          selectedRowsData: args.selectedItems.slice(0),\n          selectedRowKeys: args.selectedItemKeys.slice(0),\n          currentSelectedRowKeys: args.addedItemKeys.slice(0),\n          currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n        };\n      }\n\n      this._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function (items) {\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function () {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function (args) {\n      this.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = this._selectionMode;\n          this.init();\n\n          if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n            var selectionMode = this._selectionMode;\n            var selectedRowKeys = this.option(\"selectedRowKeys\");\n\n            if (oldSelectionMode !== selectionMode) {\n              if (\"single\" === selectionMode) {\n                if (selectedRowKeys.length > 1) {\n                  selectedRowKeys = [selectedRowKeys[0]];\n                }\n              } else if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n\n            this.selectRows(selectedRowKeys).always(() => {\n              this._fireSelectionChanged();\n            });\n          }\n\n          this.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n            this.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function () {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function (arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function () {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function () {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function () {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function () {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function () {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function () {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new Deferred().resolve().promise();\n    },\n    selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function () {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function (keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function (keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function (indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      each(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function () {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function (itemIndex, keys) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      return this._selection.changeItemSelection(itemIndex, keys);\n    },\n    focusedItemIndex: function (itemIndex) {\n      if (isDefined(itemIndex)) {\n        this._selection._focusedItemIndex = itemIndex;\n      } else {\n        return this._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function () {\n      if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\n        this._isSelectionWithCheckboxes = true;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function () {\n      if (this._isSelectionWithCheckboxes) {\n        this._isSelectionWithCheckboxes = false;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nexport var selectionModule = {\n  defaultOptions: function () {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function (item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function (options) {\n          var that = this;\n          var d = new Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function (e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function (change) {\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach((item, index) => {\n              var currentItem = this._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        push: function (changes) {\n          this.callBase.apply(this, arguments);\n          var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\n          removedKeys.length && this.getController(\"selection\").deselectRows(removedKeys);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function (options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function () {\n          this.callBase();\n          this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this));\n        },\n        _updateSelectAllValue: function () {\n          var $element = this.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\n            var selectAllValue = this.getController(\"selection\").isSelectAll();\n            var hasSelection = false !== selectAllValue;\n            var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\n            $editor.dxCheckBox(\"instance\").option({\n              visible: isVisible,\n              value: selectAllValue\n            });\n          }\n        },\n        _handleDataChanged: function (e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function ($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var isEmptyData = that.getController(\"data\").isEmpty();\n          var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), $container);\n          that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function (value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function ($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), $container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            gridCoreUtils.setEmptyText($container);\n          }\n        },\n        _renderSelectCheckBox: function (container, options) {\n          var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function (value, e) {\n              var _e$event;\n\n              if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n                eventsEngine.trigger(e.element, clickEventName, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function (change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              each(tableElements, function (_, tableElement) {\n                each(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements($(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function () {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\n              eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isSelected = !!row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            this.setAria(\"selected\", isSelected, $row);\n          }\n\n          return $row;\n        },\n        _rowClick: function (e) {\n          var dxEvent = e.event;\n          var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!this.isClickableElement($(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\n              if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: isCommandKeyPressed(dxEvent),\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            this.callBase(e);\n          }\n        },\n        isClickableElement: function ($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function () {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          each(tableElements, function (_, tableElement) {\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js"],"names":["$","eventsEngine","gridCore","gridCoreUtils","isDefined","each","extend","touch","name","clickEventName","messageLocalization","addNamespace","isCommandKeyPressed","holdEvent","Selection","Deferred","errors","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","selectionController","getController","rowsView","getView","$row","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","SelectionController","Controller","inherit","selectionCellTemplate","container","options","component","value","isRowSelected","row","key","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","init","deferred","selectAllMode","mode","log","_dataController","_selectionMode","_isSelectionWithCheckboxes","_selection","_createSelection","_updateSelectColumn","createAction","excludeValidators","_getSelectionConfig","dataController","selectionOptions","selectedKeys","maxFilterLengthInRequest","selectionFilter","ignoreDisabledItems","keyOf","item","dataFields","_dataController$dataS","dataSource","select","load","_dataController$dataS2","resolve","plainItems","allItems","items","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","data","filter","getCombinedFilter","totalCount","onSelectionChanged","_updateSelectedItems","bind","columnsController","isSelectColumnVisible","addCommandColumn","type","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","executeAction","argument","selectedRowKeys","selectionChanged","fire","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","keyIndex","store","isComplexKey","Array","isArray","length","i","args","selectionChangedOptions","changedItemIndexes","getChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDeferredSelection","isDataItem","isSelected","push","callbackNames","optionChanged","callBase","oldSelectionMode","fullName","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","deselectRows","selectRowsByIndexes","indexes","prototype","call","arguments","getSelectedRowsData","getSelectedItems","itemIndex","focusedItemIndex","_focusedItemIndex","selectionModule","defaultOptions","selection","showCheckBoxesMode","allowSelectAll","controllers","extenders","apply","_loadDataSource","done","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","fail","reject","_handleDataChanged","e","_repaintChangesOnly","_applyChange","change","forEach","index","currentItem","_items","_endUpdateCore","changes","_changes","isUpdateSelection","every","map","reduce","a","b","concat","removedKeys","contextMenu","_contextMenuPrepared","event","originalEvent","views","add","_updateSelectAllValue","$element","element","$editor","find","selectAllValue","hasSelection","isVisible","isEmpty","dxCheckBox","$container","isEmptyData","groupElement","appendTo","setAria","format","createEditor","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","_e$event","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","stopPropagation","_createRow","_rowClick","isSelectionDisabled","isClickableElement","$target","isCommandSelect","_renderCore","isCheckBoxesHidden"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport gridCore from \"../data_grid/ui.data_grid.core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    touch\r\n} from \"../../core/utils/support\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport Selection from \"../selection/selection\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport errors from \"../widget/ui.errors\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_SELECTION_CLASS = \"dx-selection\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nvar SELECTION_MODE = \"selection.mode\";\r\nvar processLongTap = function(that, dxEvent) {\r\n    var selectionController = that.getController(\"selection\");\r\n    var rowsView = that.getView(\"rowsView\");\r\n    var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\r\n    var rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nvar SelectionController = gridCore.Controller.inherit(function() {\r\n    var selectionCellTemplate = (container, options) => {\r\n        var component = options.component;\r\n        var rowsView = component.getView(\"rowsView\");\r\n        if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n            options.value = component.isRowSelected(options.row.key)\r\n        }\r\n        rowsView.renderSelectCheckBoxContainer($(container), options)\r\n    };\r\n    var selectionHeaderTemplate = (container, options) => {\r\n        var column = options.column;\r\n        var $cellElement = $(container);\r\n        var columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n        $cellElement.addClass(EDITOR_CELL_CLASS);\r\n        columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n    };\r\n    return {\r\n        init: function() {\r\n            var {\r\n                deferred: deferred,\r\n                selectAllMode: selectAllMode,\r\n                mode: mode\r\n            } = this.option(\"selection\") || {};\r\n            if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\r\n                errors.log(\"W1018\")\r\n            }\r\n            this._dataController = this.getController(\"data\");\r\n            this._selectionMode = mode;\r\n            this._isSelectionWithCheckboxes = false;\r\n            this._selection = this._createSelection();\r\n            this._updateSelectColumn();\r\n            this.createAction(\"onSelectionChanged\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            })\r\n        },\r\n        _getSelectionConfig: function() {\r\n            var dataController = this._dataController;\r\n            var selectionOptions = this.option(\"selection\") || {};\r\n            var deferred = selectionOptions.deferred;\r\n            return {\r\n                selectedKeys: this.option(\"selectedRowKeys\"),\r\n                mode: this._selectionMode,\r\n                deferred: deferred,\r\n                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n                selectionFilter: this.option(\"selectionFilter\"),\r\n                ignoreDisabledItems: true,\r\n                key: function() {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.key()\r\n                },\r\n                keyOf: function(item) {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item)\r\n                },\r\n                dataFields: function() {\r\n                    var _dataController$dataS;\r\n                    return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select()\r\n                },\r\n                load: function(options) {\r\n                    var _dataController$dataS2;\r\n                    return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || (new Deferred).resolve([])\r\n                },\r\n                plainItems: function(allItems) {\r\n                    return dataController.items(allItems)\r\n                },\r\n                isItemSelected: function(item) {\r\n                    return item.selected\r\n                },\r\n                isSelectableItem: function(item) {\r\n                    return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow\r\n                },\r\n                getItemData: function(item) {\r\n                    return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item\r\n                },\r\n                filter: function() {\r\n                    return dataController.getCombinedFilter(deferred)\r\n                },\r\n                totalCount: () => dataController.totalCount(),\r\n                onSelectionChanged: this._updateSelectedItems.bind(this)\r\n            }\r\n        },\r\n        _updateSelectColumn: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var isSelectColumnVisible = this.isSelectColumnVisible();\r\n            columnsController.addCommandColumn({\r\n                type: \"selection\",\r\n                command: \"select\",\r\n                visible: isSelectColumnVisible,\r\n                visibleIndex: -1,\r\n                dataType: \"boolean\",\r\n                alignment: \"center\",\r\n                cssClass: COMMAND_SELECT_CLASS,\r\n                width: \"auto\",\r\n                cellTemplate: selectionCellTemplate,\r\n                headerCellTemplate: selectionHeaderTemplate\r\n            });\r\n            columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n        },\r\n        _createSelection: function() {\r\n            var options = this._getSelectionConfig();\r\n            return new Selection(options)\r\n        },\r\n        _fireSelectionChanged: function(options) {\r\n            if (options) {\r\n                this.executeAction(\"onSelectionChanged\", options)\r\n            }\r\n            var argument = this.option(\"selection.deferred\") ? {\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            } : {\r\n                selectedRowKeys: this.option(\"selectedRowKeys\")\r\n            };\r\n            this.selectionChanged.fire(argument)\r\n        },\r\n        _updateCheckboxesState: function(options) {\r\n            var isDeferredMode = options.isDeferredMode;\r\n            var selectionFilter = options.selectionFilter;\r\n            var selectedItemKeys = options.selectedItemKeys;\r\n            var removedItemKeys = options.removedItemKeys;\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                if (isDeferredMode ? selectionFilter && function(that, selectionFilter) {\r\n                        var keyIndex = 0;\r\n                        var store = that._dataController.store();\r\n                        var key = store && store.key();\r\n                        var isComplexKey = Array.isArray(key);\r\n                        if (!selectionFilter.length) {\r\n                            return false\r\n                        }\r\n                        if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n                            for (var i = 0; i < selectionFilter.length; i++) {\r\n                                if (Array.isArray(selectionFilter[i])) {\r\n                                    if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                                        return true\r\n                                    }\r\n                                    keyIndex++\r\n                                }\r\n                            }\r\n                            return false\r\n                        }\r\n                        return key !== selectionFilter[0]\r\n                    }(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                    this.startSelectionWithCheckboxes()\r\n                } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                    this.stopSelectionWithCheckboxes()\r\n                }\r\n            }\r\n        },\r\n        _updateSelectedItems: function(args) {\r\n            var selectionChangedOptions;\r\n            var isDeferredMode = this.option(\"selection.deferred\");\r\n            var selectionFilter = this._selection.selectionFilter();\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            if (!items) {\r\n                return\r\n            }\r\n            var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\r\n            var changedItemIndexes = this.getChangedItemIndexes(items);\r\n            this._updateCheckboxesState({\r\n                selectedItemKeys: args.selectedItemKeys,\r\n                removedItemKeys: args.removedItemKeys,\r\n                selectionFilter: selectionFilter,\r\n                isDeferredMode: isDeferredMode\r\n            });\r\n            if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\r\n                dataController.updateItems({\r\n                    changeType: \"updateSelection\",\r\n                    itemIndexes: changedItemIndexes\r\n                })\r\n            }\r\n            if (isDeferredMode) {\r\n                this.option(\"selectionFilter\", selectionFilter);\r\n                selectionChangedOptions = {}\r\n            } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                this._selectedItemsInternalChange = true;\r\n                this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n                this._selectedItemsInternalChange = false;\r\n                selectionChangedOptions = {\r\n                    selectedRowsData: args.selectedItems.slice(0),\r\n                    selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                    currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                    currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n                }\r\n            }\r\n            this._fireSelectionChanged(selectionChangedOptions)\r\n        },\r\n        getChangedItemIndexes: function(items) {\r\n            var itemIndexes = [];\r\n            var isDeferredSelection = this.option(\"selection.deferred\");\r\n            for (var i = 0, length = items.length; i < length; i++) {\r\n                var row = items[i];\r\n                var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n                if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                    itemIndexes.push(i)\r\n                }\r\n            }\r\n            return itemIndexes\r\n        },\r\n        callbackNames: function() {\r\n            return [\"selectionChanged\"]\r\n        },\r\n        optionChanged: function(args) {\r\n            this.callBase(args);\r\n            switch (args.name) {\r\n                case \"selection\":\r\n                    var oldSelectionMode = this._selectionMode;\r\n                    this.init();\r\n                    if (\"selection.showCheckBoxesMode\" !== args.fullName) {\r\n                        var selectionMode = this._selectionMode;\r\n                        var selectedRowKeys = this.option(\"selectedRowKeys\");\r\n                        if (oldSelectionMode !== selectionMode) {\r\n                            if (\"single\" === selectionMode) {\r\n                                if (selectedRowKeys.length > 1) {\r\n                                    selectedRowKeys = [selectedRowKeys[0]]\r\n                                }\r\n                            } else if (\"multiple\" !== selectionMode) {\r\n                                selectedRowKeys = []\r\n                            }\r\n                        }\r\n                        this.selectRows(selectedRowKeys).always(() => {\r\n                            this._fireSelectionChanged()\r\n                        })\r\n                    }\r\n                    this.getController(\"columns\").updateColumns();\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectionFilter\":\r\n                    this._selection.selectionFilter(args.value);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectedRowKeys\":\r\n                    var value = args.value || [];\r\n                    if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\r\n                        this.selectRows(value)\r\n                    }\r\n                    args.handled = true\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"]\r\n        },\r\n        isRowSelected: function(arg) {\r\n            return this._selection.isItemSelected(arg)\r\n        },\r\n        isSelectColumnVisible: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        _isOnePageSelectAll: function() {\r\n            return \"page\" === this.option(\"selection.selectAllMode\")\r\n        },\r\n        isSelectAll: function() {\r\n            return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n        },\r\n        selectAll: function() {\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                this.startSelectionWithCheckboxes()\r\n            }\r\n            return this._selection.selectAll(this._isOnePageSelectAll())\r\n        },\r\n        deselectAll: function() {\r\n            return this._selection.deselectAll(this._isOnePageSelectAll())\r\n        },\r\n        clearSelection: function() {\r\n            return this.selectedItemKeys([])\r\n        },\r\n        refresh: function() {\r\n            var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n            if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n                return this.selectedItemKeys(selectedRowKeys)\r\n            }\r\n            return (new Deferred).resolve().promise()\r\n        },\r\n        selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n        },\r\n        getSelectedRowKeys: function() {\r\n            return this._selection.getSelectedItemKeys()\r\n        },\r\n        selectRows: function(keys, preserve) {\r\n            return this.selectedItemKeys(keys, preserve)\r\n        },\r\n        deselectRows: function(keys) {\r\n            return this.selectedItemKeys(keys, true, true)\r\n        },\r\n        selectRowsByIndexes: function(indexes) {\r\n            var items = this._dataController.items();\r\n            var keys = [];\r\n            if (!Array.isArray(indexes)) {\r\n                indexes = Array.prototype.slice.call(arguments, 0)\r\n            }\r\n            each(indexes, (function() {\r\n                var item = items[this];\r\n                if (item && \"data\" === item.rowType) {\r\n                    keys.push(item.key)\r\n                }\r\n            }));\r\n            return this.selectRows(keys)\r\n        },\r\n        getSelectedRowsData: function() {\r\n            return this._selection.getSelectedItems()\r\n        },\r\n        changeItemSelection: function(itemIndex, keys) {\r\n            keys = keys || {};\r\n            if (this.isSelectionWithCheckboxes()) {\r\n                keys.control = true\r\n            }\r\n            return this._selection.changeItemSelection(itemIndex, keys)\r\n        },\r\n        focusedItemIndex: function(itemIndex) {\r\n            if (isDefined(itemIndex)) {\r\n                this._selection._focusedItemIndex = itemIndex\r\n            } else {\r\n                return this._selection._focusedItemIndex\r\n            }\r\n        },\r\n        isSelectionWithCheckboxes: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        startSelectionWithCheckboxes: function() {\r\n            if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\r\n                this._isSelectionWithCheckboxes = true;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        stopSelectionWithCheckboxes: function() {\r\n            if (this._isSelectionWithCheckboxes) {\r\n                this._isSelectionWithCheckboxes = false;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}());\r\nexport var selectionModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            selection: {\r\n                mode: \"none\",\r\n                showCheckBoxesMode: \"onClick\",\r\n                allowSelectAll: true,\r\n                selectAllMode: \"allPages\",\r\n                maxFilterLengthInRequest: 1500,\r\n                deferred: false\r\n            },\r\n            selectionFilter: [],\r\n            selectedRowKeys: []\r\n        }\r\n    },\r\n    controllers: {\r\n        selection: SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isDeferredMode = this.option(\"selection.deferred\");\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isDeferredMode) {\r\n                        selectionController._updateCheckboxesState({\r\n                            isDeferredMode: true,\r\n                            selectionFilter: this.option(\"selectionFilter\")\r\n                        })\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    return that.callBase().done((function() {\r\n                        that.getController(\"selection\").refresh()\r\n                    }))\r\n                },\r\n                _processDataItem: function(item, options) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var hasSelectColumn = selectionController.isSelectColumnVisible();\r\n                    var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n                    var dataItem = this.callBase.apply(this, arguments);\r\n                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n                    if (hasSelectColumn && dataItem.values) {\r\n                        for (var i = 0; i < options.visibleColumns.length; i++) {\r\n                            if (\"select\" === options.visibleColumns[i].command) {\r\n                                dataItem.values[i] = dataItem.isSelected;\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem\r\n                },\r\n                refresh: function(options) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    this.callBase.apply(this, arguments).done((function() {\r\n                        if (!options || options.selection) {\r\n                            that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            d.resolve()\r\n                        }\r\n                    })).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\r\n                        this.getController(\"selection\").focusedItemIndex(-1)\r\n                    }\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateSelection\" === change.changeType) {\r\n                        change.items.forEach((item, index) => {\r\n                            var currentItem = this._items[index];\r\n                            if (currentItem) {\r\n                                currentItem.isSelected = item.isSelected;\r\n                                currentItem.values = item.values\r\n                            }\r\n                        });\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\r\n                    if (isUpdateSelection) {\r\n                        var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\r\n                        this._changes = [{\r\n                            changeType: \"updateSelection\",\r\n                            itemIndexes: itemIndexes\r\n                        }]\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                push: function(changes) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\r\n                    removedKeys.length && this.getController(\"selection\").deselectRows(removedKeys)\r\n                }\r\n            },\r\n            contextMenu: {\r\n                _contextMenuPrepared: function(options) {\r\n                    var dxEvent = options.event;\r\n                    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n                        return\r\n                    }\r\n                    processLongTap(this, dxEvent)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this))\r\n                },\r\n                _updateSelectAllValue: function() {\r\n                    var $element = this.element();\r\n                    var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\r\n                    if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\r\n                        var selectAllValue = this.getController(\"selection\").isSelectAll();\r\n                        var hasSelection = false !== selectAllValue;\r\n                        var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\r\n                        $editor.dxCheckBox(\"instance\").option({\r\n                            visible: isVisible,\r\n                            value: selectAllValue\r\n                        })\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (!e || \"refresh\" === e.changeType) {\r\n                        this._updateSelectAllValue()\r\n                    }\r\n                },\r\n                _renderSelectAllCheckBox: function($container, column) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var isEmptyData = that.getController(\"data\").isEmpty();\r\n                    var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\r\n                    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), $container);\r\n                    that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\r\n                        parentType: \"headerRow\",\r\n                        dataType: \"boolean\",\r\n                        value: selectionController.isSelectAll(),\r\n                        editorOptions: {\r\n                            visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\r\n                        },\r\n                        tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n                        setValue: function(value, e) {\r\n                            var allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                            e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                            if (!e.event || selectionController.isSelectAll() === value) {\r\n                                return\r\n                            }\r\n                            if (e.value && !allowSelectAll) {\r\n                                e.component.option(\"value\", false)\r\n                            } else {\r\n                                e.value ? selectionController.selectAll() : selectionController.deselectAll()\r\n                            }\r\n                            e.event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachSelectAllCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var event = e.event;\r\n                        if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                            eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName)\r\n                        }\r\n                        event.preventDefault()\r\n                    })))\r\n                }\r\n            },\r\n            rowsView: {\r\n                renderSelectCheckBoxContainer: function($container, options) {\r\n                    if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n                        $container.addClass(EDITOR_CELL_CLASS);\r\n                        this._attachCheckBoxClickEvent($container);\r\n                        this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), $container);\r\n                        this._renderSelectCheckBox($container, options)\r\n                    } else {\r\n                        gridCoreUtils.setEmptyText($container)\r\n                    }\r\n                },\r\n                _renderSelectCheckBox: function(container, options) {\r\n                    var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\r\n                    this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\r\n                        parentType: \"dataRow\",\r\n                        dataType: \"boolean\",\r\n                        lookup: null,\r\n                        value: options.value,\r\n                        setValue: function(value, e) {\r\n                            var _e$event;\r\n                            if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\r\n                                eventsEngine.trigger(e.element, clickEventName, e)\r\n                            }\r\n                        },\r\n                        row: options.row\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var selectionController = this.getController(\"selection\");\r\n                        var event = e.event;\r\n                        var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\r\n                        if (rowIndex >= 0) {\r\n                            selectionController.startSelectionWithCheckboxes();\r\n                            selectionController.changeItemSelection(rowIndex, {\r\n                                shift: event.shiftKey\r\n                            });\r\n                            if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                                this.getController(\"data\").updateItems({\r\n                                    changeType: \"updateSelection\",\r\n                                    itemIndexes: [rowIndex]\r\n                                })\r\n                            }\r\n                        }\r\n                    })))\r\n                },\r\n                _update: function(change) {\r\n                    var that = this;\r\n                    var tableElements = that.getTableElements();\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        if (tableElements.length > 0) {\r\n                            each(tableElements, (function(_, tableElement) {\r\n                                each(change.itemIndexes || [], (function(_, index) {\r\n                                    var $row;\r\n                                    if (change.items[index]) {\r\n                                        $row = that._getRowElements($(tableElement)).eq(index);\r\n                                        if ($row.length) {\r\n                                            var isSelected = change.items[index].isSelected;\r\n                                            $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\r\n                                            that.setAria(\"selected\", isSelected, $row)\r\n                                        }\r\n                                    }\r\n                                }))\r\n                            }));\r\n                            that._updateCheckboxesClass()\r\n                        }\r\n                    } else {\r\n                        that.callBase(change)\r\n                    }\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var selectionMode = that.option(\"selection.mode\");\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (\"none\" !== selectionMode) {\r\n                        if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\r\n                            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction((function(e) {\r\n                                processLongTap(that.component, e.event);\r\n                                e.event.stopPropagation()\r\n                            })))\r\n                        }\r\n                        eventsEngine.on($table, \"mousedown selectstart\", that.createAction((function(e) {\r\n                            var event = e.event;\r\n                            if (event.shiftKey) {\r\n                                event.preventDefault()\r\n                            }\r\n                        })))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isSelected = !!row.isSelected;\r\n                        if (isSelected) {\r\n                            $row.addClass(ROW_SELECTION_CLASS)\r\n                        }\r\n                        this.setAria(\"selected\", isSelected, $row)\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowClick: function(e) {\r\n                    var dxEvent = e.event;\r\n                    var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\r\n                    if (!this.isClickableElement($(dxEvent.target))) {\r\n                        if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\r\n                            if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\r\n                                    control: isCommandKeyPressed(dxEvent),\r\n                                    shift: dxEvent.shiftKey\r\n                                })) {\r\n                                dxEvent.preventDefault();\r\n                                e.handled = true\r\n                            }\r\n                        }\r\n                        this.callBase(e)\r\n                    }\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\r\n                    return !!isCommandSelect\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateCheckboxesClass()\r\n                },\r\n                _updateCheckboxesClass: function() {\r\n                    var tableElements = this.getTableElements();\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\r\n                    each(tableElements, (function(_, tableElement) {\r\n                        $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n                    }))\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}