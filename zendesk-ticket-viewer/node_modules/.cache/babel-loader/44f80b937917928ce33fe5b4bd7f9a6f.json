{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/chart_components/zoom_and_pan.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeEnum, getVizRangeObject } from \"../core/utils\";\nimport { name as wheelEvent } from \"../../events/core/wheel\";\nimport * as transformEvents from \"../../events/transform\";\nimport { start as dragEventStart, move as dragEventMove, end as dragEventEnd } from \"../../events/drag\";\nvar EVENTS_NS = \".zoomAndPanNS\";\nvar DRAG_START_EVENT_NAME = dragEventStart + EVENTS_NS;\nvar DRAG_EVENT_NAME = dragEventMove + EVENTS_NS;\nvar DRAG_END_EVENT_NAME = dragEventEnd + EVENTS_NS;\nvar PINCH_START_EVENT_NAME = transformEvents.pinchstart + EVENTS_NS;\nvar PINCH_EVENT_NAME = transformEvents.pinch + EVENTS_NS;\nvar PINCH_END_EVENT_NAME = transformEvents.pinchend + EVENTS_NS;\nvar SCROLL_BAR_START_EVENT_NAME = \"dxc-scroll-start\" + EVENTS_NS;\nvar SCROLL_BAR_MOVE_EVENT_NAME = \"dxc-scroll-move\" + EVENTS_NS;\nvar SCROLL_BAR_END_EVENT_NAME = \"dxc-scroll-end\" + EVENTS_NS;\nvar GESTURE_TIMEOUT = 300;\nvar MIN_DRAG_DELTA = 5;\nvar _min = Math.min;\nvar _max = Math.max;\nvar _abs = Math.abs;\n\nfunction canvasToRect(canvas) {\n  return {\n    x: canvas.left,\n    y: canvas.top,\n    width: canvas.width - canvas.left - canvas.right,\n    height: canvas.height - canvas.top - canvas.bottom\n  };\n}\n\nfunction checkCoords(rect, coords) {\n  var x = coords.x;\n  var y = coords.y;\n  return x >= rect.x && x <= rect.width + rect.x && y >= rect.y && y <= rect.height + rect.y;\n}\n\nfunction sortAxes(axes, onlyAxisToNotify) {\n  if (onlyAxisToNotify) {\n    axes = axes.sort((a, b) => {\n      if (a === onlyAxisToNotify) {\n        return -1;\n      }\n\n      if (b === onlyAxisToNotify) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  return axes;\n}\n\nfunction isNotEmptyAxisBusinessRange(axis) {\n  return !axis.getTranslator().getBusinessRange().isEmpty();\n}\n\nfunction axisZoom(axis, onlyAxisToNotify, getRange, getParameters, actionField, scale, e) {\n  var silent = onlyAxisToNotify && axis !== onlyAxisToNotify;\n  var range = getRange(axis);\n  var {\n    stopInteraction: stopInteraction,\n    correctedRange: correctedRange\n  } = axis.checkZoomingLowerLimitOvercome(actionField, scale, range);\n  var result = axis.handleZooming(stopInteraction ? null : correctedRange, getParameters(silent), e, actionField);\n  stopInteraction && axis.handleZoomEnd();\n  return {\n    stopInteraction: stopInteraction,\n    result: result\n  };\n}\n\nexport default {\n  name: \"zoom_and_pan\",\n  init: function () {\n    var chart = this;\n    var renderer = this._renderer;\n\n    function cancelEvent(e) {\n      if (e.originalEvent) {\n        cancelEvent(e.originalEvent);\n      }\n\n      if (false !== e.cancelable) {\n        e.cancel = true;\n      }\n    }\n\n    function startAxesViewportChanging(zoomAndPan, actionField, e) {\n      var options = zoomAndPan.options;\n      var actionData = zoomAndPan.actionData;\n      var axes = [];\n\n      if (options.argumentAxis[actionField]) {\n        axes.push(chart.getArgumentAxis());\n      }\n\n      if (options.valueAxis[actionField]) {\n        axes = axes.concat(actionData.valueAxes);\n      }\n\n      axes.reduce((isPrevented, axis) => {\n        if (isPrevented) {\n          return isPrevented;\n        }\n\n        if (isNotEmptyAxisBusinessRange(axis)) {\n          return axis.handleZooming(null, {\n            end: true\n          }, e, actionField).isPrevented;\n        }\n\n        return isPrevented;\n      }, false) && cancelEvent(e);\n    }\n\n    function axesViewportChanging(zoomAndPan, actionField, e, offsetCalc, centerCalc) {\n      function zoomAxes(axes, criteria, coordField, e, actionData) {\n        var zoom = {\n          zoomed: false\n        };\n        criteria && axes.filter(isNotEmptyAxisBusinessRange).forEach(axis => {\n          var options = axis.getOptions();\n          var viewport = axis.visualRange();\n          var scale = axis.getTranslator().getEventScale(e);\n          var translate = -offsetCalc(e, actionData, coordField, scale);\n          zoom = extend(true, zoom, axis.getTranslator().zoom(translate, scale, axis.getZoomBounds()));\n          var range = axis.adjustRange(getVizRangeObject([zoom.min, zoom.max]));\n          var {\n            stopInteraction: stopInteraction,\n            correctedRange: correctedRange\n          } = axis.checkZoomingLowerLimitOvercome(actionField, scale, range);\n\n          if (!isDefined(viewport) || viewport.startValue.valueOf() !== correctedRange.startValue.valueOf() || viewport.endValue.valueOf() !== correctedRange.endValue.valueOf()) {\n            axis.handleZooming(stopInteraction ? null : correctedRange, {\n              start: true,\n              end: true\n            }, e, actionField);\n\n            if (!stopInteraction) {\n              zoom.zoomed = true;\n              zoom.deltaTranslate = translate - zoom.translate;\n            }\n          } else if (\"touch\" === e.pointerType && \"discrete\" === options.type) {\n            var isMinPosition = axis.isExtremePosition(false);\n            var isMaxPosition = axis.isExtremePosition(true);\n            var zoomInEnabled = scale > 1 && !stopInteraction;\n            var zoomOutEnabled = scale < 1 && (!isMinPosition || !isMaxPosition);\n            var panningEnabled = 1 === scale && !(isMinPosition && (translate < 0 && !options.inverted || translate > 0 && options.inverted) || isMaxPosition && (translate > 0 && !options.inverted || translate < 0 && options.inverted));\n            zoom.enabled = zoomInEnabled || zoomOutEnabled || panningEnabled;\n          }\n        });\n        return zoom;\n      }\n\n      function storeOffset(e, actionData, zoom, coordField) {\n        if (zoom.zoomed) {\n          actionData.offset[coordField] = (e.offset ? e.offset[coordField] : actionData.offset[coordField]) + zoom.deltaTranslate;\n        }\n      }\n\n      function storeCenter(center, actionData, zoom, coordField) {\n        if (zoom.zoomed) {\n          actionData.center[coordField] = center[coordField] + zoom.deltaTranslate;\n        }\n      }\n\n      var rotated = chart.option(\"rotated\");\n      var actionData = zoomAndPan.actionData;\n      var options = zoomAndPan.options;\n      var argZoom = {};\n      var valZoom = {};\n\n      if (!actionData.fallback) {\n        argZoom = zoomAxes(chart._argumentAxes, options.argumentAxis[actionField], rotated ? \"y\" : \"x\", e, actionData);\n        valZoom = zoomAxes(actionData.valueAxes, options.valueAxis[actionField], rotated ? \"x\" : \"y\", e, actionData);\n\n        chart._requestChange([\"VISUAL_RANGE\"]);\n\n        storeOffset(e, actionData, argZoom, rotated ? \"y\" : \"x\");\n        storeOffset(e, actionData, valZoom, rotated ? \"x\" : \"y\");\n      }\n\n      var center = centerCalc(e);\n      storeCenter(center, actionData, argZoom, rotated ? \"y\" : \"x\");\n      storeCenter(center, actionData, valZoom, rotated ? \"x\" : \"y\");\n\n      if (!argZoom.zoomed && !valZoom.zoomed) {\n        actionData.center = center;\n      }\n\n      return argZoom.zoomed || valZoom.zoomed || actionData.fallback || argZoom.enabled || valZoom.enabled;\n    }\n\n    function finishAxesViewportChanging(zoomAndPan, actionField, e, offsetCalc) {\n      function zoomAxes(axes, criteria, coordField, actionData, onlyAxisToNotify) {\n        var zoomStarted = false;\n        var scale = e.scale || 1;\n\n        var getRange = axis => {\n          var zoom = axis.getTranslator().zoom(-offsetCalc(e, actionData, coordField, scale), scale, axis.getZoomBounds());\n          return {\n            startValue: zoom.min,\n            endValue: zoom.max\n          };\n        };\n\n        var getParameters = silent => ({\n          start: true,\n          end: silent\n        });\n\n        criteria && axes.forEach(axis => {\n          zoomStarted = !axisZoom(axis, onlyAxisToNotify, getRange, getParameters, actionField, scale, e).stopInteraction;\n        });\n        return zoomStarted;\n      }\n\n      var rotated = chart.option(\"rotated\");\n      var actionData = zoomAndPan.actionData;\n      var options = zoomAndPan.options;\n      var zoomStarted = true;\n\n      if (actionData.fallback) {\n        zoomStarted &= zoomAxes(chart._argumentAxes, options.argumentAxis[actionField], rotated ? \"y\" : \"x\", actionData, chart.getArgumentAxis());\n        zoomStarted |= zoomAxes(actionData.valueAxes, options.valueAxis[actionField], rotated ? \"x\" : \"y\", actionData);\n      } else {\n        var axes = [];\n\n        if (options.argumentAxis[actionField]) {\n          axes.push(chart.getArgumentAxis());\n        }\n\n        if (options.valueAxis[actionField]) {\n          axes = axes.concat(actionData.valueAxes);\n        }\n\n        axes.filter(isNotEmptyAxisBusinessRange).forEach(axis => {\n          axis.handleZooming(null, {\n            start: true\n          }, e, actionField);\n        });\n        zoomStarted = axes.length;\n      }\n\n      zoomStarted && chart._requestChange([\"VISUAL_RANGE\"]);\n    }\n\n    function prepareActionData(coords, action) {\n      var axes = chart._argumentAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords));\n\n      return {\n        fallback: chart._lastRenderingTime > GESTURE_TIMEOUT,\n        cancel: !axes.length || !isDefined(action),\n        action: action,\n        curAxisRect: axes.length && canvasToRect(axes[0].getCanvas()),\n        valueAxes: axes.length && chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords)),\n        offset: {\n          x: 0,\n          y: 0\n        },\n        center: coords,\n        startCenter: coords\n      };\n    }\n\n    function getPointerCoord(rect, e) {\n      var rootOffset = renderer.getRootOffset();\n      return {\n        x: _min(_max(e.pageX - rootOffset.left, rect.x), rect.width + rect.x),\n        y: _min(_max(e.pageY - rootOffset.top, rect.y), rect.height + rect.y)\n      };\n    }\n\n    function calcCenterForPinch(e) {\n      var rootOffset = renderer.getRootOffset();\n      var x1 = e.pointers[0].pageX;\n      var x2 = e.pointers[1].pageX;\n      var y1 = e.pointers[0].pageY;\n      var y2 = e.pointers[1].pageY;\n      return {\n        x: _min(x1, x2) + _abs(x2 - x1) / 2 - rootOffset.left,\n        y: _min(y1, y2) + _abs(y2 - y1) / 2 - rootOffset.top\n      };\n    }\n\n    function calcCenterForDrag(e) {\n      var rootOffset = renderer.getRootOffset();\n      return {\n        x: e.pageX - rootOffset.left,\n        y: e.pageY - rootOffset.top\n      };\n    }\n\n    function calcOffsetForDrag(e, actionData, coordField) {\n      return e.offset[coordField] - actionData.offset[coordField];\n    }\n\n    function preventDefaults(e) {\n      if (false !== e.cancelable) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      chart._stopCurrentHandling();\n    }\n\n    var zoomAndPan = {\n      dragStartHandler: function (e) {\n        var options = zoomAndPan.options;\n        var isTouch = \"touch\" === e.pointerType;\n        var wantPan = options.argumentAxis.pan || options.valueAxis.pan;\n        var wantZoom = options.argumentAxis.zoom || options.valueAxis.zoom;\n        var panKeyPressed = isDefined(options.panKey) && e[normalizeEnum(options.panKey) + \"Key\"];\n        var dragToZoom = options.dragToZoom;\n        var action;\n        e._cancelPreventDefault = true;\n\n        if (isTouch) {\n          if (options.allowTouchGestures && wantPan) {\n            var cancelPanning = !zoomAndPan.panningVisualRangeEnabled() || zoomAndPan.skipEvent;\n            action = cancelPanning ? null : \"pan\";\n          }\n        } else if (dragToZoom && wantPan && panKeyPressed) {\n          action = \"pan\";\n        } else if (!dragToZoom && wantPan) {\n          action = \"pan\";\n        } else if (dragToZoom && wantZoom) {\n          action = \"zoom\";\n        }\n\n        var actionData = prepareActionData(calcCenterForDrag(e), action);\n\n        if (actionData.cancel) {\n          zoomAndPan.skipEvent = false;\n\n          if (false !== e.cancelable) {\n            e.cancel = true;\n          }\n\n          return;\n        }\n\n        zoomAndPan.actionData = actionData;\n\n        if (\"zoom\" === action) {\n          actionData.startCoords = getPointerCoord(actionData.curAxisRect, e);\n          actionData.rect = renderer.rect(0, 0, 0, 0).attr(options.dragBoxStyle).append(renderer.root);\n        } else {\n          startAxesViewportChanging(zoomAndPan, \"pan\", e);\n        }\n      },\n      dragHandler: function (e) {\n        var rotated = chart.option(\"rotated\");\n        var options = zoomAndPan.options;\n        var actionData = zoomAndPan.actionData;\n        var isTouch = \"touch\" === e.pointerType;\n        e._cancelPreventDefault = true;\n\n        if (!actionData || isTouch && !zoomAndPan.panningVisualRangeEnabled()) {\n          return;\n        }\n\n        if (\"zoom\" === actionData.action) {\n          preventDefaults(e);\n          var curCanvas = actionData.curAxisRect;\n          var startCoords = actionData.startCoords;\n          var curCoords = getPointerCoord(curCanvas, e);\n          var zoomArg = options.argumentAxis.zoom;\n          var zoomVal = options.valueAxis.zoom;\n          var rect = {\n            x: _min(startCoords.x, curCoords.x),\n            y: _min(startCoords.y, curCoords.y),\n            width: _abs(startCoords.x - curCoords.x),\n            height: _abs(startCoords.y - curCoords.y)\n          };\n\n          if (!zoomArg || !zoomVal) {\n            if (!zoomArg && !rotated || !zoomVal && rotated) {\n              rect.x = curCanvas.x;\n              rect.width = curCanvas.width;\n            } else {\n              rect.y = curCanvas.y;\n              rect.height = curCanvas.height;\n            }\n          }\n\n          actionData.rect.attr(rect);\n        } else if (\"pan\" === actionData.action) {\n          axesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag, e => e.offset);\n          var deltaOffsetY = Math.abs(e.offset.y - actionData.offset.y);\n          var deltaOffsetX = Math.abs(e.offset.x - actionData.offset.x);\n\n          if (isTouch && (deltaOffsetY > MIN_DRAG_DELTA && deltaOffsetY > Math.abs(actionData.offset.x) || deltaOffsetX > MIN_DRAG_DELTA && deltaOffsetX > Math.abs(actionData.offset.y))) {\n            return;\n          }\n\n          preventDefaults(e);\n        }\n      },\n      dragEndHandler: function (e) {\n        var rotated = chart.option(\"rotated\");\n        var options = zoomAndPan.options;\n        var actionData = zoomAndPan.actionData;\n        var isTouch = \"touch\" === e.pointerType;\n        var panIsEmpty = actionData && \"pan\" === actionData.action && !actionData.fallback && 0 === actionData.offset.x && 0 === actionData.offset.y;\n\n        if (!actionData || isTouch && !zoomAndPan.panningVisualRangeEnabled() || panIsEmpty) {\n          return;\n        }\n\n        (!isTouch || !zoomAndPan.actionData.isNative) && preventDefaults(e);\n\n        if (\"zoom\" === actionData.action) {\n          var zoomAxes = (axes, criteria, coordField, startCoords, curCoords, onlyAxisToNotify) => {\n            axes = sortAxes(axes, onlyAxisToNotify);\n            var curCoord = curCoords[coordField];\n            var startCoord = startCoords[coordField];\n            var zoomStarted = false;\n\n            var getParameters = silent => ({\n              start: !!silent,\n              end: !!silent\n            });\n\n            if (criteria && _abs(curCoord - startCoord) > MIN_DRAG_DELTA) {\n              axes.some(axis => {\n                var tr = axis.getTranslator();\n\n                if (tr.getBusinessRange().isEmpty()) {\n                  return;\n                }\n\n                var {\n                  stopInteraction: stopInteraction,\n                  result: result\n                } = axisZoom(axis, onlyAxisToNotify, () => [tr.from(startCoord), tr.from(curCoord)], getParameters, actionData.action, tr.getMinScale(true), e);\n                zoomStarted = !stopInteraction;\n                return onlyAxisToNotify && result.isPrevented;\n              });\n            }\n\n            return zoomStarted;\n          };\n\n          var curCoords = getPointerCoord(actionData.curAxisRect, e);\n          var argumentAxesZoomed = zoomAxes(chart._argumentAxes, options.argumentAxis.zoom, rotated ? \"y\" : \"x\", actionData.startCoords, curCoords, chart.getArgumentAxis());\n          var valueAxesZoomed = zoomAxes(actionData.valueAxes, options.valueAxis.zoom, rotated ? \"x\" : \"y\", actionData.startCoords, curCoords);\n\n          if (valueAxesZoomed || argumentAxesZoomed) {\n            chart._requestChange([\"VISUAL_RANGE\"]);\n          }\n\n          actionData.rect.dispose();\n        } else if (\"pan\" === actionData.action) {\n          finishAxesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag);\n        }\n\n        zoomAndPan.actionData = null;\n      },\n      pinchStartHandler: function (e) {\n        var actionData = prepareActionData(calcCenterForPinch(e), \"zoom\");\n        actionData.isNative = !zoomAndPan.panningVisualRangeEnabled();\n\n        if (actionData.cancel) {\n          cancelEvent(e);\n          return;\n        }\n\n        zoomAndPan.actionData = actionData;\n        startAxesViewportChanging(zoomAndPan, \"zoom\", e);\n      },\n      pinchHandler: function (e) {\n        if (!zoomAndPan.actionData) {\n          return;\n        }\n\n        var viewportChanged = axesViewportChanging(zoomAndPan, \"zoom\", e, (e, actionData, coordField, scale) => calcCenterForPinch(e)[coordField] - actionData.center[coordField] + (actionData.center[coordField] - actionData.center[coordField] * scale), calcCenterForPinch);\n        zoomAndPan.defineTouchBehavior(!viewportChanged, e);\n        !viewportChanged && (zoomAndPan.actionData = null);\n      },\n      pinchEndHandler: function (e) {\n        if (!zoomAndPan.actionData) {\n          return;\n        }\n\n        finishAxesViewportChanging(zoomAndPan, \"zoom\", e, (e, actionData, coordField, scale) => actionData.center[coordField] - actionData.startCenter[coordField] + (actionData.startCenter[coordField] - actionData.startCenter[coordField] * scale));\n        zoomAndPan.actionData = null;\n      },\n      cleanup: function () {\n        renderer.root.off(EVENTS_NS);\n        zoomAndPan.actionData && zoomAndPan.actionData.rect && zoomAndPan.actionData.rect.dispose();\n        zoomAndPan.actionData = null;\n        renderer.root.css({\n          \"touch-action\": \"\",\n          \"-ms-touch-action\": \"\"\n        });\n      },\n      setup: function (options) {\n        zoomAndPan.cleanup();\n\n        if (!options.argumentAxis.pan) {\n          renderer.root.on(SCROLL_BAR_START_EVENT_NAME, cancelEvent);\n        }\n\n        if (options.argumentAxis.none && options.valueAxis.none) {\n          return;\n        }\n\n        zoomAndPan.options = options;\n        var rotated = chart.option(\"rotated\");\n\n        if ((options.argumentAxis.zoom || options.valueAxis.zoom) && options.allowMouseWheel) {\n          renderer.root.on(wheelEvent + EVENTS_NS, function (e) {\n            function zoomAxes(axes, coord, delta, onlyAxisToNotify) {\n              axes = sortAxes(axes, onlyAxisToNotify);\n              var zoomStarted = false;\n\n              var getParameters = silent => ({\n                start: !!silent,\n                end: !!silent\n              });\n\n              axes.some(axis => {\n                var translator = axis.getTranslator();\n\n                if (translator.getBusinessRange().isEmpty()) {\n                  return;\n                }\n\n                var scale = translator.getMinScale(delta > 0);\n                var {\n                  stopInteraction: stopInteraction,\n                  result: result\n                } = axisZoom(axis, onlyAxisToNotify, () => {\n                  var zoom = translator.zoom(-(coord - coord * scale), scale, axis.getZoomBounds());\n                  return {\n                    startValue: zoom.min,\n                    endValue: zoom.max\n                  };\n                }, getParameters, \"zoom\", scale, e);\n                zoomStarted = !stopInteraction;\n                return onlyAxisToNotify && result.isPrevented;\n              });\n              return zoomStarted;\n            }\n\n            var coords = calcCenterForDrag(e);\n            var axesZoomed = false;\n            var targetAxes;\n\n            if (options.valueAxis.zoom) {\n              targetAxes = chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords));\n\n              if (0 === targetAxes.length) {\n                var targetCanvas = chart._valueAxes.reduce((r, axis) => {\n                  if (!r && axis.coordsIn(coords.x, coords.y)) {\n                    r = axis.getCanvas();\n                  }\n\n                  return r;\n                }, null);\n\n                if (targetCanvas) {\n                  targetAxes = chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), {\n                    x: targetCanvas.left,\n                    y: targetCanvas.top\n                  }));\n                }\n              }\n\n              axesZoomed |= zoomAxes(targetAxes, rotated ? coords.x : coords.y, e.delta);\n            }\n\n            if (options.argumentAxis.zoom) {\n              var canZoom = chart._argumentAxes.some(axis => {\n                if (checkCoords(canvasToRect(axis.getCanvas()), coords) || axis.coordsIn(coords.x, coords.y)) {\n                  return true;\n                }\n\n                return false;\n              });\n\n              axesZoomed |= canZoom && zoomAxes(chart._argumentAxes, rotated ? coords.y : coords.x, e.delta, chart.getArgumentAxis());\n            }\n\n            if (axesZoomed) {\n              chart._requestChange([\"VISUAL_RANGE\"]);\n\n              zoomAndPan.panningVisualRangeEnabled(targetAxes) && preventDefaults(e);\n            }\n          });\n        }\n\n        if (options.allowTouchGestures) {\n          if (options.argumentAxis.zoom || options.valueAxis.zoom) {\n            renderer.root.on(PINCH_START_EVENT_NAME, {\n              passive: false\n            }, zoomAndPan.pinchStartHandler).on(PINCH_EVENT_NAME, {\n              passive: false\n            }, zoomAndPan.pinchHandler).on(PINCH_END_EVENT_NAME, zoomAndPan.pinchEndHandler);\n          }\n        }\n\n        renderer.root.on(DRAG_START_EVENT_NAME, {\n          immediate: true,\n          passive: false\n        }, zoomAndPan.dragStartHandler).on(DRAG_EVENT_NAME, {\n          immediate: true,\n          passive: false\n        }, zoomAndPan.dragHandler).on(DRAG_END_EVENT_NAME, zoomAndPan.dragEndHandler);\n\n        if (options.argumentAxis.pan) {\n          renderer.root.on(SCROLL_BAR_START_EVENT_NAME, function (e) {\n            zoomAndPan.actionData = {\n              valueAxes: [],\n              offset: {\n                x: 0,\n                y: 0\n              },\n              center: {\n                x: 0,\n                y: 0\n              }\n            };\n            preventDefaults(e);\n            startAxesViewportChanging(zoomAndPan, \"pan\", e);\n          }).on(SCROLL_BAR_MOVE_EVENT_NAME, function (e) {\n            preventDefaults(e);\n            axesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag, e => e.offset);\n          }).on(SCROLL_BAR_END_EVENT_NAME, function (e) {\n            preventDefaults(e);\n            finishAxesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag);\n            zoomAndPan.actionData = null;\n          });\n        }\n      },\n      defineTouchBehavior: function (isDefault, e) {\n        zoomAndPan.actionData && (zoomAndPan.actionData.isNative = isDefault);\n\n        if (!isDefault) {\n          preventDefaults(e);\n        }\n      },\n      panningVisualRangeEnabled: function (targetAxes) {\n        if (null !== targetAxes && void 0 !== targetAxes && targetAxes.length) {\n          return targetAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true));\n        }\n\n        var enablePanByValueAxis = chart._valueAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true));\n\n        var enablePanByArgumentAxis = chart._argumentAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true));\n\n        return enablePanByValueAxis || enablePanByArgumentAxis;\n      }\n    };\n    this._zoomAndPan = zoomAndPan;\n  },\n  members: {\n    _setupZoomAndPan: function () {\n      this._zoomAndPan.setup(this._themeManager.getOptions(\"zoomAndPan\"));\n    }\n  },\n  dispose: function () {\n    this._zoomAndPan.cleanup();\n  },\n  customize: function (constructor) {\n    constructor.addChange({\n      code: \"ZOOM_AND_PAN\",\n      handler: function () {\n        this._setupZoomAndPan();\n      },\n      isThemeDependent: true,\n      isOptionChange: true,\n      option: \"zoomAndPan\"\n    });\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/chart_components/zoom_and_pan.js"],"names":["isDefined","extend","normalizeEnum","getVizRangeObject","name","wheelEvent","transformEvents","start","dragEventStart","move","dragEventMove","end","dragEventEnd","EVENTS_NS","DRAG_START_EVENT_NAME","DRAG_EVENT_NAME","DRAG_END_EVENT_NAME","PINCH_START_EVENT_NAME","pinchstart","PINCH_EVENT_NAME","pinch","PINCH_END_EVENT_NAME","pinchend","SCROLL_BAR_START_EVENT_NAME","SCROLL_BAR_MOVE_EVENT_NAME","SCROLL_BAR_END_EVENT_NAME","GESTURE_TIMEOUT","MIN_DRAG_DELTA","_min","Math","min","_max","max","_abs","abs","canvasToRect","canvas","x","left","y","top","width","right","height","bottom","checkCoords","rect","coords","sortAxes","axes","onlyAxisToNotify","sort","a","b","isNotEmptyAxisBusinessRange","axis","getTranslator","getBusinessRange","isEmpty","axisZoom","getRange","getParameters","actionField","scale","e","silent","range","stopInteraction","correctedRange","checkZoomingLowerLimitOvercome","result","handleZooming","handleZoomEnd","init","chart","renderer","_renderer","cancelEvent","originalEvent","cancelable","cancel","startAxesViewportChanging","zoomAndPan","options","actionData","argumentAxis","push","getArgumentAxis","valueAxis","concat","valueAxes","reduce","isPrevented","axesViewportChanging","offsetCalc","centerCalc","zoomAxes","criteria","coordField","zoom","zoomed","filter","forEach","getOptions","viewport","visualRange","getEventScale","translate","getZoomBounds","adjustRange","startValue","valueOf","endValue","deltaTranslate","pointerType","type","isMinPosition","isExtremePosition","isMaxPosition","zoomInEnabled","zoomOutEnabled","panningEnabled","inverted","enabled","storeOffset","offset","storeCenter","center","rotated","option","argZoom","valZoom","fallback","_argumentAxes","_requestChange","finishAxesViewportChanging","zoomStarted","length","prepareActionData","action","getCanvas","_lastRenderingTime","curAxisRect","_valueAxes","startCenter","getPointerCoord","rootOffset","getRootOffset","pageX","pageY","calcCenterForPinch","x1","pointers","x2","y1","y2","calcCenterForDrag","calcOffsetForDrag","preventDefaults","preventDefault","stopPropagation","_stopCurrentHandling","dragStartHandler","isTouch","wantPan","pan","wantZoom","panKeyPressed","panKey","dragToZoom","_cancelPreventDefault","allowTouchGestures","cancelPanning","panningVisualRangeEnabled","skipEvent","startCoords","attr","dragBoxStyle","append","root","dragHandler","curCanvas","curCoords","zoomArg","zoomVal","deltaOffsetY","deltaOffsetX","dragEndHandler","panIsEmpty","isNative","curCoord","startCoord","some","tr","from","getMinScale","argumentAxesZoomed","valueAxesZoomed","dispose","pinchStartHandler","pinchHandler","viewportChanged","defineTouchBehavior","pinchEndHandler","cleanup","off","css","setup","on","none","allowMouseWheel","coord","delta","translator","axesZoomed","targetAxes","targetCanvas","r","coordsIn","canZoom","passive","immediate","isDefault","enablePanByValueAxis","enablePanByArgumentAxis","_zoomAndPan","members","_setupZoomAndPan","_themeManager","customize","constructor","addChange","code","handler","isThemeDependent","isOptionChange"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,SADJ,QAEO,uBAFP;AAGA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,aADJ,EAEIC,iBAFJ,QAGO,eAHP;AAIA,SACIC,IAAI,IAAIC,UADZ,QAEO,yBAFP;AAGA,OAAO,KAAKC,eAAZ,MAAiC,wBAAjC;AACA,SACIC,KAAK,IAAIC,cADb,EAEIC,IAAI,IAAIC,aAFZ,EAGIC,GAAG,IAAIC,YAHX,QAIO,mBAJP;AAKA,IAAIC,SAAS,GAAG,eAAhB;AACA,IAAIC,qBAAqB,GAAGN,cAAc,GAAGK,SAA7C;AACA,IAAIE,eAAe,GAAGL,aAAa,GAAGG,SAAtC;AACA,IAAIG,mBAAmB,GAAGJ,YAAY,GAAGC,SAAzC;AACA,IAAII,sBAAsB,GAAGX,eAAe,CAACY,UAAhB,GAA6BL,SAA1D;AACA,IAAIM,gBAAgB,GAAGb,eAAe,CAACc,KAAhB,GAAwBP,SAA/C;AACA,IAAIQ,oBAAoB,GAAGf,eAAe,CAACgB,QAAhB,GAA2BT,SAAtD;AACA,IAAIU,2BAA2B,GAAG,qBAAqBV,SAAvD;AACA,IAAIW,0BAA0B,GAAG,oBAAoBX,SAArD;AACA,IAAIY,yBAAyB,GAAG,mBAAmBZ,SAAnD;AACA,IAAIa,eAAe,GAAG,GAAtB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,GAAhB;AACA,IAAIC,IAAI,GAAGF,IAAI,CAACG,GAAhB;AACA,IAAIC,IAAI,GAAGJ,IAAI,CAACK,GAAhB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAO;AACHC,IAAAA,CAAC,EAAED,MAAM,CAACE,IADP;AAEHC,IAAAA,CAAC,EAAEH,MAAM,CAACI,GAFP;AAGHC,IAAAA,KAAK,EAAEL,MAAM,CAACK,KAAP,GAAeL,MAAM,CAACE,IAAtB,GAA6BF,MAAM,CAACM,KAHxC;AAIHC,IAAAA,MAAM,EAAEP,MAAM,CAACO,MAAP,GAAgBP,MAAM,CAACI,GAAvB,GAA6BJ,MAAM,CAACQ;AAJzC,GAAP;AAMH;;AAED,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;AAC/B,MAAIV,CAAC,GAAGU,MAAM,CAACV,CAAf;AACA,MAAIE,CAAC,GAAGQ,MAAM,CAACR,CAAf;AACA,SAAOF,CAAC,IAAIS,IAAI,CAACT,CAAV,IAAeA,CAAC,IAAIS,IAAI,CAACL,KAAL,GAAaK,IAAI,CAACT,CAAtC,IAA2CE,CAAC,IAAIO,IAAI,CAACP,CAArD,IAA0DA,CAAC,IAAIO,IAAI,CAACH,MAAL,GAAcG,IAAI,CAACP,CAAzF;AACH;;AAED,SAASS,QAAT,CAAkBC,IAAlB,EAAwBC,gBAAxB,EAA0C;AACtC,MAAIA,gBAAJ,EAAsB;AAClBD,IAAAA,IAAI,GAAGA,IAAI,CAACE,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,UAAID,CAAC,KAAKF,gBAAV,EAA4B;AACxB,eAAO,CAAC,CAAR;AACH;;AACD,UAAIG,CAAC,KAAKH,gBAAV,EAA4B;AACxB,eAAO,CAAP;AACH;;AACD,aAAO,CAAP;AACH,KARM,CAAP;AASH;;AACD,SAAOD,IAAP;AACH;;AAED,SAASK,2BAAT,CAAqCC,IAArC,EAA2C;AACvC,SAAO,CAACA,IAAI,CAACC,aAAL,GAAqBC,gBAArB,GAAwCC,OAAxC,EAAR;AACH;;AAED,SAASC,QAAT,CAAkBJ,IAAlB,EAAwBL,gBAAxB,EAA0CU,QAA1C,EAAoDC,aAApD,EAAmEC,WAAnE,EAAgFC,KAAhF,EAAuFC,CAAvF,EAA0F;AACtF,MAAIC,MAAM,GAAGf,gBAAgB,IAAIK,IAAI,KAAKL,gBAA1C;AACA,MAAIgB,KAAK,GAAGN,QAAQ,CAACL,IAAD,CAApB;AACA,MAAI;AACAY,IAAAA,eAAe,EAAEA,eADjB;AAEAC,IAAAA,cAAc,EAAEA;AAFhB,MAGAb,IAAI,CAACc,8BAAL,CAAoCP,WAApC,EAAiDC,KAAjD,EAAwDG,KAAxD,CAHJ;AAIA,MAAII,MAAM,GAAGf,IAAI,CAACgB,aAAL,CAAmBJ,eAAe,GAAG,IAAH,GAAUC,cAA5C,EAA4DP,aAAa,CAACI,MAAD,CAAzE,EAAmFD,CAAnF,EAAsFF,WAAtF,CAAb;AACAK,EAAAA,eAAe,IAAIZ,IAAI,CAACiB,aAAL,EAAnB;AACA,SAAO;AACHL,IAAAA,eAAe,EAAEA,eADd;AAEHG,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH;;AACD,eAAe;AACXlE,EAAAA,IAAI,EAAE,cADK;AAEXqE,EAAAA,IAAI,EAAE,YAAW;AACb,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,QAAQ,GAAG,KAAKC,SAApB;;AAEA,aAASC,WAAT,CAAqBb,CAArB,EAAwB;AACpB,UAAIA,CAAC,CAACc,aAAN,EAAqB;AACjBD,QAAAA,WAAW,CAACb,CAAC,CAACc,aAAH,CAAX;AACH;;AACD,UAAI,UAAUd,CAAC,CAACe,UAAhB,EAA4B;AACxBf,QAAAA,CAAC,CAACgB,MAAF,GAAW,IAAX;AACH;AACJ;;AAED,aAASC,yBAAT,CAAmCC,UAAnC,EAA+CpB,WAA/C,EAA4DE,CAA5D,EAA+D;AAC3D,UAAImB,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,UAAIC,UAAU,GAAGF,UAAU,CAACE,UAA5B;AACA,UAAInC,IAAI,GAAG,EAAX;;AACA,UAAIkC,OAAO,CAACE,YAAR,CAAqBvB,WAArB,CAAJ,EAAuC;AACnCb,QAAAA,IAAI,CAACqC,IAAL,CAAUZ,KAAK,CAACa,eAAN,EAAV;AACH;;AACD,UAAIJ,OAAO,CAACK,SAAR,CAAkB1B,WAAlB,CAAJ,EAAoC;AAChCb,QAAAA,IAAI,GAAGA,IAAI,CAACwC,MAAL,CAAYL,UAAU,CAACM,SAAvB,CAAP;AACH;;AACDzC,MAAAA,IAAI,CAAC0C,MAAL,CAAY,CAACC,WAAD,EAAcrC,IAAd,KAAuB;AAC/B,YAAIqC,WAAJ,EAAiB;AACb,iBAAOA,WAAP;AACH;;AACD,YAAItC,2BAA2B,CAACC,IAAD,CAA/B,EAAuC;AACnC,iBAAOA,IAAI,CAACgB,aAAL,CAAmB,IAAnB,EAAyB;AAC5B5D,YAAAA,GAAG,EAAE;AADuB,WAAzB,EAEJqD,CAFI,EAEDF,WAFC,EAEY8B,WAFnB;AAGH;;AACD,eAAOA,WAAP;AACH,OAVD,EAUG,KAVH,KAUaf,WAAW,CAACb,CAAD,CAVxB;AAWH;;AAED,aAAS6B,oBAAT,CAA8BX,UAA9B,EAA0CpB,WAA1C,EAAuDE,CAAvD,EAA0D8B,UAA1D,EAAsEC,UAAtE,EAAkF;AAC9E,eAASC,QAAT,CAAkB/C,IAAlB,EAAwBgD,QAAxB,EAAkCC,UAAlC,EAA8ClC,CAA9C,EAAiDoB,UAAjD,EAA6D;AACzD,YAAIe,IAAI,GAAG;AACPC,UAAAA,MAAM,EAAE;AADD,SAAX;AAGAH,QAAAA,QAAQ,IAAIhD,IAAI,CAACoD,MAAL,CAAY/C,2BAAZ,EAAyCgD,OAAzC,CAAiD/C,IAAI,IAAI;AACjE,cAAI4B,OAAO,GAAG5B,IAAI,CAACgD,UAAL,EAAd;AACA,cAAIC,QAAQ,GAAGjD,IAAI,CAACkD,WAAL,EAAf;AACA,cAAI1C,KAAK,GAAGR,IAAI,CAACC,aAAL,GAAqBkD,aAArB,CAAmC1C,CAAnC,CAAZ;AACA,cAAI2C,SAAS,GAAG,CAACb,UAAU,CAAC9B,CAAD,EAAIoB,UAAJ,EAAgBc,UAAhB,EAA4BnC,KAA5B,CAA3B;AACAoC,UAAAA,IAAI,GAAGlG,MAAM,CAAC,IAAD,EAAOkG,IAAP,EAAa5C,IAAI,CAACC,aAAL,GAAqB2C,IAArB,CAA0BQ,SAA1B,EAAqC5C,KAArC,EAA4CR,IAAI,CAACqD,aAAL,EAA5C,CAAb,CAAb;AACA,cAAI1C,KAAK,GAAGX,IAAI,CAACsD,WAAL,CAAiB1G,iBAAiB,CAAC,CAACgG,IAAI,CAACrE,GAAN,EAAWqE,IAAI,CAACnE,GAAhB,CAAD,CAAlC,CAAZ;AACA,cAAI;AACAmC,YAAAA,eAAe,EAAEA,eADjB;AAEAC,YAAAA,cAAc,EAAEA;AAFhB,cAGAb,IAAI,CAACc,8BAAL,CAAoCP,WAApC,EAAiDC,KAAjD,EAAwDG,KAAxD,CAHJ;;AAIA,cAAI,CAAClE,SAAS,CAACwG,QAAD,CAAV,IAAwBA,QAAQ,CAACM,UAAT,CAAoBC,OAApB,OAAkC3C,cAAc,CAAC0C,UAAf,CAA0BC,OAA1B,EAA1D,IAAiGP,QAAQ,CAACQ,QAAT,CAAkBD,OAAlB,OAAgC3C,cAAc,CAAC4C,QAAf,CAAwBD,OAAxB,EAArI,EAAwK;AACpKxD,YAAAA,IAAI,CAACgB,aAAL,CAAmBJ,eAAe,GAAG,IAAH,GAAUC,cAA5C,EAA4D;AACxD7D,cAAAA,KAAK,EAAE,IADiD;AAExDI,cAAAA,GAAG,EAAE;AAFmD,aAA5D,EAGGqD,CAHH,EAGMF,WAHN;;AAIA,gBAAI,CAACK,eAAL,EAAsB;AAClBgC,cAAAA,IAAI,CAACC,MAAL,GAAc,IAAd;AACAD,cAAAA,IAAI,CAACc,cAAL,GAAsBN,SAAS,GAAGR,IAAI,CAACQ,SAAvC;AACH;AACJ,WATD,MASO,IAAI,YAAY3C,CAAC,CAACkD,WAAd,IAA6B,eAAe/B,OAAO,CAACgC,IAAxD,EAA8D;AACjE,gBAAIC,aAAa,GAAG7D,IAAI,CAAC8D,iBAAL,CAAuB,KAAvB,CAApB;AACA,gBAAIC,aAAa,GAAG/D,IAAI,CAAC8D,iBAAL,CAAuB,IAAvB,CAApB;AACA,gBAAIE,aAAa,GAAGxD,KAAK,GAAG,CAAR,IAAa,CAACI,eAAlC;AACA,gBAAIqD,cAAc,GAAGzD,KAAK,GAAG,CAAR,KAAc,CAACqD,aAAD,IAAkB,CAACE,aAAjC,CAArB;AACA,gBAAIG,cAAc,GAAG,MAAM1D,KAAN,IAAe,EAAEqD,aAAa,KAAKT,SAAS,GAAG,CAAZ,IAAiB,CAACxB,OAAO,CAACuC,QAA1B,IAAsCf,SAAS,GAAG,CAAZ,IAAiBxB,OAAO,CAACuC,QAApE,CAAb,IAA8FJ,aAAa,KAAKX,SAAS,GAAG,CAAZ,IAAiB,CAACxB,OAAO,CAACuC,QAA1B,IAAsCf,SAAS,GAAG,CAAZ,IAAiBxB,OAAO,CAACuC,QAApE,CAA7G,CAApC;AACAvB,YAAAA,IAAI,CAACwB,OAAL,GAAeJ,aAAa,IAAIC,cAAjB,IAAmCC,cAAlD;AACH;AACJ,SA5BW,CAAZ;AA6BA,eAAOtB,IAAP;AACH;;AAED,eAASyB,WAAT,CAAqB5D,CAArB,EAAwBoB,UAAxB,EAAoCe,IAApC,EAA0CD,UAA1C,EAAsD;AAClD,YAAIC,IAAI,CAACC,MAAT,EAAiB;AACbhB,UAAAA,UAAU,CAACyC,MAAX,CAAkB3B,UAAlB,IAAgC,CAAClC,CAAC,CAAC6D,MAAF,GAAW7D,CAAC,CAAC6D,MAAF,CAAS3B,UAAT,CAAX,GAAkCd,UAAU,CAACyC,MAAX,CAAkB3B,UAAlB,CAAnC,IAAoEC,IAAI,CAACc,cAAzG;AACH;AACJ;;AAED,eAASa,WAAT,CAAqBC,MAArB,EAA6B3C,UAA7B,EAAyCe,IAAzC,EAA+CD,UAA/C,EAA2D;AACvD,YAAIC,IAAI,CAACC,MAAT,EAAiB;AACbhB,UAAAA,UAAU,CAAC2C,MAAX,CAAkB7B,UAAlB,IAAgC6B,MAAM,CAAC7B,UAAD,CAAN,GAAqBC,IAAI,CAACc,cAA1D;AACH;AACJ;;AACD,UAAIe,OAAO,GAAGtD,KAAK,CAACuD,MAAN,CAAa,SAAb,CAAd;AACA,UAAI7C,UAAU,GAAGF,UAAU,CAACE,UAA5B;AACA,UAAID,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,UAAI+C,OAAO,GAAG,EAAd;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,UAAI,CAAC/C,UAAU,CAACgD,QAAhB,EAA0B;AACtBF,QAAAA,OAAO,GAAGlC,QAAQ,CAACtB,KAAK,CAAC2D,aAAP,EAAsBlD,OAAO,CAACE,YAAR,CAAqBvB,WAArB,CAAtB,EAAyDkE,OAAO,GAAG,GAAH,GAAS,GAAzE,EAA8EhE,CAA9E,EAAiFoB,UAAjF,CAAlB;AACA+C,QAAAA,OAAO,GAAGnC,QAAQ,CAACZ,UAAU,CAACM,SAAZ,EAAuBP,OAAO,CAACK,SAAR,CAAkB1B,WAAlB,CAAvB,EAAuDkE,OAAO,GAAG,GAAH,GAAS,GAAvE,EAA4EhE,CAA5E,EAA+EoB,UAA/E,CAAlB;;AACAV,QAAAA,KAAK,CAAC4D,cAAN,CAAqB,CAAC,cAAD,CAArB;;AACAV,QAAAA,WAAW,CAAC5D,CAAD,EAAIoB,UAAJ,EAAgB8C,OAAhB,EAAyBF,OAAO,GAAG,GAAH,GAAS,GAAzC,CAAX;AACAJ,QAAAA,WAAW,CAAC5D,CAAD,EAAIoB,UAAJ,EAAgB+C,OAAhB,EAAyBH,OAAO,GAAG,GAAH,GAAS,GAAzC,CAAX;AACH;;AACD,UAAID,MAAM,GAAGhC,UAAU,CAAC/B,CAAD,CAAvB;AACA8D,MAAAA,WAAW,CAACC,MAAD,EAAS3C,UAAT,EAAqB8C,OAArB,EAA8BF,OAAO,GAAG,GAAH,GAAS,GAA9C,CAAX;AACAF,MAAAA,WAAW,CAACC,MAAD,EAAS3C,UAAT,EAAqB+C,OAArB,EAA8BH,OAAO,GAAG,GAAH,GAAS,GAA9C,CAAX;;AACA,UAAI,CAACE,OAAO,CAAC9B,MAAT,IAAmB,CAAC+B,OAAO,CAAC/B,MAAhC,EAAwC;AACpChB,QAAAA,UAAU,CAAC2C,MAAX,GAAoBA,MAApB;AACH;;AACD,aAAOG,OAAO,CAAC9B,MAAR,IAAkB+B,OAAO,CAAC/B,MAA1B,IAAoChB,UAAU,CAACgD,QAA/C,IAA2DF,OAAO,CAACP,OAAnE,IAA8EQ,OAAO,CAACR,OAA7F;AACH;;AAED,aAASY,0BAAT,CAAoCrD,UAApC,EAAgDpB,WAAhD,EAA6DE,CAA7D,EAAgE8B,UAAhE,EAA4E;AACxE,eAASE,QAAT,CAAkB/C,IAAlB,EAAwBgD,QAAxB,EAAkCC,UAAlC,EAA8Cd,UAA9C,EAA0DlC,gBAA1D,EAA4E;AACxE,YAAIsF,WAAW,GAAG,KAAlB;AACA,YAAIzE,KAAK,GAAGC,CAAC,CAACD,KAAF,IAAW,CAAvB;;AACA,YAAIH,QAAQ,GAAGL,IAAI,IAAI;AACnB,cAAI4C,IAAI,GAAG5C,IAAI,CAACC,aAAL,GAAqB2C,IAArB,CAA0B,CAACL,UAAU,CAAC9B,CAAD,EAAIoB,UAAJ,EAAgBc,UAAhB,EAA4BnC,KAA5B,CAArC,EAAyEA,KAAzE,EAAgFR,IAAI,CAACqD,aAAL,EAAhF,CAAX;AACA,iBAAO;AACHE,YAAAA,UAAU,EAAEX,IAAI,CAACrE,GADd;AAEHkF,YAAAA,QAAQ,EAAEb,IAAI,CAACnE;AAFZ,WAAP;AAIH,SAND;;AAOA,YAAI6B,aAAa,GAAGI,MAAM,KAAK;AAC3B1D,UAAAA,KAAK,EAAE,IADoB;AAE3BI,UAAAA,GAAG,EAAEsD;AAFsB,SAAL,CAA1B;;AAIAgC,QAAAA,QAAQ,IAAIhD,IAAI,CAACqD,OAAL,CAAa/C,IAAI,IAAI;AAC7BiF,UAAAA,WAAW,GAAG,CAAC7E,QAAQ,CAACJ,IAAD,EAAOL,gBAAP,EAAyBU,QAAzB,EAAmCC,aAAnC,EAAkDC,WAAlD,EAA+DC,KAA/D,EAAsEC,CAAtE,CAAR,CAAiFG,eAAhG;AACH,SAFW,CAAZ;AAGA,eAAOqE,WAAP;AACH;;AACD,UAAIR,OAAO,GAAGtD,KAAK,CAACuD,MAAN,CAAa,SAAb,CAAd;AACA,UAAI7C,UAAU,GAAGF,UAAU,CAACE,UAA5B;AACA,UAAID,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,UAAIqD,WAAW,GAAG,IAAlB;;AACA,UAAIpD,UAAU,CAACgD,QAAf,EAAyB;AACrBI,QAAAA,WAAW,IAAIxC,QAAQ,CAACtB,KAAK,CAAC2D,aAAP,EAAsBlD,OAAO,CAACE,YAAR,CAAqBvB,WAArB,CAAtB,EAAyDkE,OAAO,GAAG,GAAH,GAAS,GAAzE,EAA8E5C,UAA9E,EAA0FV,KAAK,CAACa,eAAN,EAA1F,CAAvB;AACAiD,QAAAA,WAAW,IAAIxC,QAAQ,CAACZ,UAAU,CAACM,SAAZ,EAAuBP,OAAO,CAACK,SAAR,CAAkB1B,WAAlB,CAAvB,EAAuDkE,OAAO,GAAG,GAAH,GAAS,GAAvE,EAA4E5C,UAA5E,CAAvB;AACH,OAHD,MAGO;AACH,YAAInC,IAAI,GAAG,EAAX;;AACA,YAAIkC,OAAO,CAACE,YAAR,CAAqBvB,WAArB,CAAJ,EAAuC;AACnCb,UAAAA,IAAI,CAACqC,IAAL,CAAUZ,KAAK,CAACa,eAAN,EAAV;AACH;;AACD,YAAIJ,OAAO,CAACK,SAAR,CAAkB1B,WAAlB,CAAJ,EAAoC;AAChCb,UAAAA,IAAI,GAAGA,IAAI,CAACwC,MAAL,CAAYL,UAAU,CAACM,SAAvB,CAAP;AACH;;AACDzC,QAAAA,IAAI,CAACoD,MAAL,CAAY/C,2BAAZ,EAAyCgD,OAAzC,CAAiD/C,IAAI,IAAI;AACrDA,UAAAA,IAAI,CAACgB,aAAL,CAAmB,IAAnB,EAAyB;AACrBhE,YAAAA,KAAK,EAAE;AADc,WAAzB,EAEGyD,CAFH,EAEMF,WAFN;AAGH,SAJD;AAKA0E,QAAAA,WAAW,GAAGvF,IAAI,CAACwF,MAAnB;AACH;;AACDD,MAAAA,WAAW,IAAI9D,KAAK,CAAC4D,cAAN,CAAqB,CAAC,cAAD,CAArB,CAAf;AACH;;AAED,aAASI,iBAAT,CAA2B3F,MAA3B,EAAmC4F,MAAnC,EAA2C;AACvC,UAAI1F,IAAI,GAAGyB,KAAK,CAAC2D,aAAN,CAAoBhC,MAApB,CAA2B9C,IAAI,IAAIV,WAAW,CAACV,YAAY,CAACoB,IAAI,CAACqF,SAAL,EAAD,CAAb,EAAiC7F,MAAjC,CAA9C,CAAX;;AACA,aAAO;AACHqF,QAAAA,QAAQ,EAAE1D,KAAK,CAACmE,kBAAN,GAA2BnH,eADlC;AAEHsD,QAAAA,MAAM,EAAE,CAAC/B,IAAI,CAACwF,MAAN,IAAgB,CAACzI,SAAS,CAAC2I,MAAD,CAF/B;AAGHA,QAAAA,MAAM,EAAEA,MAHL;AAIHG,QAAAA,WAAW,EAAE7F,IAAI,CAACwF,MAAL,IAAetG,YAAY,CAACc,IAAI,CAAC,CAAD,CAAJ,CAAQ2F,SAAR,EAAD,CAJrC;AAKHlD,QAAAA,SAAS,EAAEzC,IAAI,CAACwF,MAAL,IAAe/D,KAAK,CAACqE,UAAN,CAAiB1C,MAAjB,CAAwB9C,IAAI,IAAIV,WAAW,CAACV,YAAY,CAACoB,IAAI,CAACqF,SAAL,EAAD,CAAb,EAAiC7F,MAAjC,CAA3C,CALvB;AAMH8E,QAAAA,MAAM,EAAE;AACJxF,UAAAA,CAAC,EAAE,CADC;AAEJE,UAAAA,CAAC,EAAE;AAFC,SANL;AAUHwF,QAAAA,MAAM,EAAEhF,MAVL;AAWHiG,QAAAA,WAAW,EAAEjG;AAXV,OAAP;AAaH;;AAED,aAASkG,eAAT,CAAyBnG,IAAzB,EAA+BkB,CAA/B,EAAkC;AAC9B,UAAIkF,UAAU,GAAGvE,QAAQ,CAACwE,aAAT,EAAjB;AACA,aAAO;AACH9G,QAAAA,CAAC,EAAET,IAAI,CAACG,IAAI,CAACiC,CAAC,CAACoF,KAAF,GAAUF,UAAU,CAAC5G,IAAtB,EAA4BQ,IAAI,CAACT,CAAjC,CAAL,EAA0CS,IAAI,CAACL,KAAL,GAAaK,IAAI,CAACT,CAA5D,CADJ;AAEHE,QAAAA,CAAC,EAAEX,IAAI,CAACG,IAAI,CAACiC,CAAC,CAACqF,KAAF,GAAUH,UAAU,CAAC1G,GAAtB,EAA2BM,IAAI,CAACP,CAAhC,CAAL,EAAyCO,IAAI,CAACH,MAAL,GAAcG,IAAI,CAACP,CAA5D;AAFJ,OAAP;AAIH;;AAED,aAAS+G,kBAAT,CAA4BtF,CAA5B,EAA+B;AAC3B,UAAIkF,UAAU,GAAGvE,QAAQ,CAACwE,aAAT,EAAjB;AACA,UAAII,EAAE,GAAGvF,CAAC,CAACwF,QAAF,CAAW,CAAX,EAAcJ,KAAvB;AACA,UAAIK,EAAE,GAAGzF,CAAC,CAACwF,QAAF,CAAW,CAAX,EAAcJ,KAAvB;AACA,UAAIM,EAAE,GAAG1F,CAAC,CAACwF,QAAF,CAAW,CAAX,EAAcH,KAAvB;AACA,UAAIM,EAAE,GAAG3F,CAAC,CAACwF,QAAF,CAAW,CAAX,EAAcH,KAAvB;AACA,aAAO;AACHhH,QAAAA,CAAC,EAAET,IAAI,CAAC2H,EAAD,EAAKE,EAAL,CAAJ,GAAexH,IAAI,CAACwH,EAAE,GAAGF,EAAN,CAAJ,GAAgB,CAA/B,GAAmCL,UAAU,CAAC5G,IAD9C;AAEHC,QAAAA,CAAC,EAAEX,IAAI,CAAC8H,EAAD,EAAKC,EAAL,CAAJ,GAAe1H,IAAI,CAAC0H,EAAE,GAAGD,EAAN,CAAJ,GAAgB,CAA/B,GAAmCR,UAAU,CAAC1G;AAF9C,OAAP;AAIH;;AAED,aAASoH,iBAAT,CAA2B5F,CAA3B,EAA8B;AAC1B,UAAIkF,UAAU,GAAGvE,QAAQ,CAACwE,aAAT,EAAjB;AACA,aAAO;AACH9G,QAAAA,CAAC,EAAE2B,CAAC,CAACoF,KAAF,GAAUF,UAAU,CAAC5G,IADrB;AAEHC,QAAAA,CAAC,EAAEyB,CAAC,CAACqF,KAAF,GAAUH,UAAU,CAAC1G;AAFrB,OAAP;AAIH;;AAED,aAASqH,iBAAT,CAA2B7F,CAA3B,EAA8BoB,UAA9B,EAA0Cc,UAA1C,EAAsD;AAClD,aAAOlC,CAAC,CAAC6D,MAAF,CAAS3B,UAAT,IAAuBd,UAAU,CAACyC,MAAX,CAAkB3B,UAAlB,CAA9B;AACH;;AAED,aAAS4D,eAAT,CAAyB9F,CAAzB,EAA4B;AACxB,UAAI,UAAUA,CAAC,CAACe,UAAhB,EAA4B;AACxBf,QAAAA,CAAC,CAAC+F,cAAF;AACA/F,QAAAA,CAAC,CAACgG,eAAF;AACH;;AACDtF,MAAAA,KAAK,CAACuF,oBAAN;AACH;;AACD,QAAI/E,UAAU,GAAG;AACbgF,MAAAA,gBAAgB,EAAE,UAASlG,CAAT,EAAY;AAC1B,YAAImB,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,YAAIgF,OAAO,GAAG,YAAYnG,CAAC,CAACkD,WAA5B;AACA,YAAIkD,OAAO,GAAGjF,OAAO,CAACE,YAAR,CAAqBgF,GAArB,IAA4BlF,OAAO,CAACK,SAAR,CAAkB6E,GAA5D;AACA,YAAIC,QAAQ,GAAGnF,OAAO,CAACE,YAAR,CAAqBc,IAArB,IAA6BhB,OAAO,CAACK,SAAR,CAAkBW,IAA9D;AACA,YAAIoE,aAAa,GAAGvK,SAAS,CAACmF,OAAO,CAACqF,MAAT,CAAT,IAA6BxG,CAAC,CAAC9D,aAAa,CAACiF,OAAO,CAACqF,MAAT,CAAb,GAAgC,KAAjC,CAAlD;AACA,YAAIC,UAAU,GAAGtF,OAAO,CAACsF,UAAzB;AACA,YAAI9B,MAAJ;AACA3E,QAAAA,CAAC,CAAC0G,qBAAF,GAA0B,IAA1B;;AACA,YAAIP,OAAJ,EAAa;AACT,cAAIhF,OAAO,CAACwF,kBAAR,IAA8BP,OAAlC,EAA2C;AACvC,gBAAIQ,aAAa,GAAG,CAAC1F,UAAU,CAAC2F,yBAAX,EAAD,IAA2C3F,UAAU,CAAC4F,SAA1E;AACAnC,YAAAA,MAAM,GAAGiC,aAAa,GAAG,IAAH,GAAU,KAAhC;AACH;AACJ,SALD,MAKO,IAAIH,UAAU,IAAIL,OAAd,IAAyBG,aAA7B,EAA4C;AAC/C5B,UAAAA,MAAM,GAAG,KAAT;AACH,SAFM,MAEA,IAAI,CAAC8B,UAAD,IAAeL,OAAnB,EAA4B;AAC/BzB,UAAAA,MAAM,GAAG,KAAT;AACH,SAFM,MAEA,IAAI8B,UAAU,IAAIH,QAAlB,EAA4B;AAC/B3B,UAAAA,MAAM,GAAG,MAAT;AACH;;AACD,YAAIvD,UAAU,GAAGsD,iBAAiB,CAACkB,iBAAiB,CAAC5F,CAAD,CAAlB,EAAuB2E,MAAvB,CAAlC;;AACA,YAAIvD,UAAU,CAACJ,MAAf,EAAuB;AACnBE,UAAAA,UAAU,CAAC4F,SAAX,GAAuB,KAAvB;;AACA,cAAI,UAAU9G,CAAC,CAACe,UAAhB,EAA4B;AACxBf,YAAAA,CAAC,CAACgB,MAAF,GAAW,IAAX;AACH;;AACD;AACH;;AACDE,QAAAA,UAAU,CAACE,UAAX,GAAwBA,UAAxB;;AACA,YAAI,WAAWuD,MAAf,EAAuB;AACnBvD,UAAAA,UAAU,CAAC2F,WAAX,GAAyB9B,eAAe,CAAC7D,UAAU,CAAC0D,WAAZ,EAAyB9E,CAAzB,CAAxC;AACAoB,UAAAA,UAAU,CAACtC,IAAX,GAAkB6B,QAAQ,CAAC7B,IAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0BkI,IAA1B,CAA+B7F,OAAO,CAAC8F,YAAvC,EAAqDC,MAArD,CAA4DvG,QAAQ,CAACwG,IAArE,CAAlB;AACH,SAHD,MAGO;AACHlG,UAAAA,yBAAyB,CAACC,UAAD,EAAa,KAAb,EAAoBlB,CAApB,CAAzB;AACH;AACJ,OArCY;AAsCboH,MAAAA,WAAW,EAAE,UAASpH,CAAT,EAAY;AACrB,YAAIgE,OAAO,GAAGtD,KAAK,CAACuD,MAAN,CAAa,SAAb,CAAd;AACA,YAAI9C,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,YAAIC,UAAU,GAAGF,UAAU,CAACE,UAA5B;AACA,YAAI+E,OAAO,GAAG,YAAYnG,CAAC,CAACkD,WAA5B;AACAlD,QAAAA,CAAC,CAAC0G,qBAAF,GAA0B,IAA1B;;AACA,YAAI,CAACtF,UAAD,IAAe+E,OAAO,IAAI,CAACjF,UAAU,CAAC2F,yBAAX,EAA/B,EAAuE;AACnE;AACH;;AACD,YAAI,WAAWzF,UAAU,CAACuD,MAA1B,EAAkC;AAC9BmB,UAAAA,eAAe,CAAC9F,CAAD,CAAf;AACA,cAAIqH,SAAS,GAAGjG,UAAU,CAAC0D,WAA3B;AACA,cAAIiC,WAAW,GAAG3F,UAAU,CAAC2F,WAA7B;AACA,cAAIO,SAAS,GAAGrC,eAAe,CAACoC,SAAD,EAAYrH,CAAZ,CAA/B;AACA,cAAIuH,OAAO,GAAGpG,OAAO,CAACE,YAAR,CAAqBc,IAAnC;AACA,cAAIqF,OAAO,GAAGrG,OAAO,CAACK,SAAR,CAAkBW,IAAhC;AACA,cAAIrD,IAAI,GAAG;AACPT,YAAAA,CAAC,EAAET,IAAI,CAACmJ,WAAW,CAAC1I,CAAb,EAAgBiJ,SAAS,CAACjJ,CAA1B,CADA;AAEPE,YAAAA,CAAC,EAAEX,IAAI,CAACmJ,WAAW,CAACxI,CAAb,EAAgB+I,SAAS,CAAC/I,CAA1B,CAFA;AAGPE,YAAAA,KAAK,EAAER,IAAI,CAAC8I,WAAW,CAAC1I,CAAZ,GAAgBiJ,SAAS,CAACjJ,CAA3B,CAHJ;AAIPM,YAAAA,MAAM,EAAEV,IAAI,CAAC8I,WAAW,CAACxI,CAAZ,GAAgB+I,SAAS,CAAC/I,CAA3B;AAJL,WAAX;;AAMA,cAAI,CAACgJ,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACtB,gBAAI,CAACD,OAAD,IAAY,CAACvD,OAAb,IAAwB,CAACwD,OAAD,IAAYxD,OAAxC,EAAiD;AAC7ClF,cAAAA,IAAI,CAACT,CAAL,GAASgJ,SAAS,CAAChJ,CAAnB;AACAS,cAAAA,IAAI,CAACL,KAAL,GAAa4I,SAAS,CAAC5I,KAAvB;AACH,aAHD,MAGO;AACHK,cAAAA,IAAI,CAACP,CAAL,GAAS8I,SAAS,CAAC9I,CAAnB;AACAO,cAAAA,IAAI,CAACH,MAAL,GAAc0I,SAAS,CAAC1I,MAAxB;AACH;AACJ;;AACDyC,UAAAA,UAAU,CAACtC,IAAX,CAAgBkI,IAAhB,CAAqBlI,IAArB;AACH,SAvBD,MAuBO,IAAI,UAAUsC,UAAU,CAACuD,MAAzB,EAAiC;AACpC9C,UAAAA,oBAAoB,CAACX,UAAD,EAAa,KAAb,EAAoBlB,CAApB,EAAuB6F,iBAAvB,EAA0C7F,CAAC,IAAIA,CAAC,CAAC6D,MAAjD,CAApB;AACA,cAAI4D,YAAY,GAAG5J,IAAI,CAACK,GAAL,CAAS8B,CAAC,CAAC6D,MAAF,CAAStF,CAAT,GAAa6C,UAAU,CAACyC,MAAX,CAAkBtF,CAAxC,CAAnB;AACA,cAAImJ,YAAY,GAAG7J,IAAI,CAACK,GAAL,CAAS8B,CAAC,CAAC6D,MAAF,CAASxF,CAAT,GAAa+C,UAAU,CAACyC,MAAX,CAAkBxF,CAAxC,CAAnB;;AACA,cAAI8H,OAAO,KAAKsB,YAAY,GAAG9J,cAAf,IAAiC8J,YAAY,GAAG5J,IAAI,CAACK,GAAL,CAASkD,UAAU,CAACyC,MAAX,CAAkBxF,CAA3B,CAAhD,IAAiFqJ,YAAY,GAAG/J,cAAf,IAAiC+J,YAAY,GAAG7J,IAAI,CAACK,GAAL,CAASkD,UAAU,CAACyC,MAAX,CAAkBtF,CAA3B,CAAtI,CAAX,EAAiL;AAC7K;AACH;;AACDuH,UAAAA,eAAe,CAAC9F,CAAD,CAAf;AACH;AACJ,OA/EY;AAgFb2H,MAAAA,cAAc,EAAE,UAAS3H,CAAT,EAAY;AACxB,YAAIgE,OAAO,GAAGtD,KAAK,CAACuD,MAAN,CAAa,SAAb,CAAd;AACA,YAAI9C,OAAO,GAAGD,UAAU,CAACC,OAAzB;AACA,YAAIC,UAAU,GAAGF,UAAU,CAACE,UAA5B;AACA,YAAI+E,OAAO,GAAG,YAAYnG,CAAC,CAACkD,WAA5B;AACA,YAAI0E,UAAU,GAAGxG,UAAU,IAAI,UAAUA,UAAU,CAACuD,MAAnC,IAA6C,CAACvD,UAAU,CAACgD,QAAzD,IAAqE,MAAMhD,UAAU,CAACyC,MAAX,CAAkBxF,CAA7F,IAAkG,MAAM+C,UAAU,CAACyC,MAAX,CAAkBtF,CAA3I;;AACA,YAAI,CAAC6C,UAAD,IAAe+E,OAAO,IAAI,CAACjF,UAAU,CAAC2F,yBAAX,EAA3B,IAAqEe,UAAzE,EAAqF;AACjF;AACH;;AAAA,SAAC,CAACzB,OAAD,IAAY,CAACjF,UAAU,CAACE,UAAX,CAAsByG,QAApC,KAAiD/B,eAAe,CAAC9F,CAAD,CAAhE;;AACD,YAAI,WAAWoB,UAAU,CAACuD,MAA1B,EAAkC;AAC9B,cAAI3C,QAAQ,GAAG,CAAC/C,IAAD,EAAOgD,QAAP,EAAiBC,UAAjB,EAA6B6E,WAA7B,EAA0CO,SAA1C,EAAqDpI,gBAArD,KAA0E;AACrFD,YAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAD,EAAOC,gBAAP,CAAf;AACA,gBAAI4I,QAAQ,GAAGR,SAAS,CAACpF,UAAD,CAAxB;AACA,gBAAI6F,UAAU,GAAGhB,WAAW,CAAC7E,UAAD,CAA5B;AACA,gBAAIsC,WAAW,GAAG,KAAlB;;AACA,gBAAI3E,aAAa,GAAGI,MAAM,KAAK;AAC3B1D,cAAAA,KAAK,EAAE,CAAC,CAAC0D,MADkB;AAE3BtD,cAAAA,GAAG,EAAE,CAAC,CAACsD;AAFoB,aAAL,CAA1B;;AAIA,gBAAIgC,QAAQ,IAAIhE,IAAI,CAAC6J,QAAQ,GAAGC,UAAZ,CAAJ,GAA8BpK,cAA9C,EAA8D;AAC1DsB,cAAAA,IAAI,CAAC+I,IAAL,CAAUzI,IAAI,IAAI;AACd,oBAAI0I,EAAE,GAAG1I,IAAI,CAACC,aAAL,EAAT;;AACA,oBAAIyI,EAAE,CAACxI,gBAAH,GAAsBC,OAAtB,EAAJ,EAAqC;AACjC;AACH;;AACD,oBAAI;AACAS,kBAAAA,eAAe,EAAEA,eADjB;AAEAG,kBAAAA,MAAM,EAAEA;AAFR,oBAGAX,QAAQ,CAACJ,IAAD,EAAOL,gBAAP,EAAyB,MAAM,CAAC+I,EAAE,CAACC,IAAH,CAAQH,UAAR,CAAD,EAAsBE,EAAE,CAACC,IAAH,CAAQJ,QAAR,CAAtB,CAA/B,EAAyEjI,aAAzE,EAAwFuB,UAAU,CAACuD,MAAnG,EAA2GsD,EAAE,CAACE,WAAH,CAAe,IAAf,CAA3G,EAAiInI,CAAjI,CAHZ;AAIAwE,gBAAAA,WAAW,GAAG,CAACrE,eAAf;AACA,uBAAOjB,gBAAgB,IAAIoB,MAAM,CAACsB,WAAlC;AACH,eAXD;AAYH;;AACD,mBAAO4C,WAAP;AACH,WAxBD;;AAyBA,cAAI8C,SAAS,GAAGrC,eAAe,CAAC7D,UAAU,CAAC0D,WAAZ,EAAyB9E,CAAzB,CAA/B;AACA,cAAIoI,kBAAkB,GAAGpG,QAAQ,CAACtB,KAAK,CAAC2D,aAAP,EAAsBlD,OAAO,CAACE,YAAR,CAAqBc,IAA3C,EAAiD6B,OAAO,GAAG,GAAH,GAAS,GAAjE,EAAsE5C,UAAU,CAAC2F,WAAjF,EAA8FO,SAA9F,EAAyG5G,KAAK,CAACa,eAAN,EAAzG,CAAjC;AACA,cAAI8G,eAAe,GAAGrG,QAAQ,CAACZ,UAAU,CAACM,SAAZ,EAAuBP,OAAO,CAACK,SAAR,CAAkBW,IAAzC,EAA+C6B,OAAO,GAAG,GAAH,GAAS,GAA/D,EAAoE5C,UAAU,CAAC2F,WAA/E,EAA4FO,SAA5F,CAA9B;;AACA,cAAIe,eAAe,IAAID,kBAAvB,EAA2C;AACvC1H,YAAAA,KAAK,CAAC4D,cAAN,CAAqB,CAAC,cAAD,CAArB;AACH;;AACDlD,UAAAA,UAAU,CAACtC,IAAX,CAAgBwJ,OAAhB;AACH,SAjCD,MAiCO,IAAI,UAAUlH,UAAU,CAACuD,MAAzB,EAAiC;AACpCJ,UAAAA,0BAA0B,CAACrD,UAAD,EAAa,KAAb,EAAoBlB,CAApB,EAAuB6F,iBAAvB,CAA1B;AACH;;AACD3E,QAAAA,UAAU,CAACE,UAAX,GAAwB,IAAxB;AACH,OA9HY;AA+HbmH,MAAAA,iBAAiB,EAAE,UAASvI,CAAT,EAAY;AAC3B,YAAIoB,UAAU,GAAGsD,iBAAiB,CAACY,kBAAkB,CAACtF,CAAD,CAAnB,EAAwB,MAAxB,CAAlC;AACAoB,QAAAA,UAAU,CAACyG,QAAX,GAAsB,CAAC3G,UAAU,CAAC2F,yBAAX,EAAvB;;AACA,YAAIzF,UAAU,CAACJ,MAAf,EAAuB;AACnBH,UAAAA,WAAW,CAACb,CAAD,CAAX;AACA;AACH;;AACDkB,QAAAA,UAAU,CAACE,UAAX,GAAwBA,UAAxB;AACAH,QAAAA,yBAAyB,CAACC,UAAD,EAAa,MAAb,EAAqBlB,CAArB,CAAzB;AACH,OAxIY;AAyIbwI,MAAAA,YAAY,EAAE,UAASxI,CAAT,EAAY;AACtB,YAAI,CAACkB,UAAU,CAACE,UAAhB,EAA4B;AACxB;AACH;;AACD,YAAIqH,eAAe,GAAG5G,oBAAoB,CAACX,UAAD,EAAa,MAAb,EAAqBlB,CAArB,EAAwB,CAACA,CAAD,EAAIoB,UAAJ,EAAgBc,UAAhB,EAA4BnC,KAA5B,KAAsCuF,kBAAkB,CAACtF,CAAD,CAAlB,CAAsBkC,UAAtB,IAAoCd,UAAU,CAAC2C,MAAX,CAAkB7B,UAAlB,CAApC,IAAqEd,UAAU,CAAC2C,MAAX,CAAkB7B,UAAlB,IAAgCd,UAAU,CAAC2C,MAAX,CAAkB7B,UAAlB,IAAgCnC,KAArI,CAA9D,EAA2MuF,kBAA3M,CAA1C;AACApE,QAAAA,UAAU,CAACwH,mBAAX,CAA+B,CAACD,eAAhC,EAAiDzI,CAAjD;AACA,SAACyI,eAAD,KAAqBvH,UAAU,CAACE,UAAX,GAAwB,IAA7C;AACH,OAhJY;AAiJbuH,MAAAA,eAAe,EAAE,UAAS3I,CAAT,EAAY;AACzB,YAAI,CAACkB,UAAU,CAACE,UAAhB,EAA4B;AACxB;AACH;;AACDmD,QAAAA,0BAA0B,CAACrD,UAAD,EAAa,MAAb,EAAqBlB,CAArB,EAAwB,CAACA,CAAD,EAAIoB,UAAJ,EAAgBc,UAAhB,EAA4BnC,KAA5B,KAAsCqB,UAAU,CAAC2C,MAAX,CAAkB7B,UAAlB,IAAgCd,UAAU,CAAC4D,WAAX,CAAuB9C,UAAvB,CAAhC,IAAsEd,UAAU,CAAC4D,WAAX,CAAuB9C,UAAvB,IAAqCd,UAAU,CAAC4D,WAAX,CAAuB9C,UAAvB,IAAqCnC,KAAhJ,CAA9D,CAA1B;AACAmB,QAAAA,UAAU,CAACE,UAAX,GAAwB,IAAxB;AACH,OAvJY;AAwJbwH,MAAAA,OAAO,EAAE,YAAW;AAChBjI,QAAAA,QAAQ,CAACwG,IAAT,CAAc0B,GAAd,CAAkBhM,SAAlB;AACAqE,QAAAA,UAAU,CAACE,UAAX,IAAyBF,UAAU,CAACE,UAAX,CAAsBtC,IAA/C,IAAuDoC,UAAU,CAACE,UAAX,CAAsBtC,IAAtB,CAA2BwJ,OAA3B,EAAvD;AACApH,QAAAA,UAAU,CAACE,UAAX,GAAwB,IAAxB;AACAT,QAAAA,QAAQ,CAACwG,IAAT,CAAc2B,GAAd,CAAkB;AACd,0BAAgB,EADF;AAEd,8BAAoB;AAFN,SAAlB;AAIH,OAhKY;AAiKbC,MAAAA,KAAK,EAAE,UAAS5H,OAAT,EAAkB;AACrBD,QAAAA,UAAU,CAAC0H,OAAX;;AACA,YAAI,CAACzH,OAAO,CAACE,YAAR,CAAqBgF,GAA1B,EAA+B;AAC3B1F,UAAAA,QAAQ,CAACwG,IAAT,CAAc6B,EAAd,CAAiBzL,2BAAjB,EAA8CsD,WAA9C;AACH;;AACD,YAAIM,OAAO,CAACE,YAAR,CAAqB4H,IAArB,IAA6B9H,OAAO,CAACK,SAAR,CAAkByH,IAAnD,EAAyD;AACrD;AACH;;AACD/H,QAAAA,UAAU,CAACC,OAAX,GAAqBA,OAArB;AACA,YAAI6C,OAAO,GAAGtD,KAAK,CAACuD,MAAN,CAAa,SAAb,CAAd;;AACA,YAAI,CAAC9C,OAAO,CAACE,YAAR,CAAqBc,IAArB,IAA6BhB,OAAO,CAACK,SAAR,CAAkBW,IAAhD,KAAyDhB,OAAO,CAAC+H,eAArE,EAAsF;AAClFvI,UAAAA,QAAQ,CAACwG,IAAT,CAAc6B,EAAd,CAAiB3M,UAAU,GAAGQ,SAA9B,EAA0C,UAASmD,CAAT,EAAY;AAClD,qBAASgC,QAAT,CAAkB/C,IAAlB,EAAwBkK,KAAxB,EAA+BC,KAA/B,EAAsClK,gBAAtC,EAAwD;AACpDD,cAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAD,EAAOC,gBAAP,CAAf;AACA,kBAAIsF,WAAW,GAAG,KAAlB;;AACA,kBAAI3E,aAAa,GAAGI,MAAM,KAAK;AAC3B1D,gBAAAA,KAAK,EAAE,CAAC,CAAC0D,MADkB;AAE3BtD,gBAAAA,GAAG,EAAE,CAAC,CAACsD;AAFoB,eAAL,CAA1B;;AAIAhB,cAAAA,IAAI,CAAC+I,IAAL,CAAUzI,IAAI,IAAI;AACd,oBAAI8J,UAAU,GAAG9J,IAAI,CAACC,aAAL,EAAjB;;AACA,oBAAI6J,UAAU,CAAC5J,gBAAX,GAA8BC,OAA9B,EAAJ,EAA6C;AACzC;AACH;;AACD,oBAAIK,KAAK,GAAGsJ,UAAU,CAAClB,WAAX,CAAuBiB,KAAK,GAAG,CAA/B,CAAZ;AACA,oBAAI;AACAjJ,kBAAAA,eAAe,EAAEA,eADjB;AAEAG,kBAAAA,MAAM,EAAEA;AAFR,oBAGAX,QAAQ,CAACJ,IAAD,EAAOL,gBAAP,EAAyB,MAAM;AACvC,sBAAIiD,IAAI,GAAGkH,UAAU,CAAClH,IAAX,CAAgB,EAAEgH,KAAK,GAAGA,KAAK,GAAGpJ,KAAlB,CAAhB,EAA0CA,KAA1C,EAAiDR,IAAI,CAACqD,aAAL,EAAjD,CAAX;AACA,yBAAO;AACHE,oBAAAA,UAAU,EAAEX,IAAI,CAACrE,GADd;AAEHkF,oBAAAA,QAAQ,EAAEb,IAAI,CAACnE;AAFZ,mBAAP;AAIH,iBANW,EAMT6B,aANS,EAMM,MANN,EAMcE,KANd,EAMqBC,CANrB,CAHZ;AAUAwE,gBAAAA,WAAW,GAAG,CAACrE,eAAf;AACA,uBAAOjB,gBAAgB,IAAIoB,MAAM,CAACsB,WAAlC;AACH,eAlBD;AAmBA,qBAAO4C,WAAP;AACH;;AACD,gBAAIzF,MAAM,GAAG6G,iBAAiB,CAAC5F,CAAD,CAA9B;AACA,gBAAIsJ,UAAU,GAAG,KAAjB;AACA,gBAAIC,UAAJ;;AACA,gBAAIpI,OAAO,CAACK,SAAR,CAAkBW,IAAtB,EAA4B;AACxBoH,cAAAA,UAAU,GAAG7I,KAAK,CAACqE,UAAN,CAAiB1C,MAAjB,CAAwB9C,IAAI,IAAIV,WAAW,CAACV,YAAY,CAACoB,IAAI,CAACqF,SAAL,EAAD,CAAb,EAAiC7F,MAAjC,CAA3C,CAAb;;AACA,kBAAI,MAAMwK,UAAU,CAAC9E,MAArB,EAA6B;AACzB,oBAAI+E,YAAY,GAAG9I,KAAK,CAACqE,UAAN,CAAiBpD,MAAjB,CAAwB,CAAC8H,CAAD,EAAIlK,IAAJ,KAAa;AACpD,sBAAI,CAACkK,CAAD,IAAMlK,IAAI,CAACmK,QAAL,CAAc3K,MAAM,CAACV,CAArB,EAAwBU,MAAM,CAACR,CAA/B,CAAV,EAA6C;AACzCkL,oBAAAA,CAAC,GAAGlK,IAAI,CAACqF,SAAL,EAAJ;AACH;;AACD,yBAAO6E,CAAP;AACH,iBALkB,EAKhB,IALgB,CAAnB;;AAMA,oBAAID,YAAJ,EAAkB;AACdD,kBAAAA,UAAU,GAAG7I,KAAK,CAACqE,UAAN,CAAiB1C,MAAjB,CAAwB9C,IAAI,IAAIV,WAAW,CAACV,YAAY,CAACoB,IAAI,CAACqF,SAAL,EAAD,CAAb,EAAiC;AACrFvG,oBAAAA,CAAC,EAAEmL,YAAY,CAAClL,IADqE;AAErFC,oBAAAA,CAAC,EAAEiL,YAAY,CAAChL;AAFqE,mBAAjC,CAA3C,CAAb;AAIH;AACJ;;AACD8K,cAAAA,UAAU,IAAItH,QAAQ,CAACuH,UAAD,EAAavF,OAAO,GAAGjF,MAAM,CAACV,CAAV,GAAcU,MAAM,CAACR,CAAzC,EAA4CyB,CAAC,CAACoJ,KAA9C,CAAtB;AACH;;AACD,gBAAIjI,OAAO,CAACE,YAAR,CAAqBc,IAAzB,EAA+B;AAC3B,kBAAIwH,OAAO,GAAGjJ,KAAK,CAAC2D,aAAN,CAAoB2D,IAApB,CAAyBzI,IAAI,IAAI;AAC3C,oBAAIV,WAAW,CAACV,YAAY,CAACoB,IAAI,CAACqF,SAAL,EAAD,CAAb,EAAiC7F,MAAjC,CAAX,IAAuDQ,IAAI,CAACmK,QAAL,CAAc3K,MAAM,CAACV,CAArB,EAAwBU,MAAM,CAACR,CAA/B,CAA3D,EAA8F;AAC1F,yBAAO,IAAP;AACH;;AACD,uBAAO,KAAP;AACH,eALa,CAAd;;AAMA+K,cAAAA,UAAU,IAAIK,OAAO,IAAI3H,QAAQ,CAACtB,KAAK,CAAC2D,aAAP,EAAsBL,OAAO,GAAGjF,MAAM,CAACR,CAAV,GAAcQ,MAAM,CAACV,CAAlD,EAAqD2B,CAAC,CAACoJ,KAAvD,EAA8D1I,KAAK,CAACa,eAAN,EAA9D,CAAjC;AACH;;AACD,gBAAI+H,UAAJ,EAAgB;AACZ5I,cAAAA,KAAK,CAAC4D,cAAN,CAAqB,CAAC,cAAD,CAArB;;AACApD,cAAAA,UAAU,CAAC2F,yBAAX,CAAqC0C,UAArC,KAAoDzD,eAAe,CAAC9F,CAAD,CAAnE;AACH;AACJ,WA/DD;AAgEH;;AACD,YAAImB,OAAO,CAACwF,kBAAZ,EAAgC;AAC5B,cAAIxF,OAAO,CAACE,YAAR,CAAqBc,IAArB,IAA6BhB,OAAO,CAACK,SAAR,CAAkBW,IAAnD,EAAyD;AACrDxB,YAAAA,QAAQ,CAACwG,IAAT,CAAc6B,EAAd,CAAiB/L,sBAAjB,EAAyC;AACrC2M,cAAAA,OAAO,EAAE;AAD4B,aAAzC,EAEG1I,UAAU,CAACqH,iBAFd,EAEiCS,EAFjC,CAEoC7L,gBAFpC,EAEsD;AAClDyM,cAAAA,OAAO,EAAE;AADyC,aAFtD,EAIG1I,UAAU,CAACsH,YAJd,EAI4BQ,EAJ5B,CAI+B3L,oBAJ/B,EAIqD6D,UAAU,CAACyH,eAJhE;AAKH;AACJ;;AACDhI,QAAAA,QAAQ,CAACwG,IAAT,CAAc6B,EAAd,CAAiBlM,qBAAjB,EAAwC;AACpC+M,UAAAA,SAAS,EAAE,IADyB;AAEpCD,UAAAA,OAAO,EAAE;AAF2B,SAAxC,EAGG1I,UAAU,CAACgF,gBAHd,EAGgC8C,EAHhC,CAGmCjM,eAHnC,EAGoD;AAChD8M,UAAAA,SAAS,EAAE,IADqC;AAEhDD,UAAAA,OAAO,EAAE;AAFuC,SAHpD,EAMG1I,UAAU,CAACkG,WANd,EAM2B4B,EAN3B,CAM8BhM,mBAN9B,EAMmDkE,UAAU,CAACyG,cAN9D;;AAOA,YAAIxG,OAAO,CAACE,YAAR,CAAqBgF,GAAzB,EAA8B;AAC1B1F,UAAAA,QAAQ,CAACwG,IAAT,CAAc6B,EAAd,CAAiBzL,2BAAjB,EAA+C,UAASyC,CAAT,EAAY;AACvDkB,YAAAA,UAAU,CAACE,UAAX,GAAwB;AACpBM,cAAAA,SAAS,EAAE,EADS;AAEpBmC,cAAAA,MAAM,EAAE;AACJxF,gBAAAA,CAAC,EAAE,CADC;AAEJE,gBAAAA,CAAC,EAAE;AAFC,eAFY;AAMpBwF,cAAAA,MAAM,EAAE;AACJ1F,gBAAAA,CAAC,EAAE,CADC;AAEJE,gBAAAA,CAAC,EAAE;AAFC;AANY,aAAxB;AAWAuH,YAAAA,eAAe,CAAC9F,CAAD,CAAf;AACAiB,YAAAA,yBAAyB,CAACC,UAAD,EAAa,KAAb,EAAoBlB,CAApB,CAAzB;AACH,WAdD,EAcIgJ,EAdJ,CAcOxL,0BAdP,EAcoC,UAASwC,CAAT,EAAY;AAC5C8F,YAAAA,eAAe,CAAC9F,CAAD,CAAf;AACA6B,YAAAA,oBAAoB,CAACX,UAAD,EAAa,KAAb,EAAoBlB,CAApB,EAAuB6F,iBAAvB,EAA0C7F,CAAC,IAAIA,CAAC,CAAC6D,MAAjD,CAApB;AACH,WAjBD,EAiBImF,EAjBJ,CAiBOvL,yBAjBP,EAiBmC,UAASuC,CAAT,EAAY;AAC3C8F,YAAAA,eAAe,CAAC9F,CAAD,CAAf;AACAuE,YAAAA,0BAA0B,CAACrD,UAAD,EAAa,KAAb,EAAoBlB,CAApB,EAAuB6F,iBAAvB,CAA1B;AACA3E,YAAAA,UAAU,CAACE,UAAX,GAAwB,IAAxB;AACH,WArBD;AAsBH;AACJ,OArRY;AAsRbsH,MAAAA,mBAAmB,EAAE,UAASoB,SAAT,EAAoB9J,CAApB,EAAuB;AACxCkB,QAAAA,UAAU,CAACE,UAAX,KAA0BF,UAAU,CAACE,UAAX,CAAsByG,QAAtB,GAAiCiC,SAA3D;;AACA,YAAI,CAACA,SAAL,EAAgB;AACZhE,UAAAA,eAAe,CAAC9F,CAAD,CAAf;AACH;AACJ,OA3RY;AA4Rb6G,MAAAA,yBAAyB,EAAE,UAAS0C,UAAT,EAAqB;AAC5C,YAAI,SAASA,UAAT,IAAuB,KAAK,CAAL,KAAWA,UAAlC,IAAgDA,UAAU,CAAC9E,MAA/D,EAAuE;AACnE,iBAAO8E,UAAU,CAACvB,IAAX,CAAgBzI,IAAI,IAAI,CAACA,IAAI,CAAC8D,iBAAL,CAAuB,KAAvB,CAAD,IAAkC,CAAC9D,IAAI,CAAC8D,iBAAL,CAAuB,IAAvB,CAA3D,CAAP;AACH;;AACD,YAAI0G,oBAAoB,GAAGrJ,KAAK,CAACqE,UAAN,CAAiBiD,IAAjB,CAAsBzI,IAAI,IAAI,CAACA,IAAI,CAAC8D,iBAAL,CAAuB,KAAvB,CAAD,IAAkC,CAAC9D,IAAI,CAAC8D,iBAAL,CAAuB,IAAvB,CAAjE,CAA3B;;AACA,YAAI2G,uBAAuB,GAAGtJ,KAAK,CAAC2D,aAAN,CAAoB2D,IAApB,CAAyBzI,IAAI,IAAI,CAACA,IAAI,CAAC8D,iBAAL,CAAuB,KAAvB,CAAD,IAAkC,CAAC9D,IAAI,CAAC8D,iBAAL,CAAuB,IAAvB,CAApE,CAA9B;;AACA,eAAO0G,oBAAoB,IAAIC,uBAA/B;AACH;AAnSY,KAAjB;AAqSA,SAAKC,WAAL,GAAmB/I,UAAnB;AACH,GAtfU;AAufXgJ,EAAAA,OAAO,EAAE;AACLC,IAAAA,gBAAgB,EAAE,YAAW;AACzB,WAAKF,WAAL,CAAiBlB,KAAjB,CAAuB,KAAKqB,aAAL,CAAmB7H,UAAnB,CAA8B,YAA9B,CAAvB;AACH;AAHI,GAvfE;AA4fX+F,EAAAA,OAAO,EAAE,YAAW;AAChB,SAAK2B,WAAL,CAAiBrB,OAAjB;AACH,GA9fU;AA+fXyB,EAAAA,SAAS,EAAE,UAASC,WAAT,EAAsB;AAC7BA,IAAAA,WAAW,CAACC,SAAZ,CAAsB;AAClBC,MAAAA,IAAI,EAAE,cADY;AAElBC,MAAAA,OAAO,EAAE,YAAW;AAChB,aAAKN,gBAAL;AACH,OAJiB;AAKlBO,MAAAA,gBAAgB,EAAE,IALA;AAMlBC,MAAAA,cAAc,EAAE,IANE;AAOlB1G,MAAAA,MAAM,EAAE;AAPU,KAAtB;AASH;AAzgBU,CAAf","sourcesContent":["/**\r\n * DevExtreme (esm/viz/chart_components/zoom_and_pan.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    normalizeEnum,\r\n    getVizRangeObject\r\n} from \"../core/utils\";\r\nimport {\r\n    name as wheelEvent\r\n} from \"../../events/core/wheel\";\r\nimport * as transformEvents from \"../../events/transform\";\r\nimport {\r\n    start as dragEventStart,\r\n    move as dragEventMove,\r\n    end as dragEventEnd\r\n} from \"../../events/drag\";\r\nvar EVENTS_NS = \".zoomAndPanNS\";\r\nvar DRAG_START_EVENT_NAME = dragEventStart + EVENTS_NS;\r\nvar DRAG_EVENT_NAME = dragEventMove + EVENTS_NS;\r\nvar DRAG_END_EVENT_NAME = dragEventEnd + EVENTS_NS;\r\nvar PINCH_START_EVENT_NAME = transformEvents.pinchstart + EVENTS_NS;\r\nvar PINCH_EVENT_NAME = transformEvents.pinch + EVENTS_NS;\r\nvar PINCH_END_EVENT_NAME = transformEvents.pinchend + EVENTS_NS;\r\nvar SCROLL_BAR_START_EVENT_NAME = \"dxc-scroll-start\" + EVENTS_NS;\r\nvar SCROLL_BAR_MOVE_EVENT_NAME = \"dxc-scroll-move\" + EVENTS_NS;\r\nvar SCROLL_BAR_END_EVENT_NAME = \"dxc-scroll-end\" + EVENTS_NS;\r\nvar GESTURE_TIMEOUT = 300;\r\nvar MIN_DRAG_DELTA = 5;\r\nvar _min = Math.min;\r\nvar _max = Math.max;\r\nvar _abs = Math.abs;\r\n\r\nfunction canvasToRect(canvas) {\r\n    return {\r\n        x: canvas.left,\r\n        y: canvas.top,\r\n        width: canvas.width - canvas.left - canvas.right,\r\n        height: canvas.height - canvas.top - canvas.bottom\r\n    }\r\n}\r\n\r\nfunction checkCoords(rect, coords) {\r\n    var x = coords.x;\r\n    var y = coords.y;\r\n    return x >= rect.x && x <= rect.width + rect.x && y >= rect.y && y <= rect.height + rect.y\r\n}\r\n\r\nfunction sortAxes(axes, onlyAxisToNotify) {\r\n    if (onlyAxisToNotify) {\r\n        axes = axes.sort((a, b) => {\r\n            if (a === onlyAxisToNotify) {\r\n                return -1\r\n            }\r\n            if (b === onlyAxisToNotify) {\r\n                return 1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n    return axes\r\n}\r\n\r\nfunction isNotEmptyAxisBusinessRange(axis) {\r\n    return !axis.getTranslator().getBusinessRange().isEmpty()\r\n}\r\n\r\nfunction axisZoom(axis, onlyAxisToNotify, getRange, getParameters, actionField, scale, e) {\r\n    var silent = onlyAxisToNotify && axis !== onlyAxisToNotify;\r\n    var range = getRange(axis);\r\n    var {\r\n        stopInteraction: stopInteraction,\r\n        correctedRange: correctedRange\r\n    } = axis.checkZoomingLowerLimitOvercome(actionField, scale, range);\r\n    var result = axis.handleZooming(stopInteraction ? null : correctedRange, getParameters(silent), e, actionField);\r\n    stopInteraction && axis.handleZoomEnd();\r\n    return {\r\n        stopInteraction: stopInteraction,\r\n        result: result\r\n    }\r\n}\r\nexport default {\r\n    name: \"zoom_and_pan\",\r\n    init: function() {\r\n        var chart = this;\r\n        var renderer = this._renderer;\r\n\r\n        function cancelEvent(e) {\r\n            if (e.originalEvent) {\r\n                cancelEvent(e.originalEvent)\r\n            }\r\n            if (false !== e.cancelable) {\r\n                e.cancel = true\r\n            }\r\n        }\r\n\r\n        function startAxesViewportChanging(zoomAndPan, actionField, e) {\r\n            var options = zoomAndPan.options;\r\n            var actionData = zoomAndPan.actionData;\r\n            var axes = [];\r\n            if (options.argumentAxis[actionField]) {\r\n                axes.push(chart.getArgumentAxis())\r\n            }\r\n            if (options.valueAxis[actionField]) {\r\n                axes = axes.concat(actionData.valueAxes)\r\n            }\r\n            axes.reduce((isPrevented, axis) => {\r\n                if (isPrevented) {\r\n                    return isPrevented\r\n                }\r\n                if (isNotEmptyAxisBusinessRange(axis)) {\r\n                    return axis.handleZooming(null, {\r\n                        end: true\r\n                    }, e, actionField).isPrevented\r\n                }\r\n                return isPrevented\r\n            }, false) && cancelEvent(e)\r\n        }\r\n\r\n        function axesViewportChanging(zoomAndPan, actionField, e, offsetCalc, centerCalc) {\r\n            function zoomAxes(axes, criteria, coordField, e, actionData) {\r\n                var zoom = {\r\n                    zoomed: false\r\n                };\r\n                criteria && axes.filter(isNotEmptyAxisBusinessRange).forEach(axis => {\r\n                    var options = axis.getOptions();\r\n                    var viewport = axis.visualRange();\r\n                    var scale = axis.getTranslator().getEventScale(e);\r\n                    var translate = -offsetCalc(e, actionData, coordField, scale);\r\n                    zoom = extend(true, zoom, axis.getTranslator().zoom(translate, scale, axis.getZoomBounds()));\r\n                    var range = axis.adjustRange(getVizRangeObject([zoom.min, zoom.max]));\r\n                    var {\r\n                        stopInteraction: stopInteraction,\r\n                        correctedRange: correctedRange\r\n                    } = axis.checkZoomingLowerLimitOvercome(actionField, scale, range);\r\n                    if (!isDefined(viewport) || viewport.startValue.valueOf() !== correctedRange.startValue.valueOf() || viewport.endValue.valueOf() !== correctedRange.endValue.valueOf()) {\r\n                        axis.handleZooming(stopInteraction ? null : correctedRange, {\r\n                            start: true,\r\n                            end: true\r\n                        }, e, actionField);\r\n                        if (!stopInteraction) {\r\n                            zoom.zoomed = true;\r\n                            zoom.deltaTranslate = translate - zoom.translate\r\n                        }\r\n                    } else if (\"touch\" === e.pointerType && \"discrete\" === options.type) {\r\n                        var isMinPosition = axis.isExtremePosition(false);\r\n                        var isMaxPosition = axis.isExtremePosition(true);\r\n                        var zoomInEnabled = scale > 1 && !stopInteraction;\r\n                        var zoomOutEnabled = scale < 1 && (!isMinPosition || !isMaxPosition);\r\n                        var panningEnabled = 1 === scale && !(isMinPosition && (translate < 0 && !options.inverted || translate > 0 && options.inverted) || isMaxPosition && (translate > 0 && !options.inverted || translate < 0 && options.inverted));\r\n                        zoom.enabled = zoomInEnabled || zoomOutEnabled || panningEnabled\r\n                    }\r\n                });\r\n                return zoom\r\n            }\r\n\r\n            function storeOffset(e, actionData, zoom, coordField) {\r\n                if (zoom.zoomed) {\r\n                    actionData.offset[coordField] = (e.offset ? e.offset[coordField] : actionData.offset[coordField]) + zoom.deltaTranslate\r\n                }\r\n            }\r\n\r\n            function storeCenter(center, actionData, zoom, coordField) {\r\n                if (zoom.zoomed) {\r\n                    actionData.center[coordField] = center[coordField] + zoom.deltaTranslate\r\n                }\r\n            }\r\n            var rotated = chart.option(\"rotated\");\r\n            var actionData = zoomAndPan.actionData;\r\n            var options = zoomAndPan.options;\r\n            var argZoom = {};\r\n            var valZoom = {};\r\n            if (!actionData.fallback) {\r\n                argZoom = zoomAxes(chart._argumentAxes, options.argumentAxis[actionField], rotated ? \"y\" : \"x\", e, actionData);\r\n                valZoom = zoomAxes(actionData.valueAxes, options.valueAxis[actionField], rotated ? \"x\" : \"y\", e, actionData);\r\n                chart._requestChange([\"VISUAL_RANGE\"]);\r\n                storeOffset(e, actionData, argZoom, rotated ? \"y\" : \"x\");\r\n                storeOffset(e, actionData, valZoom, rotated ? \"x\" : \"y\")\r\n            }\r\n            var center = centerCalc(e);\r\n            storeCenter(center, actionData, argZoom, rotated ? \"y\" : \"x\");\r\n            storeCenter(center, actionData, valZoom, rotated ? \"x\" : \"y\");\r\n            if (!argZoom.zoomed && !valZoom.zoomed) {\r\n                actionData.center = center\r\n            }\r\n            return argZoom.zoomed || valZoom.zoomed || actionData.fallback || argZoom.enabled || valZoom.enabled\r\n        }\r\n\r\n        function finishAxesViewportChanging(zoomAndPan, actionField, e, offsetCalc) {\r\n            function zoomAxes(axes, criteria, coordField, actionData, onlyAxisToNotify) {\r\n                var zoomStarted = false;\r\n                var scale = e.scale || 1;\r\n                var getRange = axis => {\r\n                    var zoom = axis.getTranslator().zoom(-offsetCalc(e, actionData, coordField, scale), scale, axis.getZoomBounds());\r\n                    return {\r\n                        startValue: zoom.min,\r\n                        endValue: zoom.max\r\n                    }\r\n                };\r\n                var getParameters = silent => ({\r\n                    start: true,\r\n                    end: silent\r\n                });\r\n                criteria && axes.forEach(axis => {\r\n                    zoomStarted = !axisZoom(axis, onlyAxisToNotify, getRange, getParameters, actionField, scale, e).stopInteraction\r\n                });\r\n                return zoomStarted\r\n            }\r\n            var rotated = chart.option(\"rotated\");\r\n            var actionData = zoomAndPan.actionData;\r\n            var options = zoomAndPan.options;\r\n            var zoomStarted = true;\r\n            if (actionData.fallback) {\r\n                zoomStarted &= zoomAxes(chart._argumentAxes, options.argumentAxis[actionField], rotated ? \"y\" : \"x\", actionData, chart.getArgumentAxis());\r\n                zoomStarted |= zoomAxes(actionData.valueAxes, options.valueAxis[actionField], rotated ? \"x\" : \"y\", actionData)\r\n            } else {\r\n                var axes = [];\r\n                if (options.argumentAxis[actionField]) {\r\n                    axes.push(chart.getArgumentAxis())\r\n                }\r\n                if (options.valueAxis[actionField]) {\r\n                    axes = axes.concat(actionData.valueAxes)\r\n                }\r\n                axes.filter(isNotEmptyAxisBusinessRange).forEach(axis => {\r\n                    axis.handleZooming(null, {\r\n                        start: true\r\n                    }, e, actionField)\r\n                });\r\n                zoomStarted = axes.length\r\n            }\r\n            zoomStarted && chart._requestChange([\"VISUAL_RANGE\"])\r\n        }\r\n\r\n        function prepareActionData(coords, action) {\r\n            var axes = chart._argumentAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords));\r\n            return {\r\n                fallback: chart._lastRenderingTime > GESTURE_TIMEOUT,\r\n                cancel: !axes.length || !isDefined(action),\r\n                action: action,\r\n                curAxisRect: axes.length && canvasToRect(axes[0].getCanvas()),\r\n                valueAxes: axes.length && chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords)),\r\n                offset: {\r\n                    x: 0,\r\n                    y: 0\r\n                },\r\n                center: coords,\r\n                startCenter: coords\r\n            }\r\n        }\r\n\r\n        function getPointerCoord(rect, e) {\r\n            var rootOffset = renderer.getRootOffset();\r\n            return {\r\n                x: _min(_max(e.pageX - rootOffset.left, rect.x), rect.width + rect.x),\r\n                y: _min(_max(e.pageY - rootOffset.top, rect.y), rect.height + rect.y)\r\n            }\r\n        }\r\n\r\n        function calcCenterForPinch(e) {\r\n            var rootOffset = renderer.getRootOffset();\r\n            var x1 = e.pointers[0].pageX;\r\n            var x2 = e.pointers[1].pageX;\r\n            var y1 = e.pointers[0].pageY;\r\n            var y2 = e.pointers[1].pageY;\r\n            return {\r\n                x: _min(x1, x2) + _abs(x2 - x1) / 2 - rootOffset.left,\r\n                y: _min(y1, y2) + _abs(y2 - y1) / 2 - rootOffset.top\r\n            }\r\n        }\r\n\r\n        function calcCenterForDrag(e) {\r\n            var rootOffset = renderer.getRootOffset();\r\n            return {\r\n                x: e.pageX - rootOffset.left,\r\n                y: e.pageY - rootOffset.top\r\n            }\r\n        }\r\n\r\n        function calcOffsetForDrag(e, actionData, coordField) {\r\n            return e.offset[coordField] - actionData.offset[coordField]\r\n        }\r\n\r\n        function preventDefaults(e) {\r\n            if (false !== e.cancelable) {\r\n                e.preventDefault();\r\n                e.stopPropagation()\r\n            }\r\n            chart._stopCurrentHandling()\r\n        }\r\n        var zoomAndPan = {\r\n            dragStartHandler: function(e) {\r\n                var options = zoomAndPan.options;\r\n                var isTouch = \"touch\" === e.pointerType;\r\n                var wantPan = options.argumentAxis.pan || options.valueAxis.pan;\r\n                var wantZoom = options.argumentAxis.zoom || options.valueAxis.zoom;\r\n                var panKeyPressed = isDefined(options.panKey) && e[normalizeEnum(options.panKey) + \"Key\"];\r\n                var dragToZoom = options.dragToZoom;\r\n                var action;\r\n                e._cancelPreventDefault = true;\r\n                if (isTouch) {\r\n                    if (options.allowTouchGestures && wantPan) {\r\n                        var cancelPanning = !zoomAndPan.panningVisualRangeEnabled() || zoomAndPan.skipEvent;\r\n                        action = cancelPanning ? null : \"pan\"\r\n                    }\r\n                } else if (dragToZoom && wantPan && panKeyPressed) {\r\n                    action = \"pan\"\r\n                } else if (!dragToZoom && wantPan) {\r\n                    action = \"pan\"\r\n                } else if (dragToZoom && wantZoom) {\r\n                    action = \"zoom\"\r\n                }\r\n                var actionData = prepareActionData(calcCenterForDrag(e), action);\r\n                if (actionData.cancel) {\r\n                    zoomAndPan.skipEvent = false;\r\n                    if (false !== e.cancelable) {\r\n                        e.cancel = true\r\n                    }\r\n                    return\r\n                }\r\n                zoomAndPan.actionData = actionData;\r\n                if (\"zoom\" === action) {\r\n                    actionData.startCoords = getPointerCoord(actionData.curAxisRect, e);\r\n                    actionData.rect = renderer.rect(0, 0, 0, 0).attr(options.dragBoxStyle).append(renderer.root)\r\n                } else {\r\n                    startAxesViewportChanging(zoomAndPan, \"pan\", e)\r\n                }\r\n            },\r\n            dragHandler: function(e) {\r\n                var rotated = chart.option(\"rotated\");\r\n                var options = zoomAndPan.options;\r\n                var actionData = zoomAndPan.actionData;\r\n                var isTouch = \"touch\" === e.pointerType;\r\n                e._cancelPreventDefault = true;\r\n                if (!actionData || isTouch && !zoomAndPan.panningVisualRangeEnabled()) {\r\n                    return\r\n                }\r\n                if (\"zoom\" === actionData.action) {\r\n                    preventDefaults(e);\r\n                    var curCanvas = actionData.curAxisRect;\r\n                    var startCoords = actionData.startCoords;\r\n                    var curCoords = getPointerCoord(curCanvas, e);\r\n                    var zoomArg = options.argumentAxis.zoom;\r\n                    var zoomVal = options.valueAxis.zoom;\r\n                    var rect = {\r\n                        x: _min(startCoords.x, curCoords.x),\r\n                        y: _min(startCoords.y, curCoords.y),\r\n                        width: _abs(startCoords.x - curCoords.x),\r\n                        height: _abs(startCoords.y - curCoords.y)\r\n                    };\r\n                    if (!zoomArg || !zoomVal) {\r\n                        if (!zoomArg && !rotated || !zoomVal && rotated) {\r\n                            rect.x = curCanvas.x;\r\n                            rect.width = curCanvas.width\r\n                        } else {\r\n                            rect.y = curCanvas.y;\r\n                            rect.height = curCanvas.height\r\n                        }\r\n                    }\r\n                    actionData.rect.attr(rect)\r\n                } else if (\"pan\" === actionData.action) {\r\n                    axesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag, e => e.offset);\r\n                    var deltaOffsetY = Math.abs(e.offset.y - actionData.offset.y);\r\n                    var deltaOffsetX = Math.abs(e.offset.x - actionData.offset.x);\r\n                    if (isTouch && (deltaOffsetY > MIN_DRAG_DELTA && deltaOffsetY > Math.abs(actionData.offset.x) || deltaOffsetX > MIN_DRAG_DELTA && deltaOffsetX > Math.abs(actionData.offset.y))) {\r\n                        return\r\n                    }\r\n                    preventDefaults(e)\r\n                }\r\n            },\r\n            dragEndHandler: function(e) {\r\n                var rotated = chart.option(\"rotated\");\r\n                var options = zoomAndPan.options;\r\n                var actionData = zoomAndPan.actionData;\r\n                var isTouch = \"touch\" === e.pointerType;\r\n                var panIsEmpty = actionData && \"pan\" === actionData.action && !actionData.fallback && 0 === actionData.offset.x && 0 === actionData.offset.y;\r\n                if (!actionData || isTouch && !zoomAndPan.panningVisualRangeEnabled() || panIsEmpty) {\r\n                    return\r\n                }(!isTouch || !zoomAndPan.actionData.isNative) && preventDefaults(e);\r\n                if (\"zoom\" === actionData.action) {\r\n                    var zoomAxes = (axes, criteria, coordField, startCoords, curCoords, onlyAxisToNotify) => {\r\n                        axes = sortAxes(axes, onlyAxisToNotify);\r\n                        var curCoord = curCoords[coordField];\r\n                        var startCoord = startCoords[coordField];\r\n                        var zoomStarted = false;\r\n                        var getParameters = silent => ({\r\n                            start: !!silent,\r\n                            end: !!silent\r\n                        });\r\n                        if (criteria && _abs(curCoord - startCoord) > MIN_DRAG_DELTA) {\r\n                            axes.some(axis => {\r\n                                var tr = axis.getTranslator();\r\n                                if (tr.getBusinessRange().isEmpty()) {\r\n                                    return\r\n                                }\r\n                                var {\r\n                                    stopInteraction: stopInteraction,\r\n                                    result: result\r\n                                } = axisZoom(axis, onlyAxisToNotify, () => [tr.from(startCoord), tr.from(curCoord)], getParameters, actionData.action, tr.getMinScale(true), e);\r\n                                zoomStarted = !stopInteraction;\r\n                                return onlyAxisToNotify && result.isPrevented\r\n                            })\r\n                        }\r\n                        return zoomStarted\r\n                    };\r\n                    var curCoords = getPointerCoord(actionData.curAxisRect, e);\r\n                    var argumentAxesZoomed = zoomAxes(chart._argumentAxes, options.argumentAxis.zoom, rotated ? \"y\" : \"x\", actionData.startCoords, curCoords, chart.getArgumentAxis());\r\n                    var valueAxesZoomed = zoomAxes(actionData.valueAxes, options.valueAxis.zoom, rotated ? \"x\" : \"y\", actionData.startCoords, curCoords);\r\n                    if (valueAxesZoomed || argumentAxesZoomed) {\r\n                        chart._requestChange([\"VISUAL_RANGE\"])\r\n                    }\r\n                    actionData.rect.dispose()\r\n                } else if (\"pan\" === actionData.action) {\r\n                    finishAxesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag)\r\n                }\r\n                zoomAndPan.actionData = null\r\n            },\r\n            pinchStartHandler: function(e) {\r\n                var actionData = prepareActionData(calcCenterForPinch(e), \"zoom\");\r\n                actionData.isNative = !zoomAndPan.panningVisualRangeEnabled();\r\n                if (actionData.cancel) {\r\n                    cancelEvent(e);\r\n                    return\r\n                }\r\n                zoomAndPan.actionData = actionData;\r\n                startAxesViewportChanging(zoomAndPan, \"zoom\", e)\r\n            },\r\n            pinchHandler: function(e) {\r\n                if (!zoomAndPan.actionData) {\r\n                    return\r\n                }\r\n                var viewportChanged = axesViewportChanging(zoomAndPan, \"zoom\", e, (e, actionData, coordField, scale) => calcCenterForPinch(e)[coordField] - actionData.center[coordField] + (actionData.center[coordField] - actionData.center[coordField] * scale), calcCenterForPinch);\r\n                zoomAndPan.defineTouchBehavior(!viewportChanged, e);\r\n                !viewportChanged && (zoomAndPan.actionData = null)\r\n            },\r\n            pinchEndHandler: function(e) {\r\n                if (!zoomAndPan.actionData) {\r\n                    return\r\n                }\r\n                finishAxesViewportChanging(zoomAndPan, \"zoom\", e, (e, actionData, coordField, scale) => actionData.center[coordField] - actionData.startCenter[coordField] + (actionData.startCenter[coordField] - actionData.startCenter[coordField] * scale));\r\n                zoomAndPan.actionData = null\r\n            },\r\n            cleanup: function() {\r\n                renderer.root.off(EVENTS_NS);\r\n                zoomAndPan.actionData && zoomAndPan.actionData.rect && zoomAndPan.actionData.rect.dispose();\r\n                zoomAndPan.actionData = null;\r\n                renderer.root.css({\r\n                    \"touch-action\": \"\",\r\n                    \"-ms-touch-action\": \"\"\r\n                })\r\n            },\r\n            setup: function(options) {\r\n                zoomAndPan.cleanup();\r\n                if (!options.argumentAxis.pan) {\r\n                    renderer.root.on(SCROLL_BAR_START_EVENT_NAME, cancelEvent)\r\n                }\r\n                if (options.argumentAxis.none && options.valueAxis.none) {\r\n                    return\r\n                }\r\n                zoomAndPan.options = options;\r\n                var rotated = chart.option(\"rotated\");\r\n                if ((options.argumentAxis.zoom || options.valueAxis.zoom) && options.allowMouseWheel) {\r\n                    renderer.root.on(wheelEvent + EVENTS_NS, (function(e) {\r\n                        function zoomAxes(axes, coord, delta, onlyAxisToNotify) {\r\n                            axes = sortAxes(axes, onlyAxisToNotify);\r\n                            var zoomStarted = false;\r\n                            var getParameters = silent => ({\r\n                                start: !!silent,\r\n                                end: !!silent\r\n                            });\r\n                            axes.some(axis => {\r\n                                var translator = axis.getTranslator();\r\n                                if (translator.getBusinessRange().isEmpty()) {\r\n                                    return\r\n                                }\r\n                                var scale = translator.getMinScale(delta > 0);\r\n                                var {\r\n                                    stopInteraction: stopInteraction,\r\n                                    result: result\r\n                                } = axisZoom(axis, onlyAxisToNotify, () => {\r\n                                    var zoom = translator.zoom(-(coord - coord * scale), scale, axis.getZoomBounds());\r\n                                    return {\r\n                                        startValue: zoom.min,\r\n                                        endValue: zoom.max\r\n                                    }\r\n                                }, getParameters, \"zoom\", scale, e);\r\n                                zoomStarted = !stopInteraction;\r\n                                return onlyAxisToNotify && result.isPrevented\r\n                            });\r\n                            return zoomStarted\r\n                        }\r\n                        var coords = calcCenterForDrag(e);\r\n                        var axesZoomed = false;\r\n                        var targetAxes;\r\n                        if (options.valueAxis.zoom) {\r\n                            targetAxes = chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), coords));\r\n                            if (0 === targetAxes.length) {\r\n                                var targetCanvas = chart._valueAxes.reduce((r, axis) => {\r\n                                    if (!r && axis.coordsIn(coords.x, coords.y)) {\r\n                                        r = axis.getCanvas()\r\n                                    }\r\n                                    return r\r\n                                }, null);\r\n                                if (targetCanvas) {\r\n                                    targetAxes = chart._valueAxes.filter(axis => checkCoords(canvasToRect(axis.getCanvas()), {\r\n                                        x: targetCanvas.left,\r\n                                        y: targetCanvas.top\r\n                                    }))\r\n                                }\r\n                            }\r\n                            axesZoomed |= zoomAxes(targetAxes, rotated ? coords.x : coords.y, e.delta)\r\n                        }\r\n                        if (options.argumentAxis.zoom) {\r\n                            var canZoom = chart._argumentAxes.some(axis => {\r\n                                if (checkCoords(canvasToRect(axis.getCanvas()), coords) || axis.coordsIn(coords.x, coords.y)) {\r\n                                    return true\r\n                                }\r\n                                return false\r\n                            });\r\n                            axesZoomed |= canZoom && zoomAxes(chart._argumentAxes, rotated ? coords.y : coords.x, e.delta, chart.getArgumentAxis())\r\n                        }\r\n                        if (axesZoomed) {\r\n                            chart._requestChange([\"VISUAL_RANGE\"]);\r\n                            zoomAndPan.panningVisualRangeEnabled(targetAxes) && preventDefaults(e)\r\n                        }\r\n                    }))\r\n                }\r\n                if (options.allowTouchGestures) {\r\n                    if (options.argumentAxis.zoom || options.valueAxis.zoom) {\r\n                        renderer.root.on(PINCH_START_EVENT_NAME, {\r\n                            passive: false\r\n                        }, zoomAndPan.pinchStartHandler).on(PINCH_EVENT_NAME, {\r\n                            passive: false\r\n                        }, zoomAndPan.pinchHandler).on(PINCH_END_EVENT_NAME, zoomAndPan.pinchEndHandler)\r\n                    }\r\n                }\r\n                renderer.root.on(DRAG_START_EVENT_NAME, {\r\n                    immediate: true,\r\n                    passive: false\r\n                }, zoomAndPan.dragStartHandler).on(DRAG_EVENT_NAME, {\r\n                    immediate: true,\r\n                    passive: false\r\n                }, zoomAndPan.dragHandler).on(DRAG_END_EVENT_NAME, zoomAndPan.dragEndHandler);\r\n                if (options.argumentAxis.pan) {\r\n                    renderer.root.on(SCROLL_BAR_START_EVENT_NAME, (function(e) {\r\n                        zoomAndPan.actionData = {\r\n                            valueAxes: [],\r\n                            offset: {\r\n                                x: 0,\r\n                                y: 0\r\n                            },\r\n                            center: {\r\n                                x: 0,\r\n                                y: 0\r\n                            }\r\n                        };\r\n                        preventDefaults(e);\r\n                        startAxesViewportChanging(zoomAndPan, \"pan\", e)\r\n                    })).on(SCROLL_BAR_MOVE_EVENT_NAME, (function(e) {\r\n                        preventDefaults(e);\r\n                        axesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag, e => e.offset)\r\n                    })).on(SCROLL_BAR_END_EVENT_NAME, (function(e) {\r\n                        preventDefaults(e);\r\n                        finishAxesViewportChanging(zoomAndPan, \"pan\", e, calcOffsetForDrag);\r\n                        zoomAndPan.actionData = null\r\n                    }))\r\n                }\r\n            },\r\n            defineTouchBehavior: function(isDefault, e) {\r\n                zoomAndPan.actionData && (zoomAndPan.actionData.isNative = isDefault);\r\n                if (!isDefault) {\r\n                    preventDefaults(e)\r\n                }\r\n            },\r\n            panningVisualRangeEnabled: function(targetAxes) {\r\n                if (null !== targetAxes && void 0 !== targetAxes && targetAxes.length) {\r\n                    return targetAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true))\r\n                }\r\n                var enablePanByValueAxis = chart._valueAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true));\r\n                var enablePanByArgumentAxis = chart._argumentAxes.some(axis => !axis.isExtremePosition(false) || !axis.isExtremePosition(true));\r\n                return enablePanByValueAxis || enablePanByArgumentAxis\r\n            }\r\n        };\r\n        this._zoomAndPan = zoomAndPan\r\n    },\r\n    members: {\r\n        _setupZoomAndPan: function() {\r\n            this._zoomAndPan.setup(this._themeManager.getOptions(\"zoomAndPan\"))\r\n        }\r\n    },\r\n    dispose: function() {\r\n        this._zoomAndPan.cleanup()\r\n    },\r\n    customize: function(constructor) {\r\n        constructor.addChange({\r\n            code: \"ZOOM_AND_PAN\",\r\n            handler: function() {\r\n                this._setupZoomAndPan()\r\n            },\r\n            isThemeDependent: true,\r\n            isOptionChange: true,\r\n            option: \"zoomAndPan\"\r\n        })\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}