{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/utils.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { refreshPaths } from \"./core/renderers/renderer\";\nimport { each as _each } from \"../core/utils/iterator\";\nexport var prepareSegmentRectPoints = function (left, top, width, height, borderOptions) {\n  var maxSW = ~~((width < height ? width : height) / 2);\n  var sw = borderOptions.width || 0;\n  var newSW = sw < maxSW ? sw : maxSW;\n  left += newSW / 2;\n  top += newSW / 2;\n  width -= newSW;\n  height -= newSW;\n  var right = left + width;\n  var bottom = top + height;\n  var points = [];\n  var segments = [];\n  var segmentSequence;\n  var visiblyOpt = 0;\n  var prevSegmentVisibility = 0;\n  var allSegment = {\n    top: [[left, top], [right, top]],\n    right: [[right, top], [right, bottom]],\n    bottom: [[right, bottom], [left, bottom]],\n    left: [[left, bottom], [left, top]]\n  };\n\n  _each(allSegment, function (seg) {\n    var visibility = !!borderOptions[seg];\n    visiblyOpt = 2 * visiblyOpt + ~~visibility;\n  });\n\n  switch (visiblyOpt) {\n    case 13:\n    case 9:\n      segmentSequence = [\"left\", \"top\", \"right\", \"bottom\"];\n      break;\n\n    case 11:\n      segmentSequence = [\"bottom\", \"left\", \"top\", \"right\"];\n      break;\n\n    default:\n      segmentSequence = [\"top\", \"right\", \"bottom\", \"left\"];\n  }\n\n  _each(segmentSequence, function (_, seg) {\n    var segmentVisibility = !!borderOptions[seg];\n\n    if (!prevSegmentVisibility && segments.length) {\n      points.push(segments);\n      segments = [];\n    }\n\n    if (segmentVisibility) {\n      _each(allSegment[seg].slice(prevSegmentVisibility), function (_, segment) {\n        segments = segments.concat(segment);\n      });\n    }\n\n    prevSegmentVisibility = ~~segmentVisibility;\n  });\n\n  segments.length && points.push(segments);\n  1 === points.length && (points = points[0]);\n  return {\n    points: points,\n    pathType: 15 === visiblyOpt ? \"area\" : \"line\"\n  };\n};\nexport { refreshPaths };","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/utils.js"],"names":["refreshPaths","each","_each","prepareSegmentRectPoints","left","top","width","height","borderOptions","maxSW","sw","newSW","right","bottom","points","segments","segmentSequence","visiblyOpt","prevSegmentVisibility","allSegment","seg","visibility","_","segmentVisibility","length","push","slice","segment","concat","pathType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,YADJ,QAEO,2BAFP;AAGA,SACIC,IAAI,IAAIC,KADZ,QAEO,wBAFP;AAGA,OAAO,IAAIC,wBAAwB,GAAG,UAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,aAAnC,EAAkD;AACpF,MAAIC,KAAK,GAAG,CAAC,EAAE,CAACH,KAAK,GAAGC,MAAR,GAAiBD,KAAjB,GAAyBC,MAA1B,IAAoC,CAAtC,CAAb;AACA,MAAIG,EAAE,GAAGF,aAAa,CAACF,KAAd,IAAuB,CAAhC;AACA,MAAIK,KAAK,GAAGD,EAAE,GAAGD,KAAL,GAAaC,EAAb,GAAkBD,KAA9B;AACAL,EAAAA,IAAI,IAAIO,KAAK,GAAG,CAAhB;AACAN,EAAAA,GAAG,IAAIM,KAAK,GAAG,CAAf;AACAL,EAAAA,KAAK,IAAIK,KAAT;AACAJ,EAAAA,MAAM,IAAII,KAAV;AACA,MAAIC,KAAK,GAAGR,IAAI,GAAGE,KAAnB;AACA,MAAIO,MAAM,GAAGR,GAAG,GAAGE,MAAnB;AACA,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,eAAJ;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AACA,MAAIC,UAAU,GAAG;AACbd,IAAAA,GAAG,EAAE,CACD,CAACD,IAAD,EAAOC,GAAP,CADC,EAED,CAACO,KAAD,EAAQP,GAAR,CAFC,CADQ;AAKbO,IAAAA,KAAK,EAAE,CACH,CAACA,KAAD,EAAQP,GAAR,CADG,EAEH,CAACO,KAAD,EAAQC,MAAR,CAFG,CALM;AASbA,IAAAA,MAAM,EAAE,CACJ,CAACD,KAAD,EAAQC,MAAR,CADI,EAEJ,CAACT,IAAD,EAAOS,MAAP,CAFI,CATK;AAabT,IAAAA,IAAI,EAAE,CACF,CAACA,IAAD,EAAOS,MAAP,CADE,EAEF,CAACT,IAAD,EAAOC,GAAP,CAFE;AAbO,GAAjB;;AAkBAH,EAAAA,KAAK,CAACiB,UAAD,EAAc,UAASC,GAAT,EAAc;AAC7B,QAAIC,UAAU,GAAG,CAAC,CAACb,aAAa,CAACY,GAAD,CAAhC;AACAH,IAAAA,UAAU,GAAG,IAAIA,UAAJ,GAAiB,CAAC,CAACI,UAAhC;AACH,GAHI,CAAL;;AAIA,UAAQJ,UAAR;AACI,SAAK,EAAL;AACA,SAAK,CAAL;AACID,MAAAA,eAAe,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,CAAlB;AACA;;AACJ,SAAK,EAAL;AACIA,MAAAA,eAAe,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,EAA0B,OAA1B,CAAlB;AACA;;AACJ;AACIA,MAAAA,eAAe,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAlB;AATR;;AAWAd,EAAAA,KAAK,CAACc,eAAD,EAAmB,UAASM,CAAT,EAAYF,GAAZ,EAAiB;AACrC,QAAIG,iBAAiB,GAAG,CAAC,CAACf,aAAa,CAACY,GAAD,CAAvC;;AACA,QAAI,CAACF,qBAAD,IAA0BH,QAAQ,CAACS,MAAvC,EAA+C;AAC3CV,MAAAA,MAAM,CAACW,IAAP,CAAYV,QAAZ;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACH;;AACD,QAAIQ,iBAAJ,EAAuB;AACnBrB,MAAAA,KAAK,CAACiB,UAAU,CAACC,GAAD,CAAV,CAAgBM,KAAhB,CAAsBR,qBAAtB,CAAD,EAAgD,UAASI,CAAT,EAAYK,OAAZ,EAAqB;AACtEZ,QAAAA,QAAQ,GAAGA,QAAQ,CAACa,MAAT,CAAgBD,OAAhB,CAAX;AACH,OAFI,CAAL;AAGH;;AACDT,IAAAA,qBAAqB,GAAG,CAAC,CAACK,iBAA1B;AACH,GAZI,CAAL;;AAaAR,EAAAA,QAAQ,CAACS,MAAT,IAAmBV,MAAM,CAACW,IAAP,CAAYV,QAAZ,CAAnB;AACA,QAAMD,MAAM,CAACU,MAAb,KAAwBV,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAvC;AACA,SAAO;AACHA,IAAAA,MAAM,EAAEA,MADL;AAEHe,IAAAA,QAAQ,EAAE,OAAOZ,UAAP,GAAoB,MAApB,GAA6B;AAFpC,GAAP;AAIH,CAnEM;AAoEP,SACIjB,YADJ","sourcesContent":["/**\r\n * DevExtreme (esm/viz/utils.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    refreshPaths\r\n} from \"./core/renderers/renderer\";\r\nimport {\r\n    each as _each\r\n} from \"../core/utils/iterator\";\r\nexport var prepareSegmentRectPoints = function(left, top, width, height, borderOptions) {\r\n    var maxSW = ~~((width < height ? width : height) / 2);\r\n    var sw = borderOptions.width || 0;\r\n    var newSW = sw < maxSW ? sw : maxSW;\r\n    left += newSW / 2;\r\n    top += newSW / 2;\r\n    width -= newSW;\r\n    height -= newSW;\r\n    var right = left + width;\r\n    var bottom = top + height;\r\n    var points = [];\r\n    var segments = [];\r\n    var segmentSequence;\r\n    var visiblyOpt = 0;\r\n    var prevSegmentVisibility = 0;\r\n    var allSegment = {\r\n        top: [\r\n            [left, top],\r\n            [right, top]\r\n        ],\r\n        right: [\r\n            [right, top],\r\n            [right, bottom]\r\n        ],\r\n        bottom: [\r\n            [right, bottom],\r\n            [left, bottom]\r\n        ],\r\n        left: [\r\n            [left, bottom],\r\n            [left, top]\r\n        ]\r\n    };\r\n    _each(allSegment, (function(seg) {\r\n        var visibility = !!borderOptions[seg];\r\n        visiblyOpt = 2 * visiblyOpt + ~~visibility\r\n    }));\r\n    switch (visiblyOpt) {\r\n        case 13:\r\n        case 9:\r\n            segmentSequence = [\"left\", \"top\", \"right\", \"bottom\"];\r\n            break;\r\n        case 11:\r\n            segmentSequence = [\"bottom\", \"left\", \"top\", \"right\"];\r\n            break;\r\n        default:\r\n            segmentSequence = [\"top\", \"right\", \"bottom\", \"left\"]\r\n    }\r\n    _each(segmentSequence, (function(_, seg) {\r\n        var segmentVisibility = !!borderOptions[seg];\r\n        if (!prevSegmentVisibility && segments.length) {\r\n            points.push(segments);\r\n            segments = []\r\n        }\r\n        if (segmentVisibility) {\r\n            _each(allSegment[seg].slice(prevSegmentVisibility), (function(_, segment) {\r\n                segments = segments.concat(segment)\r\n            }))\r\n        }\r\n        prevSegmentVisibility = ~~segmentVisibility\r\n    }));\r\n    segments.length && points.push(segments);\r\n    1 === points.length && (points = points[0]);\r\n    return {\r\n        points: points,\r\n        pathType: 15 === visiblyOpt ? \"area\" : \"line\"\r\n    }\r\n};\r\nexport {\r\n    refreshPaths\r\n};\r\n"]},"metadata":{},"sourceType":"module"}