{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getWidth, getOuterHeight, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { deferUpdate, equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isEmptyObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { focused } from \"../widget/selectors\";\nimport messageLocalization from \"../../localization/message\";\nimport Button from \"../button\";\nimport pointerEvents from \"../../events/pointer\";\nimport ValidationEngine from \"../validation_engine\";\nimport Validator from \"../validator\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport errors from \"../widget/ui.errors\";\nimport { Deferred, when, fromPromise } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport { encodeHtml } from \"../../core/utils/string\";\nimport browser from \"../../core/utils/browser\";\nvar INVALIDATE_CLASS = \"invalid\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar VALIDATOR_CLASS = \"validator\";\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nvar CONTENT_CLASS = \"content\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar PADDING_BETWEEN_TOOLTIPS = 2;\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\nvar COMMAND_TRANSPARENT = \"transparent\";\nvar VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EDIT_DATA_REMOVE_TYPE = \"remove\";\nvar VALIDATION_CANCELLED = \"cancel\";\n\nvar validationResultIsValid = function (result) {\n  return isDefined(result) && result !== VALIDATION_CANCELLED;\n};\n\nvar cellValueShouldBeValidated = function (value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\n\nvar ValidatingController = modules.Controller.inherit({\n  init: function () {\n    this._editingController = this.getController(\"editing\");\n    this.createAction(\"onRowValidating\");\n\n    if (!this._validationState) {\n      this._validationState = [];\n    }\n  },\n  _rowIsValidated: function (change) {\n    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n    return !!validationData && !!validationData.validated;\n  },\n  _getValidationData: function (key, create) {\n    var validationData = this._validationState.filter(data => equalByValue(data.key, key))[0];\n\n    if (!validationData && create) {\n      validationData = {\n        key: key,\n        isValid: true\n      };\n\n      this._validationState.push(validationData);\n    }\n\n    return validationData;\n  },\n  _getBrokenRules: function (validationData, validationResults) {\n    var brokenRules;\n\n    if (validationResults) {\n      brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n    } else {\n      brokenRules = validationData.brokenRules || [];\n    }\n\n    return brokenRules;\n  },\n  _rowValidating: function (validationData, validationResults) {\n    var deferred = new Deferred();\n\n    var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n\n    var brokenRules = this._getBrokenRules(validationData, validationResults);\n\n    var isValid = validationResults ? validationResults.isValid : validationData.isValid;\n    var parameters = {\n      brokenRules: brokenRules,\n      isValid: isValid,\n      key: change.key,\n      newData: change.data,\n      oldData: this._editingController._getOldData(change.key),\n      promise: null,\n      errorText: this.getHiddenValidatorsErrorText(brokenRules)\n    };\n    this.executeAction(\"onRowValidating\", parameters);\n    when(fromPromise(parameters.promise)).always(function () {\n      validationData.isValid = parameters.isValid;\n      validationData.errorText = parameters.errorText;\n      deferred.resolve(parameters);\n    });\n    return deferred.promise();\n  },\n  getHiddenValidatorsErrorText: function (brokenRules) {\n    var brokenRulesMessages = [];\n    each(brokenRules, function (_, brokenRule) {\n      var column = brokenRule.column;\n      var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n      var isVisibleColumn = column && column.visible;\n\n      if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n        brokenRulesMessages.push(brokenRule.message);\n      }\n    });\n    return brokenRulesMessages.join(\", \");\n  },\n  validate: function (isFull) {\n    var isValid = true;\n    var editingController = this._editingController;\n    var deferred = new Deferred();\n    var completeList = [];\n    var editMode = editingController.getEditMode();\n    isFull = isFull || editMode === EDIT_MODE_ROW;\n\n    if (this._isValidationInProgress) {\n      return deferred.resolve(false).promise();\n    }\n\n    this._isValidationInProgress = true;\n\n    if (isFull) {\n      editingController.addDeferred(deferred);\n      var changes = editingController.getChanges();\n      each(changes, (index, _ref) => {\n        var {\n          type: type,\n          key: key\n        } = _ref;\n\n        if (\"remove\" !== type) {\n          var validationData = this._getValidationData(key, true);\n\n          var validationResult = this.validateGroup(validationData);\n          completeList.push(validationResult);\n          validationResult.done(validationResult => {\n            validationData.validated = true;\n            isValid = isValid && validationResult.isValid;\n          });\n        }\n      });\n    } else if (this._currentCellValidator) {\n      var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n      completeList.push(validationResult);\n      validationResult.done(validationResult => {\n        isValid = validationResult.isValid;\n      });\n    }\n\n    when(...completeList).done(() => {\n      this._isValidationInProgress = false;\n      deferred.resolve(isValid);\n    });\n    return deferred.promise();\n  },\n  validateGroup: function (validationData) {\n    var _validationResult;\n\n    var result = new Deferred();\n    var validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\n    var validationResult;\n\n    if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\n      this.resetRowValidationResults(validationData);\n      validationResult = ValidationEngine.validateGroup(validationData);\n    }\n\n    when((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(validationResult => {\n      when(this._rowValidating(validationData, validationResult)).done(result.resolve);\n    });\n    return result.promise();\n  },\n  isRowDataModified: change => !isEmptyObject(change.data),\n  updateValidationState: function (change) {\n    var editMode = this._editingController.getEditMode();\n\n    var key = change.key;\n\n    var validationData = this._getValidationData(key, true);\n\n    if (-1 === FORM_BASED_MODES.indexOf(editMode)) {\n      if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {\n        validationData.isValid = true;\n        return;\n      }\n\n      this.setDisableApplyValidationResults(true);\n      var groupConfig = ValidationEngine.getGroupConfig(validationData);\n\n      if (groupConfig) {\n        var validationResult = ValidationEngine.validateGroup(validationData);\n        when(validationResult.complete || validationResult).done(validationResult => {\n          validationData.isValid = validationResult.isValid;\n          validationData.brokenRules = validationResult.brokenRules;\n        });\n      } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\n        validationData.isValid = true;\n      }\n\n      this.setDisableApplyValidationResults(false);\n    } else {\n      validationData.isValid = true;\n    }\n  },\n  setValidator: function (validator) {\n    this._currentCellValidator = validator;\n  },\n  renderCellPendingIndicator: function ($container) {\n    var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n    if (!$indicator.length) {\n      var $indicatorContainer = $container;\n      $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\n\n      this._createComponent($indicator, LoadIndicator);\n\n      $container.addClass(VALIDATION_PENDING_CLASS);\n    }\n  },\n  disposeCellPendingIndicator: function ($container) {\n    var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n    if ($indicator.length) {\n      var indicator = LoadIndicator.getInstance($indicator);\n\n      if (indicator) {\n        indicator.dispose();\n        indicator.$element().remove();\n      }\n\n      $container.removeClass(VALIDATION_PENDING_CLASS);\n    }\n  },\n  validationStatusChanged: function (result) {\n    var validator = result.validator;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    this.updateCellValidationResult({\n      rowKey: validationGroup.key,\n      columnIndex: column.index,\n      validationResult: result\n    });\n  },\n  validatorInitialized: function (arg) {\n    arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n    arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n  },\n  validatorDisposing: function (arg) {\n    var validator = arg.component;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    var result = this.getCellValidationResult({\n      rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\n      columnIndex: column.index\n    });\n\n    if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n      this.cancelCellValidationResult({\n        change: validationGroup,\n        columnIndex: column.index\n      });\n    }\n  },\n  applyValidationResult: function ($container, result) {\n    var validator = result.validator;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    result.brokenRules && result.brokenRules.forEach(rule => {\n      rule.columnIndex = column.index;\n      rule.column = column;\n    });\n\n    if ($container) {\n      var validationResult = this.getCellValidationResult({\n        rowKey: validationGroup.key,\n        columnIndex: column.index\n      });\n      var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n\n      if (this._disableApplyValidationResults || requestIsDisabled) {\n        return;\n      }\n\n      if (result.status === VALIDATION_STATUS.invalid) {\n        var $focus = $container.find(\":focus\");\n\n        if (!focused($focus)) {\n          eventsEngine.trigger($focus, \"focus\");\n          eventsEngine.trigger($focus, pointerEvents.down);\n        }\n      }\n\n      var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\n\n      if (result.status === VALIDATION_STATUS.pending) {\n        if (editor) {\n          editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n        } else {\n          this.renderCellPendingIndicator($container);\n        }\n      } else if (editor) {\n        editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n      } else {\n        this.disposeCellPendingIndicator($container);\n      }\n\n      $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid);\n    }\n  },\n  _syncInternalEditingData: function (parameters) {\n    var _parameters$row;\n\n    var editingController = this._editingController;\n    var change = editingController.getChangeByKey(parameters.key);\n\n    var oldDataFromState = editingController._getOldData(parameters.key);\n\n    var oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;\n\n    if (change && oldData && !oldDataFromState) {\n      editingController._addInternalData({\n        key: parameters.key,\n        oldData: oldData\n      });\n    }\n  },\n  createValidator: function (parameters, $container) {\n    var editingController = this._editingController;\n    var column = parameters.column;\n    var showEditorAlways = column.showEditorAlways;\n\n    if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n      return;\n    }\n\n    var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\n    var needCreateValidator = editIndex > -1;\n\n    if (!needCreateValidator) {\n      if (!showEditorAlways) {\n        var columnsController = this.getController(\"columns\");\n        var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\n        showEditorAlways = visibleColumns.some(function (column) {\n          return column.showEditorAlways;\n        });\n      }\n\n      var isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\n      var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n        row: parameters.row\n      });\n      needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\n\n      if (isCellOrBatchEditingAllowed && showEditorAlways) {\n        var _parameters$row$oldDa, _parameters$row2;\n\n        editingController._addInternalData({\n          key: parameters.key,\n          oldData: null !== (_parameters$row$oldDa = null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) && void 0 !== _parameters$row$oldDa ? _parameters$row$oldDa : parameters.data\n        });\n      }\n    }\n\n    if (needCreateValidator) {\n      if ($container && !$container.length) {\n        errors.log(\"E1050\");\n        return;\n      }\n\n      this._syncInternalEditingData(parameters);\n\n      var validationData = this._getValidationData(parameters.key, true);\n\n      var getValue = () => {\n        var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n        var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\n        return void 0 !== value ? value : parameters.value;\n      };\n\n      var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n      $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\n      var validator = new Validator($container || $(\"<div>\"), {\n        name: column.caption,\n        validationRules: extend(true, [], column.validationRules),\n        validationGroup: validationData,\n        adapter: useDefaultValidator ? null : {\n          getValue: getValue,\n          applyValidationResults: result => {\n            this.applyValidationResult($container, result);\n          }\n        },\n        dataGetter: function () {\n          var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\n          var change = editingController.getChangeByKey(key);\n\n          var oldData = editingController._getOldData(key);\n\n          return {\n            data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\n            column: column\n          };\n        },\n        onInitialized: this.validatorInitialized.bind(this),\n        onDisposing: this.validatorDisposing.bind(this)\n      });\n\n      if (useDefaultValidator) {\n        var adapter = validator.option(\"adapter\");\n\n        if (adapter) {\n          adapter.getValue = getValue;\n          adapter.validationRequestsCallbacks = [];\n        }\n      }\n\n      return validator;\n    }\n  },\n  setDisableApplyValidationResults: function (flag) {\n    this._disableApplyValidationResults = flag;\n  },\n  getDisableApplyValidationResults: function () {\n    return this._disableApplyValidationResults;\n  },\n  isCurrentValidatorProcessing: function (_ref2) {\n    var {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref2;\n    return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n  },\n  validateCell: function (validator) {\n    var cellParams = {\n      rowKey: validator.option(\"validationGroup\").key,\n      columnIndex: validator.option(\"dataGetter\")().column.index\n    };\n    var validationResult = this.getCellValidationResult(cellParams);\n    var stateRestored = validationResultIsValid(validationResult);\n\n    if (!stateRestored) {\n      validationResult = validator.validate();\n    }\n\n    var deferred = new Deferred();\n    var adapter = validator.option(\"adapter\");\n\n    if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n      this.updateCellValidationResult(cellParams);\n      adapter.applyValidationResults(validationResult);\n    }\n\n    when(validationResult.complete || validationResult).done(validationResult => {\n      stateRestored && adapter.applyValidationResults(validationResult);\n      deferred.resolve(validationResult);\n    });\n    return deferred.promise();\n  },\n  updateCellValidationResult: function (_ref3) {\n    var {\n      rowKey: rowKey,\n      columnIndex: columnIndex,\n      validationResult: validationResult\n    } = _ref3;\n\n    var validationData = this._getValidationData(rowKey);\n\n    if (!validationData) {\n      return;\n    }\n\n    if (!validationData.validationResults) {\n      validationData.validationResults = {};\n    }\n\n    var result;\n\n    if (validationResult) {\n      result = extend({}, validationResult);\n      validationData.validationResults[columnIndex] = result;\n\n      if (validationResult.status === VALIDATION_STATUS.pending) {\n        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n          result.deferred = new Deferred();\n          result.complete.always(() => {\n            result.deferred.resolve();\n          });\n\n          this._editingController.addDeferred(result.deferred);\n        }\n\n        if (this._disableApplyValidationResults) {\n          result.disabledPendingId = validationResult.id;\n          return;\n        }\n      }\n    } else {\n      result = validationData.validationResults[columnIndex];\n    }\n\n    if (result && result.disabledPendingId) {\n      delete result.disabledPendingId;\n    }\n  },\n  getCellValidationResult: function (_ref4) {\n    var _validationData$valid;\n\n    var {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref4;\n\n    var validationData = this._getValidationData(rowKey, true);\n\n    return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex];\n  },\n  removeCellValidationResult: function (_ref5) {\n    var {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref5;\n\n    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n    if (validationData && validationData.validationResults) {\n      this.cancelCellValidationResult({\n        change: change,\n        columnIndex: columnIndex\n      });\n      delete validationData.validationResults[columnIndex];\n    }\n  },\n  cancelCellValidationResult: function (_ref6) {\n    var {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref6;\n\n    var validationData = this._getValidationData(change.key);\n\n    if (change && validationData.validationResults) {\n      var result = validationData.validationResults[columnIndex];\n\n      if (result) {\n        result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\n        validationData.validationResults[columnIndex] = VALIDATION_CANCELLED;\n      }\n    }\n  },\n  resetRowValidationResults: function (validationData) {\n    if (validationData) {\n      validationData.validationResults && delete validationData.validationResults;\n      delete validationData.validated;\n    }\n  },\n  isInvalidCell: function (_ref7) {\n    var {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref7;\n    var result = this.getCellValidationResult({\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    });\n    return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n  },\n  getCellValidator: function (_ref8) {\n    var {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref8;\n\n    var validationData = this._getValidationData(rowKey);\n\n    var groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\n    var validators = groupConfig && groupConfig.validators;\n    return validators && validators.filter(v => {\n      var column = v.option(\"dataGetter\")().column;\n      return column ? column.index === columnIndex : false;\n    })[0];\n  },\n  setCellValidationStatus: function (cellOptions) {\n    var validationResult = this.getCellValidationResult({\n      rowKey: cellOptions.key,\n      columnIndex: cellOptions.column.index\n    });\n\n    if (isDefined(validationResult)) {\n      cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED;\n    } else {\n      delete cellOptions.validationStatus;\n    }\n  }\n});\nexport var validatingModule = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        texts: {\n          validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\n        }\n      }\n    };\n  },\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addChange: function (options, row) {\n          var change = this.callBase(options, row);\n          var validatingController = this.getController(\"validating\");\n\n          if (change && options.type !== EDIT_DATA_REMOVE_TYPE) {\n            validatingController.updateValidationState(change);\n          }\n\n          return change;\n        },\n        _handleChangesChange: function (args) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          args.value.forEach(change => {\n            if (void 0 === validatingController._getValidationData(change.key)) {\n              validatingController.updateValidationState(change);\n            }\n          });\n        },\n        _updateRowAndPageIndices: function () {\n          var that = this;\n          var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n          var rowIndex = startInsertIndex;\n          each(that.getChanges(), (_, _ref9) => {\n            var {\n              key: key,\n              type: type\n            } = _ref9;\n\n            var validationData = this.getController(\"validating\")._getValidationData(key);\n\n            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\n              validationData.pageIndex = that._pageIndex;\n\n              if (type === EDIT_DATA_INSERT_TYPE) {\n                validationData.rowIndex = startInsertIndex;\n              } else {\n                validationData.rowIndex = rowIndex;\n              }\n\n              rowIndex++;\n            }\n          });\n        },\n        _getValidationGroupsInForm: function (detailOptions) {\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(detailOptions.key, true);\n\n          return {\n            validationGroup: validationData\n          };\n        },\n        _validateEditFormAfterUpdate: function (row, isCustomSetCellValue) {\n          if (isCustomSetCellValue && this._editForm && !row.isNewRow) {\n            this._editForm.validate();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _prepareEditCell: function (params) {\n          var isNotCanceled = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          if (isNotCanceled && params.column.showEditorAlways) {\n            validatingController.updateValidationState({\n              key: params.key\n            });\n          }\n\n          return isNotCanceled;\n        },\n        processItems: function (items, changeType) {\n          var changes = this.getChanges();\n          var dataController = this.getController(\"data\");\n          var validatingController = this.getController(\"validating\");\n          items = this.callBase(items, changeType);\n          var itemsCount = items.length;\n\n          var addInValidItem = function (change, validationData) {\n            var data = {\n              key: change.key\n            };\n\n            var index = function (change, items) {\n              var index = -1;\n              var isInsert = change.type === EDIT_DATA_INSERT_TYPE;\n              var key = change.key;\n              each(items, function (i, item) {\n                if (equalByValue(key, isInsert ? item.key : dataController.keyOf(item))) {\n                  index = i;\n                  return false;\n                }\n              });\n              return index;\n            }(change, items);\n\n            if (index >= 0) {\n              return;\n            }\n\n            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\n            var rowIndex = validationData.rowIndex;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          };\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n            changes.forEach(change => {\n              var key = change.key;\n\n              var validationData = validatingController._getValidationData(key);\n\n              if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\n                addInValidItem(change, validationData);\n              }\n            });\n          }\n\n          return items;\n        },\n        processDataItem: function (item) {\n          var isInserted = item.data[INSERT_INDEX];\n          var key = isInserted ? item.data.key : item.key;\n          var editMode = this.getEditMode();\n\n          if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n            var changes = this.getChanges();\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n            if (editIndex >= 0) {\n              var change = changes[editIndex];\n\n              if (change.type !== EDIT_DATA_INSERT_TYPE) {\n                var oldData = this._getOldData(change.key);\n\n                item.data = extend(true, {}, oldData, change.data);\n                item.key = key;\n              }\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _createInvisibleColumnValidators: function (changes) {\n          var that = this;\n          var validatingController = this.getController(\"validating\");\n          var columnsController = this.getController(\"columns\");\n          var columns = columnsController.getColumns();\n          var invisibleColumns = columnsController.getInvisibleColumns().filter(column => !column.isBand);\n          var groupColumns = columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));\n          var invisibleColumnValidators = [];\n\n          var isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\n\n          invisibleColumns.push(...groupColumns);\n\n          if (-1 === FORM_BASED_MODES.indexOf(this.getEditMode())) {\n            each(columns, function (_, column) {\n              changes.forEach(function (change) {\n                var data;\n\n                if (isCellVisible(column, change.key)) {\n                  return;\n                }\n\n                if (change.type === EDIT_DATA_INSERT_TYPE) {\n                  data = change.data;\n                } else if (\"update\" === change.type) {\n                  var oldData = that._getOldData(change.key);\n\n                  data = createObjectWithChanges(oldData, change.data);\n                }\n\n                if (data) {\n                  var validator = validatingController.createValidator({\n                    column: column,\n                    key: change.key,\n                    value: column.calculateCellValue(data)\n                  });\n\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n\n          return function () {\n            invisibleColumnValidators.forEach(function (validator) {\n              validator.dispose();\n            });\n          };\n        },\n        _beforeSaveEditData: function (change, editIndex) {\n          var result = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n          if (change) {\n            var isValid = \"remove\" === change.type || validationData.isValid;\n            result = result || !isValid;\n          } else {\n            var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\n\n            result = new Deferred();\n            this.executeOperation(result, () => {\n              validatingController.validate(true).done(isFullValid => {\n                disposeValidators();\n\n                this._updateRowAndPageIndices();\n\n                switch (this.getEditMode()) {\n                  case EDIT_MODE_CELL:\n                    if (!isFullValid) {\n                      this._focusEditingCell();\n                    }\n\n                    break;\n\n                  case EDIT_MODE_BATCH:\n                    if (!isFullValid) {\n                      this._resetEditRowKey();\n\n                      this._resetEditColumnName();\n\n                      this.getController(\"data\").updateItems();\n                    }\n\n                }\n\n                result.resolve(!isFullValid);\n              });\n            });\n          }\n\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell: function (rowIndex, columnIndex, item) {\n          var result = this.callBase(rowIndex, columnIndex, item);\n\n          if (this.getEditMode() === EDIT_MODE_CELL) {\n            var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n\n            var validator = $cell && $cell.data(\"dxValidator\");\n            var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n            var value = validator && validator.option(\"adapter\").getValue();\n\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n              var validatingController = this.getController(\"validating\");\n              var deferred = new Deferred();\n              when(validatingController.validateCell(validator), result).done((validationResult, result) => {\n                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n              });\n              return deferred.promise();\n            } else if (!validator) {\n              return result;\n            }\n          }\n        },\n        _afterSaveEditData: function (cancel) {\n          var $firstErrorRow;\n          var isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;\n          each(this.getChanges(), (_, change) => {\n            var $errorRow = this._showErrorRow(change);\n\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n\n          if ($firstErrorRow) {\n            var scrollable = this._rowsView.getScrollable();\n\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n\n          if (cancel && isCellEditMode && this._needUpdateRow()) {\n            var editRowIndex = this.getEditRowIndex();\n\n            this._dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [editRowIndex]\n            });\n\n            this._focusEditingCell();\n          } else if (!cancel) {\n            var shouldResetValidationState = true;\n\n            if (isCellEditMode) {\n              var columns = this.getController(\"columns\").getColumns();\n              var columnsWithValidatingEditors = columns.filter(col => {\n                var _col$validationRules;\n\n                return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0;\n              }).length > 0;\n              shouldResetValidationState = !columnsWithValidatingEditors;\n            }\n\n            if (shouldResetValidationState) {\n              this.getController(\"validating\")._validationState = [];\n            }\n          }\n        },\n        _handleDataChanged: function (args) {\n          var validationState = this.getController(\"validating\")._validationState;\n\n          if (\"standard\" === this.option(\"scrolling.mode\")) {\n            this.resetRowAndPageIndices();\n          }\n\n          if (\"prepend\" === args.changeType) {\n            each(validationState, function (_, validationData) {\n              validationData.rowIndex += args.items.length;\n            });\n          }\n\n          this.callBase(args);\n        },\n        resetRowAndPageIndices: function () {\n          var validationState = this.getController(\"validating\")._validationState;\n\n          each(validationState, (_, validationData) => {\n            if (validationData.pageIndex !== this._pageIndex) {\n              delete validationData.pageIndex;\n              delete validationData.rowIndex;\n            }\n          });\n        },\n        _beforeCancelEditData: function () {\n          var validatingController = this.getController(\"validating\");\n          validatingController._validationState = [];\n          this.callBase();\n        },\n        _showErrorRow: function (change) {\n          var $popupContent;\n          var errorHandling = this.getController(\"errorHandling\");\n          var items = this.getController(\"data\").items();\n          var rowIndex = this.getIndexByKey(change.key, items);\n\n          var validationData = this.getController(\"validating\")._getValidationData(change.key);\n\n          if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue: function (e) {\n          var validatingController = this.getController(\"validating\");\n          var deferred = new Deferred();\n          validatingController.removeCellValidationResult({\n            change: this.getChangeByKey(e.key),\n            columnIndex: e.column.index\n          });\n          this.callBase.apply(this, arguments).done(() => {\n            var currentValidator = validatingController.getCellValidator({\n              rowKey: e.key,\n              columnIndex: e.column.index\n            });\n            when(currentValidator && validatingController.validateCell(currentValidator)).done(validationResult => {\n              this.getController(\"editorFactory\").refocus();\n              deferred.resolve(validationResult);\n            });\n          });\n          return deferred.promise();\n        },\n        highlightDataCell: function ($cell, parameters) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          validatingController.setCellValidationStatus(parameters);\n          var isEditableCell = !!parameters.setValue;\n          var cellModified = this.isCellModified(parameters);\n          var isValidated = isDefined(parameters.validationStatus);\n          var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\n\n          if (needValidation) {\n            var validator = $cell.data(\"dxValidator\");\n\n            if (validator) {\n              when(this.getController(\"validating\").validateCell(validator)).done(() => {\n                validatingController.setCellValidationStatus(parameters);\n              });\n            }\n          }\n        },\n        getChangeByKey: function (key) {\n          var changes = this.getChanges();\n          return changes[gridCoreUtils.getIndexByKey(key, changes)];\n        },\n        isCellModified: function (parameters) {\n          var cellModified = this.callBase(parameters);\n          var change = this.getChangeByKey(parameters.key);\n          var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\n            rowKey: parameters.key,\n            columnIndex: parameters.column.index\n          });\n          return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid;\n        }\n      },\n      editorFactory: {\n        _showRevertButton: function ($container) {\n          if (!$container || !$container.length) {\n            return;\n          }\n\n          var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n          var $overlayContainer = $container.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n          $tooltipElement && $tooltipElement.remove();\n          $tooltipElement = $(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\n          var tooltipOptions = {\n            animation: null,\n            visible: true,\n            width: \"auto\",\n            height: \"auto\",\n            target: $container,\n            shading: false,\n            container: $overlayContainer,\n            propagateOutsideClick: true,\n            closeOnOutsideClick: false,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            contentTemplate: () => {\n              var $buttonElement = $(\"<div>\").addClass(REVERT_BUTTON_CLASS);\n              var buttonOptions = {\n                icon: \"revert\",\n                hint: this.option(\"editing.texts.validationCancelChanges\"),\n                onClick: () => {\n                  this._editingController.cancelEditData();\n                }\n              };\n              return new Button($buttonElement, buttonOptions).$element();\n            },\n            position: {\n              my: \"left top\",\n              at: \"right top\",\n              offset: \"1 0\",\n              collision: \"flip\",\n              boundaryOffset: \"0 0\",\n              boundary: this._rowsView.element()\n            },\n            onPositioned: this._positionedHandler.bind(this)\n          };\n          return new Overlay($tooltipElement, tooltipOptions);\n        },\n        _hideFixedGroupCell: function ($cell, overlayOptions) {\n          var $nextFixedRowElement;\n          var $groupCellElement;\n\n          var isFixedColumns = this._rowsView.isFixedColumns();\n\n          var isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\n\n          if (isFixedColumns && !isFormOrPopupEditMode) {\n            var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n\n            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n              $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n              $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\n\n              if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                $groupCellElement.css(\"visibility\", \"hidden\");\n\n                overlayOptions.onDisposing = function () {\n                  $groupCellElement.css(\"visibility\", \"\");\n                };\n              }\n            }\n          }\n        },\n        _positionedHandler: function (e, isOverlayVisible) {\n          if (!e.component.__skipPositionProcessing) {\n            var isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n\n            var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n\n            var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n\n            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n\n            if (normalizedPosition) {\n              e.component.option(normalizedPosition);\n            } else if (needRepaint) {\n              e.component.repaint();\n            }\n          }\n        },\n        _showValidationMessage: function ($cell, messages, alignment, revertTooltip) {\n          var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n          var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n          var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\n          var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n          var $overlayContainer = $cell.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n          var errorMessageText = \"\";\n          messages && messages.forEach(function (message) {\n            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message);\n          });\n          var $overlayElement = $(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\n          var overlayOptions = {\n            target: $cell,\n            container: $overlayContainer,\n            shading: false,\n            width: \"auto\",\n            height: \"auto\",\n            visible: true,\n            animation: false,\n            propagateOutsideClick: true,\n            closeOnOutsideClick: false,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            position: {\n              collision: \"flip\",\n              boundary: this._rowsView.element(),\n              boundaryOffset: \"0 0\",\n              offset: {\n                x: 0,\n                y: !isOverlayVisible && browser.mozilla ? -1 : 0\n              },\n              my: myPosition,\n              at: atPosition\n            },\n            onPositioned: e => {\n              this._positionedHandler(e, isOverlayVisible);\n\n              this._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell);\n            }\n          };\n\n          this._hideFixedGroupCell($cell, overlayOptions);\n\n          new Overlay($overlayElement, overlayOptions);\n        },\n        _normalizeValidationMessagePositionAndMaxWidth: function (options, isRevertButton, isOverlayVisible) {\n          var fixedColumns = this._columnsController.getFixedColumns();\n\n          if (!fixedColumns || !fixedColumns.length) {\n            return;\n          }\n\n          var position;\n          var visibleTableWidth = !isRevertButton && (that = this, element = options.element, rowIndex = $(element).closest(\"tr\").index(), $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\"), that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0));\n          var that, element, rowIndex, $cellElements;\n          var $overlayContentElement = options.component.$content();\n          var validationMessageWidth = getOuterWidth($overlayContentElement, true);\n          var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n\n          var columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\n\n          var boundaryNonFixedColumnsInfo = function (fixedColumns) {\n            var firstNonFixedColumnIndex;\n            var lastNonFixedColumnIndex;\n            fixedColumns.some((column, index) => {\n              if (column.command === COMMAND_TRANSPARENT) {\n                firstNonFixedColumnIndex = 0 === index ? -1 : index;\n                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n                return true;\n              }\n            });\n            return {\n              startColumnIndex: firstNonFixedColumnIndex,\n              endColumnIndex: lastNonFixedColumnIndex\n            };\n          }(fixedColumns);\n\n          if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n            position = {\n              collision: \"none flip\",\n              my: \"top left\",\n              at: isOverlayVisible ? \"top right\" : \"bottom left\"\n            };\n          } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n            position = {\n              collision: \"none flip\",\n              my: \"top right\",\n              at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n            };\n\n            if (isRevertButton) {\n              position.offset = \"-1 0\";\n            }\n          }\n\n          return position && {\n            position: position,\n            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n          };\n        },\n        _shiftValidationMessageIfNeed: function ($content, $revertContent, $cell) {\n          if (!$revertContent) {\n            return;\n          }\n\n          var contentOffset = $content.offset();\n          var revertContentOffset = $revertContent.offset();\n\n          if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\n            var left = getWidth($revertContent) + PADDING_BETWEEN_TOOLTIPS;\n            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n          }\n        },\n        _getTooltipsSelector: function () {\n          var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\n          var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n          return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass;\n        },\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n          this._columnsController = this.getController(\"columns\");\n          this._rowsView = this.getView(\"rowsView\");\n        },\n        loseFocus: function (skipValidator) {\n          if (!skipValidator) {\n            this.getController(\"validating\").setValidator(null);\n          }\n\n          this.callBase();\n        },\n        updateCellState: function ($element, validationResult, hideBorder) {\n          var _change$data;\n\n          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          var $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\n          var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\n          var change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\n          var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n          var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\n          var revertTooltip;\n\n          if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\n            if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n              revertTooltip = this._showRevertButton($focus);\n            }\n          }\n\n          var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n\n          if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n            var errorMessages = [];\n            validationResult.brokenRules.forEach(function (rule) {\n              errorMessages.push(rule.message);\n            });\n\n            this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip);\n          }\n\n          !hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n        },\n        focus: function ($element, hideBorder) {\n          if (!arguments.length) {\n            return this.callBase();\n          }\n\n          var $tooltips = $element && $element.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\n          $tooltips && $tooltips.remove();\n\n          if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\")) {\n            return this.callBase($element, hideBorder);\n          }\n\n          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          var callBase = this.callBase;\n          var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\n          var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n          var editingController = this.getController(\"editing\");\n          var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\n          var validationResult;\n          var validatingController = this.getController(\"validating\");\n\n          if (validator) {\n            validatingController.setValidator(validator);\n            var value = validator.option(\"adapter\").getValue();\n\n            if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\n              editingController.waitForDeferredOperations().done(() => {\n                when(validatingController.validateCell(validator)).done(result => {\n                  validationResult = result;\n                  var column = validationResult.validator.option(\"dataGetter\")().column;\n\n                  if (change && column && !validatingController.isCurrentValidatorProcessing({\n                    rowKey: change.key,\n                    columnIndex: column.index\n                  })) {\n                    return;\n                  }\n\n                  if (validationResult.status === VALIDATION_STATUS.invalid) {\n                    hideBorder = true;\n                  }\n\n                  this.updateCellState($element, validationResult, hideBorder);\n                  callBase.call(this, $element, hideBorder);\n                });\n              });\n              return this.callBase($element, hideBorder);\n            }\n          }\n\n          this.updateCellState($element, validationResult, hideBorder);\n          return this.callBase($element, hideBorder);\n        },\n        getEditorInstance: function ($container) {\n          var $editor = $container.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      },\n      data: {\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var _oldRow$cells, _cell$column$validati;\n\n          var cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];\n          var oldValidationStatus = cell && cell.validationStatus;\n          var validatingController = this.getController(\"validating\");\n          var validationResult = validatingController.getCellValidationResult({\n            rowKey: oldRow.key,\n            columnIndex: columnIndex\n          });\n\n          var validationData = validatingController._getValidationData(oldRow.key);\n\n          var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n          var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n          var cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));\n          var editingChanged = oldRow.isEditing !== newRow.isEditing;\n          var hasValidationRules = null === cell || void 0 === cell ? void 0 : null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;\n\n          if (editingChanged && hasValidationRules || oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight: function ($table) {\n          var $rowElements;\n          var $freeSpaceRowElement;\n          var $freeSpaceRowElements;\n          var $element = this.element();\n          var $tooltipContent = $element && $element.find(\".\" + this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\n          this.callBase($table);\n\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = this._getRowElements();\n            $freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\n              $freeSpaceRowElements.show();\n              setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\n              return true;\n            }\n          }\n        },\n        _formItemPrepared: function (cellOptions, $container) {\n          this.callBase.apply(this, arguments);\n          deferUpdate(() => {\n            var $editor = $container.find(\".dx-widget\").first();\n            var isEditorDisposed = $editor.length && !$editor.children().length;\n\n            if (!isEditorDisposed) {\n              this.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared: function ($cell, parameters) {\n          if (!this.getController(\"editing\").isFormOrPopupEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _restoreErrorRow: function (contentTable) {\n          var editingController = this.getController(\"editing\");\n          editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\n            var rowOptions = $(item).data(\"options\");\n\n            if (rowOptions) {\n              var change = editingController.getChangeByKey(rowOptions.key);\n              change && editingController._showErrorRow(change);\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.validating.js"],"names":["getOuterWidth","getWidth","getOuterHeight","setHeight","$","eventsEngine","modules","gridCoreUtils","createObjectWithChanges","deferUpdate","equalByValue","each","isDefined","isEmptyObject","extend","focused","messageLocalization","Button","pointerEvents","ValidationEngine","Validator","Overlay","errors","Deferred","when","fromPromise","LoadIndicator","encodeHtml","browser","INVALIDATE_CLASS","REVERT_TOOLTIP_CLASS","ROWS_VIEW_CLASS","INVALID_MESSAGE_CLASS","WIDGET_INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ALWAYS_CLASS","REVERT_BUTTON_CLASS","VALIDATOR_CLASS","PENDING_INDICATOR_CLASS","VALIDATION_PENDING_CLASS","CONTENT_CLASS","INSERT_INDEX","PADDING_BETWEEN_TOOLTIPS","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_POPUP","GROUP_CELL_CLASS","FORM_BASED_MODES","COMMAND_TRANSPARENT","VALIDATION_STATUS","valid","invalid","pending","EDIT_DATA_INSERT_TYPE","EDIT_DATA_REMOVE_TYPE","VALIDATION_CANCELLED","validationResultIsValid","result","cellValueShouldBeValidated","value","rowOptions","isNewRow","ValidatingController","Controller","inherit","init","_editingController","getController","createAction","_validationState","_rowIsValidated","change","validationData","_getValidationData","key","validated","create","filter","data","isValid","push","_getBrokenRules","validationResults","brokenRules","brokenRule","_rowValidating","deferred","getChangeByKey","parameters","newData","oldData","_getOldData","promise","errorText","getHiddenValidatorsErrorText","executeAction","always","resolve","brokenRulesMessages","_","column","isGroupExpandColumn","groupIndex","showWhenGrouped","isVisibleColumn","visible","validator","$element","parent","length","message","join","validate","isFull","editingController","completeList","editMode","getEditMode","_isValidationInProgress","addDeferred","changes","getChanges","index","_ref","type","validationResult","validateGroup","done","_currentCellValidator","_findGroup","_validationResult","getGroupConfig","validators","resetRowValidationResults","complete","isRowDataModified","updateValidationState","indexOf","setDisableApplyValidationResults","groupConfig","setValidator","renderCellPendingIndicator","$container","$indicator","find","$indicatorContainer","appendTo","addClass","_createComponent","disposeCellPendingIndicator","indicator","getInstance","dispose","remove","removeClass","validationStatusChanged","validationGroup","option","updateCellValidationResult","rowKey","columnIndex","validatorInitialized","arg","component","on","bind","validatorDisposing","getCellValidationResult","status","cancelCellValidationResult","applyValidationResult","forEach","rule","requestIsDisabled","disabledPendingId","id","_disableApplyValidationResults","$focus","trigger","down","editor","editCellTemplate","getEditorInstance","toggleClass","addWidgetPrefix","_syncInternalEditingData","_parameters$row","oldDataFromState","row","_addInternalData","createValidator","showEditorAlways","command","validationRules","Array","isArray","editIndex","getIndexByKey","needCreateValidator","columnsController","visibleColumns","getVisibleColumns","some","isEditRow","isCellOrBatchEditingAllowed","isCellOrBatchEditMode","allowUpdating","_parameters$row$oldDa","_parameters$row2","log","getValue","calculateCellValue","useDefaultValidator","hasClass","name","caption","adapter","applyValidationResults","dataGetter","onInitialized","onDisposing","validationRequestsCallbacks","flag","getDisableApplyValidationResults","isCurrentValidatorProcessing","_ref2","validateCell","cellParams","stateRestored","_ref3","_ref4","_validationData$valid","removeCellValidationResult","_ref5","_ref6","reject","isInvalidCell","_ref7","getCellValidator","_ref8","v","setCellValidationStatus","cellOptions","validationStatus","validatingModule","defaultOptions","editing","texts","validationCancelChanges","format","controllers","validating","extenders","_addChange","options","callBase","validatingController","_handleChangesChange","args","apply","arguments","_updateRowAndPageIndices","that","startInsertIndex","getView","getTopVisibleItemIndex","rowIndex","_ref9","pageIndex","_pageIndex","_getValidationGroupsInForm","detailOptions","_validateEditFormAfterUpdate","isCustomSetCellValue","_editForm","_prepareEditCell","params","isNotCanceled","processItems","items","changeType","dataController","itemsCount","addInValidItem","isInsert","i","item","keyOf","splice","processDataItem","isInserted","_createInvisibleColumnValidators","columns","getColumns","invisibleColumns","getInvisibleColumns","isBand","groupColumns","getGroupColumns","invisibleColumnValidators","isCellVisible","_dataController","getRowIndexByKey","_beforeSaveEditData","disposeValidators","executeOperation","isFullValid","_focusEditingCell","_resetEditRowKey","_resetEditColumnName","updateItems","_beforeEditCell","$cell","_rowsView","_getCellElement","closest","_afterSaveEditData","cancel","$firstErrorRow","isCellEditMode","$errorRow","_showErrorRow","scrollable","getScrollable","update","scrollToElement","_needUpdateRow","editRowIndex","getEditRowIndex","rowIndices","shouldResetValidationState","columnsWithValidatingEditors","col","_col$validationRules","_handleDataChanged","validationState","resetRowAndPageIndices","_beforeCancelEditData","$popupContent","errorHandling","getPopupContent","renderErrorRow","updateFieldValue","e","currentValidator","refocus","highlightDataCell","isEditableCell","setValue","cellModified","isCellModified","isValidated","needValidation","setCellValue","isCellInvalid","editorFactory","_showRevertButton","$tooltipElement","$overlayContainer","concat","tooltipOptions","animation","width","height","target","shading","container","propagateOutsideClick","closeOnOutsideClick","copyRootClassesToWrapper","_ignoreCopyRootClassesToWrapperDeprecation","contentTemplate","$buttonElement","buttonOptions","icon","hint","onClick","cancelEditData","position","my","at","offset","collision","boundaryOffset","boundary","element","onPositioned","_positionedHandler","_hideFixedGroupCell","overlayOptions","$nextFixedRowElement","$groupCellElement","isFixedColumns","isFormOrPopupEditMode","nextRowOptions","next","rowType","getRowElement","last","get","style","visibility","css","isOverlayVisible","__skipPositionProcessing","isRevertButton","needRepaint","updateFreeSpaceRowHeight","normalizedPosition","_normalizeValidationMessagePositionAndMaxWidth","repaint","_showValidationMessage","messages","alignment","revertTooltip","editorPopup","myPosition","atPosition","errorMessageText","$overlayElement","html","x","y","mozilla","_shiftValidationMessageIfNeed","$content","fixedColumns","_columnsController","getFixedColumns","visibleTableWidth","$cellElements","first","children","_getWidths","reduce","w1","w2","$overlayContentElement","validationMessageWidth","needMaxWidth","getCellIndex","boundaryNonFixedColumnsInfo","firstNonFixedColumnIndex","lastNonFixedColumnIndex","colspan","startColumnIndex","endColumnIndex","maxWidth","$revertContent","contentOffset","revertContentOffset","top","left","_getTooltipsSelector","invalidMessageClass","revertTooltipClass","loseFocus","skipValidator","updateCellState","hideBorder","_change$data","_getFocusCellSelector","is","isSaving","showValidationMessage","errorMessages","focus","$tooltips","eq","waitForDeferredOperations","call","$editor","getWidgetInstance","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","_oldRow$cells","_cell$column$validati","cell","cells","oldValidationStatus","newValidationStatus","rowIsModified","JSON","stringify","modifiedValues","cellIsMarkedAsInvalid","cellElement","editingChanged","isEditing","hasValidationRules","views","rowsView","$table","$rowElements","$freeSpaceRowElement","$freeSpaceRowElements","$tooltipContent","_getRowElements","_getFreeSpaceRowElements","show","_formItemPrepared","isEditorDisposed","_cellPrepared","_restoreErrorRow","contentTable","hasChanges"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getWidth,\r\n    getOuterHeight,\r\n    setHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    deferUpdate,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    focused\r\n} from \"../widget/selectors\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Button from \"../button\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport ValidationEngine from \"../validation_engine\";\r\nimport Validator from \"../validator\";\r\nimport Overlay from \"../overlay/ui.overlay\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    Deferred,\r\n    when,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport LoadIndicator from \"../load_indicator\";\r\nimport {\r\n    encodeHtml\r\n} from \"../../core/utils/string\";\r\nimport browser from \"../../core/utils/browser\";\r\nvar INVALIDATE_CLASS = \"invalid\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\r\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\r\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\r\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nvar VALIDATOR_CLASS = \"validator\";\r\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar PADDING_BETWEEN_TOOLTIPS = 2;\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\r\nvar COMMAND_TRANSPARENT = \"transparent\";\r\nvar VALIDATION_STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nvar VALIDATION_CANCELLED = \"cancel\";\r\nvar validationResultIsValid = function(result) {\r\n    return isDefined(result) && result !== VALIDATION_CANCELLED\r\n};\r\nvar cellValueShouldBeValidated = function(value, rowOptions) {\r\n    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow\r\n};\r\nvar ValidatingController = modules.Controller.inherit({\r\n    init: function() {\r\n        this._editingController = this.getController(\"editing\");\r\n        this.createAction(\"onRowValidating\");\r\n        if (!this._validationState) {\r\n            this._validationState = []\r\n        }\r\n    },\r\n    _rowIsValidated: function(change) {\r\n        var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        return !!validationData && !!validationData.validated\r\n    },\r\n    _getValidationData: function(key, create) {\r\n        var validationData = this._validationState.filter(data => equalByValue(data.key, key))[0];\r\n        if (!validationData && create) {\r\n            validationData = {\r\n                key: key,\r\n                isValid: true\r\n            };\r\n            this._validationState.push(validationData)\r\n        }\r\n        return validationData\r\n    },\r\n    _getBrokenRules: function(validationData, validationResults) {\r\n        var brokenRules;\r\n        if (validationResults) {\r\n            brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]\r\n        } else {\r\n            brokenRules = validationData.brokenRules || []\r\n        }\r\n        return brokenRules\r\n    },\r\n    _rowValidating: function(validationData, validationResults) {\r\n        var deferred = new Deferred;\r\n        var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n        var brokenRules = this._getBrokenRules(validationData, validationResults);\r\n        var isValid = validationResults ? validationResults.isValid : validationData.isValid;\r\n        var parameters = {\r\n            brokenRules: brokenRules,\r\n            isValid: isValid,\r\n            key: change.key,\r\n            newData: change.data,\r\n            oldData: this._editingController._getOldData(change.key),\r\n            promise: null,\r\n            errorText: this.getHiddenValidatorsErrorText(brokenRules)\r\n        };\r\n        this.executeAction(\"onRowValidating\", parameters);\r\n        when(fromPromise(parameters.promise)).always((function() {\r\n            validationData.isValid = parameters.isValid;\r\n            validationData.errorText = parameters.errorText;\r\n            deferred.resolve(parameters)\r\n        }));\r\n        return deferred.promise()\r\n    },\r\n    getHiddenValidatorsErrorText: function(brokenRules) {\r\n        var brokenRulesMessages = [];\r\n        each(brokenRules, (function(_, brokenRule) {\r\n            var column = brokenRule.column;\r\n            var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\r\n            var isVisibleColumn = column && column.visible;\r\n            if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\r\n                brokenRulesMessages.push(brokenRule.message)\r\n            }\r\n        }));\r\n        return brokenRulesMessages.join(\", \")\r\n    },\r\n    validate: function(isFull) {\r\n        var isValid = true;\r\n        var editingController = this._editingController;\r\n        var deferred = new Deferred;\r\n        var completeList = [];\r\n        var editMode = editingController.getEditMode();\r\n        isFull = isFull || editMode === EDIT_MODE_ROW;\r\n        if (this._isValidationInProgress) {\r\n            return deferred.resolve(false).promise()\r\n        }\r\n        this._isValidationInProgress = true;\r\n        if (isFull) {\r\n            editingController.addDeferred(deferred);\r\n            var changes = editingController.getChanges();\r\n            each(changes, (index, _ref) => {\r\n                var {\r\n                    type: type,\r\n                    key: key\r\n                } = _ref;\r\n                if (\"remove\" !== type) {\r\n                    var validationData = this._getValidationData(key, true);\r\n                    var validationResult = this.validateGroup(validationData);\r\n                    completeList.push(validationResult);\r\n                    validationResult.done(validationResult => {\r\n                        validationData.validated = true;\r\n                        isValid = isValid && validationResult.isValid\r\n                    })\r\n                }\r\n            })\r\n        } else if (this._currentCellValidator) {\r\n            var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\r\n            completeList.push(validationResult);\r\n            validationResult.done(validationResult => {\r\n                isValid = validationResult.isValid\r\n            })\r\n        }\r\n        when(...completeList).done(() => {\r\n            this._isValidationInProgress = false;\r\n            deferred.resolve(isValid)\r\n        });\r\n        return deferred.promise()\r\n    },\r\n    validateGroup: function(validationData) {\r\n        var _validationResult;\r\n        var result = new Deferred;\r\n        var validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        var validationResult;\r\n        if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\r\n            this.resetRowValidationResults(validationData);\r\n            validationResult = ValidationEngine.validateGroup(validationData)\r\n        }\r\n        when((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(validationResult => {\r\n            when(this._rowValidating(validationData, validationResult)).done(result.resolve)\r\n        });\r\n        return result.promise()\r\n    },\r\n    isRowDataModified: change => !isEmptyObject(change.data),\r\n    updateValidationState: function(change) {\r\n        var editMode = this._editingController.getEditMode();\r\n        var key = change.key;\r\n        var validationData = this._getValidationData(key, true);\r\n        if (-1 === FORM_BASED_MODES.indexOf(editMode)) {\r\n            if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {\r\n                validationData.isValid = true;\r\n                return\r\n            }\r\n            this.setDisableApplyValidationResults(true);\r\n            var groupConfig = ValidationEngine.getGroupConfig(validationData);\r\n            if (groupConfig) {\r\n                var validationResult = ValidationEngine.validateGroup(validationData);\r\n                when(validationResult.complete || validationResult).done(validationResult => {\r\n                    validationData.isValid = validationResult.isValid;\r\n                    validationData.brokenRules = validationResult.brokenRules\r\n                })\r\n            } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\r\n                validationData.isValid = true\r\n            }\r\n            this.setDisableApplyValidationResults(false)\r\n        } else {\r\n            validationData.isValid = true\r\n        }\r\n    },\r\n    setValidator: function(validator) {\r\n        this._currentCellValidator = validator\r\n    },\r\n    renderCellPendingIndicator: function($container) {\r\n        var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n        if (!$indicator.length) {\r\n            var $indicatorContainer = $container;\r\n            $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\r\n            this._createComponent($indicator, LoadIndicator);\r\n            $container.addClass(VALIDATION_PENDING_CLASS)\r\n        }\r\n    },\r\n    disposeCellPendingIndicator: function($container) {\r\n        var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n        if ($indicator.length) {\r\n            var indicator = LoadIndicator.getInstance($indicator);\r\n            if (indicator) {\r\n                indicator.dispose();\r\n                indicator.$element().remove()\r\n            }\r\n            $container.removeClass(VALIDATION_PENDING_CLASS)\r\n        }\r\n    },\r\n    validationStatusChanged: function(result) {\r\n        var validator = result.validator;\r\n        var validationGroup = validator.option(\"validationGroup\");\r\n        var column = validator.option(\"dataGetter\")().column;\r\n        this.updateCellValidationResult({\r\n            rowKey: validationGroup.key,\r\n            columnIndex: column.index,\r\n            validationResult: result\r\n        })\r\n    },\r\n    validatorInitialized: function(arg) {\r\n        arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\r\n        arg.component.on(\"validated\", this.validationStatusChanged.bind(this))\r\n    },\r\n    validatorDisposing: function(arg) {\r\n        var validator = arg.component;\r\n        var validationGroup = validator.option(\"validationGroup\");\r\n        var column = validator.option(\"dataGetter\")().column;\r\n        var result = this.getCellValidationResult({\r\n            rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\r\n            columnIndex: column.index\r\n        });\r\n        if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\r\n            this.cancelCellValidationResult({\r\n                change: validationGroup,\r\n                columnIndex: column.index\r\n            })\r\n        }\r\n    },\r\n    applyValidationResult: function($container, result) {\r\n        var validator = result.validator;\r\n        var validationGroup = validator.option(\"validationGroup\");\r\n        var column = validator.option(\"dataGetter\")().column;\r\n        result.brokenRules && result.brokenRules.forEach(rule => {\r\n            rule.columnIndex = column.index;\r\n            rule.column = column\r\n        });\r\n        if ($container) {\r\n            var validationResult = this.getCellValidationResult({\r\n                rowKey: validationGroup.key,\r\n                columnIndex: column.index\r\n            });\r\n            var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\r\n            if (this._disableApplyValidationResults || requestIsDisabled) {\r\n                return\r\n            }\r\n            if (result.status === VALIDATION_STATUS.invalid) {\r\n                var $focus = $container.find(\":focus\");\r\n                if (!focused($focus)) {\r\n                    eventsEngine.trigger($focus, \"focus\");\r\n                    eventsEngine.trigger($focus, pointerEvents.down)\r\n                }\r\n            }\r\n            var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\r\n            if (result.status === VALIDATION_STATUS.pending) {\r\n                if (editor) {\r\n                    editor.option(\"validationStatus\", VALIDATION_STATUS.pending)\r\n                } else {\r\n                    this.renderCellPendingIndicator($container)\r\n                }\r\n            } else if (editor) {\r\n                editor.option(\"validationStatus\", VALIDATION_STATUS.valid)\r\n            } else {\r\n                this.disposeCellPendingIndicator($container)\r\n            }\r\n            $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid)\r\n        }\r\n    },\r\n    _syncInternalEditingData: function(parameters) {\r\n        var _parameters$row;\r\n        var editingController = this._editingController;\r\n        var change = editingController.getChangeByKey(parameters.key);\r\n        var oldDataFromState = editingController._getOldData(parameters.key);\r\n        var oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;\r\n        if (change && oldData && !oldDataFromState) {\r\n            editingController._addInternalData({\r\n                key: parameters.key,\r\n                oldData: oldData\r\n            })\r\n        }\r\n    },\r\n    createValidator: function(parameters, $container) {\r\n        var editingController = this._editingController;\r\n        var column = parameters.column;\r\n        var showEditorAlways = column.showEditorAlways;\r\n        if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\r\n            return\r\n        }\r\n        var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\r\n        var needCreateValidator = editIndex > -1;\r\n        if (!needCreateValidator) {\r\n            if (!showEditorAlways) {\r\n                var columnsController = this.getController(\"columns\");\r\n                var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\r\n                showEditorAlways = visibleColumns.some((function(column) {\r\n                    return column.showEditorAlways\r\n                }))\r\n            }\r\n            var isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\r\n            var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\r\n                row: parameters.row\r\n            });\r\n            needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\r\n            if (isCellOrBatchEditingAllowed && showEditorAlways) {\r\n                var _parameters$row$oldDa, _parameters$row2;\r\n                editingController._addInternalData({\r\n                    key: parameters.key,\r\n                    oldData: null !== (_parameters$row$oldDa = null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) && void 0 !== _parameters$row$oldDa ? _parameters$row$oldDa : parameters.data\r\n                })\r\n            }\r\n        }\r\n        if (needCreateValidator) {\r\n            if ($container && !$container.length) {\r\n                errors.log(\"E1050\");\r\n                return\r\n            }\r\n            this._syncInternalEditingData(parameters);\r\n            var validationData = this._getValidationData(parameters.key, true);\r\n            var getValue = () => {\r\n                var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n                var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\r\n                return void 0 !== value ? value : parameters.value\r\n            };\r\n            var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\r\n            $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\r\n            var validator = new Validator($container || $(\"<div>\"), {\r\n                name: column.caption,\r\n                validationRules: extend(true, [], column.validationRules),\r\n                validationGroup: validationData,\r\n                adapter: useDefaultValidator ? null : {\r\n                    getValue: getValue,\r\n                    applyValidationResults: result => {\r\n                        this.applyValidationResult($container, result)\r\n                    }\r\n                },\r\n                dataGetter: function() {\r\n                    var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\r\n                    var change = editingController.getChangeByKey(key);\r\n                    var oldData = editingController._getOldData(key);\r\n                    return {\r\n                        data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\r\n                        column: column\r\n                    }\r\n                },\r\n                onInitialized: this.validatorInitialized.bind(this),\r\n                onDisposing: this.validatorDisposing.bind(this)\r\n            });\r\n            if (useDefaultValidator) {\r\n                var adapter = validator.option(\"adapter\");\r\n                if (adapter) {\r\n                    adapter.getValue = getValue;\r\n                    adapter.validationRequestsCallbacks = []\r\n                }\r\n            }\r\n            return validator\r\n        }\r\n    },\r\n    setDisableApplyValidationResults: function(flag) {\r\n        this._disableApplyValidationResults = flag\r\n    },\r\n    getDisableApplyValidationResults: function() {\r\n        return this._disableApplyValidationResults\r\n    },\r\n    isCurrentValidatorProcessing: function(_ref2) {\r\n        var {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref2;\r\n        return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex\r\n    },\r\n    validateCell: function(validator) {\r\n        var cellParams = {\r\n            rowKey: validator.option(\"validationGroup\").key,\r\n            columnIndex: validator.option(\"dataGetter\")().column.index\r\n        };\r\n        var validationResult = this.getCellValidationResult(cellParams);\r\n        var stateRestored = validationResultIsValid(validationResult);\r\n        if (!stateRestored) {\r\n            validationResult = validator.validate()\r\n        }\r\n        var deferred = new Deferred;\r\n        var adapter = validator.option(\"adapter\");\r\n        if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\r\n            this.updateCellValidationResult(cellParams);\r\n            adapter.applyValidationResults(validationResult)\r\n        }\r\n        when(validationResult.complete || validationResult).done(validationResult => {\r\n            stateRestored && adapter.applyValidationResults(validationResult);\r\n            deferred.resolve(validationResult)\r\n        });\r\n        return deferred.promise()\r\n    },\r\n    updateCellValidationResult: function(_ref3) {\r\n        var {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex,\r\n            validationResult: validationResult\r\n        } = _ref3;\r\n        var validationData = this._getValidationData(rowKey);\r\n        if (!validationData) {\r\n            return\r\n        }\r\n        if (!validationData.validationResults) {\r\n            validationData.validationResults = {}\r\n        }\r\n        var result;\r\n        if (validationResult) {\r\n            result = extend({}, validationResult);\r\n            validationData.validationResults[columnIndex] = result;\r\n            if (validationResult.status === VALIDATION_STATUS.pending) {\r\n                if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                    result.deferred = new Deferred;\r\n                    result.complete.always(() => {\r\n                        result.deferred.resolve()\r\n                    });\r\n                    this._editingController.addDeferred(result.deferred)\r\n                }\r\n                if (this._disableApplyValidationResults) {\r\n                    result.disabledPendingId = validationResult.id;\r\n                    return\r\n                }\r\n            }\r\n        } else {\r\n            result = validationData.validationResults[columnIndex]\r\n        }\r\n        if (result && result.disabledPendingId) {\r\n            delete result.disabledPendingId\r\n        }\r\n    },\r\n    getCellValidationResult: function(_ref4) {\r\n        var _validationData$valid;\r\n        var {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref4;\r\n        var validationData = this._getValidationData(rowKey, true);\r\n        return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex]\r\n    },\r\n    removeCellValidationResult: function(_ref5) {\r\n        var {\r\n            change: change,\r\n            columnIndex: columnIndex\r\n        } = _ref5;\r\n        var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        if (validationData && validationData.validationResults) {\r\n            this.cancelCellValidationResult({\r\n                change: change,\r\n                columnIndex: columnIndex\r\n            });\r\n            delete validationData.validationResults[columnIndex]\r\n        }\r\n    },\r\n    cancelCellValidationResult: function(_ref6) {\r\n        var {\r\n            change: change,\r\n            columnIndex: columnIndex\r\n        } = _ref6;\r\n        var validationData = this._getValidationData(change.key);\r\n        if (change && validationData.validationResults) {\r\n            var result = validationData.validationResults[columnIndex];\r\n            if (result) {\r\n                result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\r\n                validationData.validationResults[columnIndex] = VALIDATION_CANCELLED\r\n            }\r\n        }\r\n    },\r\n    resetRowValidationResults: function(validationData) {\r\n        if (validationData) {\r\n            validationData.validationResults && delete validationData.validationResults;\r\n            delete validationData.validated\r\n        }\r\n    },\r\n    isInvalidCell: function(_ref7) {\r\n        var {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref7;\r\n        var result = this.getCellValidationResult({\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        });\r\n        return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid\r\n    },\r\n    getCellValidator: function(_ref8) {\r\n        var {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref8;\r\n        var validationData = this._getValidationData(rowKey);\r\n        var groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        var validators = groupConfig && groupConfig.validators;\r\n        return validators && validators.filter(v => {\r\n            var column = v.option(\"dataGetter\")().column;\r\n            return column ? column.index === columnIndex : false\r\n        })[0]\r\n    },\r\n    setCellValidationStatus: function(cellOptions) {\r\n        var validationResult = this.getCellValidationResult({\r\n            rowKey: cellOptions.key,\r\n            columnIndex: cellOptions.column.index\r\n        });\r\n        if (isDefined(validationResult)) {\r\n            cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED\r\n        } else {\r\n            delete cellOptions.validationStatus\r\n        }\r\n    }\r\n});\r\nexport var validatingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                texts: {\r\n                    validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        validating: ValidatingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                _addChange: function(options, row) {\r\n                    var change = this.callBase(options, row);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (change && options.type !== EDIT_DATA_REMOVE_TYPE) {\r\n                        validatingController.updateValidationState(change)\r\n                    }\r\n                    return change\r\n                },\r\n                _handleChangesChange: function(args) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    args.value.forEach(change => {\r\n                        if (void 0 === validatingController._getValidationData(change.key)) {\r\n                            validatingController.updateValidationState(change)\r\n                        }\r\n                    })\r\n                },\r\n                _updateRowAndPageIndices: function() {\r\n                    var that = this;\r\n                    var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\r\n                    var rowIndex = startInsertIndex;\r\n                    each(that.getChanges(), (_, _ref9) => {\r\n                        var {\r\n                            key: key,\r\n                            type: type\r\n                        } = _ref9;\r\n                        var validationData = this.getController(\"validating\")._getValidationData(key);\r\n                        if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\r\n                            validationData.pageIndex = that._pageIndex;\r\n                            if (type === EDIT_DATA_INSERT_TYPE) {\r\n                                validationData.rowIndex = startInsertIndex\r\n                            } else {\r\n                                validationData.rowIndex = rowIndex\r\n                            }\r\n                            rowIndex++\r\n                        }\r\n                    })\r\n                },\r\n                _getValidationGroupsInForm: function(detailOptions) {\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationData = validatingController._getValidationData(detailOptions.key, true);\r\n                    return {\r\n                        validationGroup: validationData\r\n                    }\r\n                },\r\n                _validateEditFormAfterUpdate: function(row, isCustomSetCellValue) {\r\n                    if (isCustomSetCellValue && this._editForm && !row.isNewRow) {\r\n                        this._editForm.validate()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _prepareEditCell: function(params) {\r\n                    var isNotCanceled = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (isNotCanceled && params.column.showEditorAlways) {\r\n                        validatingController.updateValidationState({\r\n                            key: params.key\r\n                        })\r\n                    }\r\n                    return isNotCanceled\r\n                },\r\n                processItems: function(items, changeType) {\r\n                    var changes = this.getChanges();\r\n                    var dataController = this.getController(\"data\");\r\n                    var validatingController = this.getController(\"validating\");\r\n                    items = this.callBase(items, changeType);\r\n                    var itemsCount = items.length;\r\n                    var addInValidItem = function(change, validationData) {\r\n                        var data = {\r\n                            key: change.key\r\n                        };\r\n                        var index = function(change, items) {\r\n                            var index = -1;\r\n                            var isInsert = change.type === EDIT_DATA_INSERT_TYPE;\r\n                            var key = change.key;\r\n                            each(items, (function(i, item) {\r\n                                if (equalByValue(key, isInsert ? item.key : dataController.keyOf(item))) {\r\n                                    index = i;\r\n                                    return false\r\n                                }\r\n                            }));\r\n                            return index\r\n                        }(change, items);\r\n                        if (index >= 0) {\r\n                            return\r\n                        }\r\n                        validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\r\n                        var rowIndex = validationData.rowIndex;\r\n                        data[INSERT_INDEX] = 1;\r\n                        items.splice(rowIndex, 0, data)\r\n                    };\r\n                    if (this.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\r\n                        changes.forEach(change => {\r\n                            var key = change.key;\r\n                            var validationData = validatingController._getValidationData(key);\r\n                            if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\r\n                                addInValidItem(change, validationData)\r\n                            }\r\n                        })\r\n                    }\r\n                    return items\r\n                },\r\n                processDataItem: function(item) {\r\n                    var isInserted = item.data[INSERT_INDEX];\r\n                    var key = isInserted ? item.data.key : item.key;\r\n                    var editMode = this.getEditMode();\r\n                    if (editMode === EDIT_MODE_BATCH && isInserted && key) {\r\n                        var changes = this.getChanges();\r\n                        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                        if (editIndex >= 0) {\r\n                            var change = changes[editIndex];\r\n                            if (change.type !== EDIT_DATA_INSERT_TYPE) {\r\n                                var oldData = this._getOldData(change.key);\r\n                                item.data = extend(true, {}, oldData, change.data);\r\n                                item.key = key\r\n                            }\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _createInvisibleColumnValidators: function(changes) {\r\n                    var that = this;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var columns = columnsController.getColumns();\r\n                    var invisibleColumns = columnsController.getInvisibleColumns().filter(column => !column.isBand);\r\n                    var groupColumns = columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));\r\n                    var invisibleColumnValidators = [];\r\n                    var isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\r\n                    invisibleColumns.push(...groupColumns);\r\n                    if (-1 === FORM_BASED_MODES.indexOf(this.getEditMode())) {\r\n                        each(columns, (function(_, column) {\r\n                            changes.forEach((function(change) {\r\n                                var data;\r\n                                if (isCellVisible(column, change.key)) {\r\n                                    return\r\n                                }\r\n                                if (change.type === EDIT_DATA_INSERT_TYPE) {\r\n                                    data = change.data\r\n                                } else if (\"update\" === change.type) {\r\n                                    var oldData = that._getOldData(change.key);\r\n                                    data = createObjectWithChanges(oldData, change.data)\r\n                                }\r\n                                if (data) {\r\n                                    var validator = validatingController.createValidator({\r\n                                        column: column,\r\n                                        key: change.key,\r\n                                        value: column.calculateCellValue(data)\r\n                                    });\r\n                                    if (validator) {\r\n                                        invisibleColumnValidators.push(validator)\r\n                                    }\r\n                                }\r\n                            }))\r\n                        }))\r\n                    }\r\n                    return function() {\r\n                        invisibleColumnValidators.forEach((function(validator) {\r\n                            validator.dispose()\r\n                        }))\r\n                    }\r\n                },\r\n                _beforeSaveEditData: function(change, editIndex) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n                    if (change) {\r\n                        var isValid = \"remove\" === change.type || validationData.isValid;\r\n                        result = result || !isValid\r\n                    } else {\r\n                        var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\r\n                        result = new Deferred;\r\n                        this.executeOperation(result, () => {\r\n                            validatingController.validate(true).done(isFullValid => {\r\n                                disposeValidators();\r\n                                this._updateRowAndPageIndices();\r\n                                switch (this.getEditMode()) {\r\n                                    case EDIT_MODE_CELL:\r\n                                        if (!isFullValid) {\r\n                                            this._focusEditingCell()\r\n                                        }\r\n                                        break;\r\n                                    case EDIT_MODE_BATCH:\r\n                                        if (!isFullValid) {\r\n                                            this._resetEditRowKey();\r\n                                            this._resetEditColumnName();\r\n                                            this.getController(\"data\").updateItems()\r\n                                        }\r\n                                }\r\n                                result.resolve(!isFullValid)\r\n                            })\r\n                        })\r\n                    }\r\n                    return result.promise ? result.promise() : result\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    var result = this.callBase(rowIndex, columnIndex, item);\r\n                    if (this.getEditMode() === EDIT_MODE_CELL) {\r\n                        var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n                        var validator = $cell && $cell.data(\"dxValidator\");\r\n                        var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\r\n                        var value = validator && validator.option(\"adapter\").getValue();\r\n                        if (validator && cellValueShouldBeValidated(value, rowOptions)) {\r\n                            var validatingController = this.getController(\"validating\");\r\n                            var deferred = new Deferred;\r\n                            when(validatingController.validateCell(validator), result).done((validationResult, result) => {\r\n                                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)\r\n                            });\r\n                            return deferred.promise()\r\n                        } else if (!validator) {\r\n                            return result\r\n                        }\r\n                    }\r\n                },\r\n                _afterSaveEditData: function(cancel) {\r\n                    var $firstErrorRow;\r\n                    var isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;\r\n                    each(this.getChanges(), (_, change) => {\r\n                        var $errorRow = this._showErrorRow(change);\r\n                        $firstErrorRow = $firstErrorRow || $errorRow\r\n                    });\r\n                    if ($firstErrorRow) {\r\n                        var scrollable = this._rowsView.getScrollable();\r\n                        if (scrollable) {\r\n                            scrollable.update();\r\n                            scrollable.scrollToElement($firstErrorRow)\r\n                        }\r\n                    }\r\n                    if (cancel && isCellEditMode && this._needUpdateRow()) {\r\n                        var editRowIndex = this.getEditRowIndex();\r\n                        this._dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [editRowIndex]\r\n                        });\r\n                        this._focusEditingCell()\r\n                    } else if (!cancel) {\r\n                        var shouldResetValidationState = true;\r\n                        if (isCellEditMode) {\r\n                            var columns = this.getController(\"columns\").getColumns();\r\n                            var columnsWithValidatingEditors = columns.filter(col => {\r\n                                var _col$validationRules;\r\n                                return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0\r\n                            }).length > 0;\r\n                            shouldResetValidationState = !columnsWithValidatingEditors\r\n                        }\r\n                        if (shouldResetValidationState) {\r\n                            this.getController(\"validating\")._validationState = []\r\n                        }\r\n                    }\r\n                },\r\n                _handleDataChanged: function(args) {\r\n                    var validationState = this.getController(\"validating\")._validationState;\r\n                    if (\"standard\" === this.option(\"scrolling.mode\")) {\r\n                        this.resetRowAndPageIndices()\r\n                    }\r\n                    if (\"prepend\" === args.changeType) {\r\n                        each(validationState, (function(_, validationData) {\r\n                            validationData.rowIndex += args.items.length\r\n                        }))\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                resetRowAndPageIndices: function() {\r\n                    var validationState = this.getController(\"validating\")._validationState;\r\n                    each(validationState, (_, validationData) => {\r\n                        if (validationData.pageIndex !== this._pageIndex) {\r\n                            delete validationData.pageIndex;\r\n                            delete validationData.rowIndex\r\n                        }\r\n                    })\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    var validatingController = this.getController(\"validating\");\r\n                    validatingController._validationState = [];\r\n                    this.callBase()\r\n                },\r\n                _showErrorRow: function(change) {\r\n                    var $popupContent;\r\n                    var errorHandling = this.getController(\"errorHandling\");\r\n                    var items = this.getController(\"data\").items();\r\n                    var rowIndex = this.getIndexByKey(change.key, items);\r\n                    var validationData = this.getController(\"validating\")._getValidationData(change.key);\r\n                    if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\r\n                        $popupContent = this.getPopupContent();\r\n                        return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent)\r\n                    }\r\n                },\r\n                updateFieldValue: function(e) {\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var deferred = new Deferred;\r\n                    validatingController.removeCellValidationResult({\r\n                        change: this.getChangeByKey(e.key),\r\n                        columnIndex: e.column.index\r\n                    });\r\n                    this.callBase.apply(this, arguments).done(() => {\r\n                        var currentValidator = validatingController.getCellValidator({\r\n                            rowKey: e.key,\r\n                            columnIndex: e.column.index\r\n                        });\r\n                        when(currentValidator && validatingController.validateCell(currentValidator)).done(validationResult => {\r\n                            this.getController(\"editorFactory\").refocus();\r\n                            deferred.resolve(validationResult)\r\n                        })\r\n                    });\r\n                    return deferred.promise()\r\n                },\r\n                highlightDataCell: function($cell, parameters) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    validatingController.setCellValidationStatus(parameters);\r\n                    var isEditableCell = !!parameters.setValue;\r\n                    var cellModified = this.isCellModified(parameters);\r\n                    var isValidated = isDefined(parameters.validationStatus);\r\n                    var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\r\n                    if (needValidation) {\r\n                        var validator = $cell.data(\"dxValidator\");\r\n                        if (validator) {\r\n                            when(this.getController(\"validating\").validateCell(validator)).done(() => {\r\n                                validatingController.setCellValidationStatus(parameters)\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                getChangeByKey: function(key) {\r\n                    var changes = this.getChanges();\r\n                    return changes[gridCoreUtils.getIndexByKey(key, changes)]\r\n                },\r\n                isCellModified: function(parameters) {\r\n                    var cellModified = this.callBase(parameters);\r\n                    var change = this.getChangeByKey(parameters.key);\r\n                    var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\r\n                        rowKey: parameters.key,\r\n                        columnIndex: parameters.column.index\r\n                    });\r\n                    return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _showRevertButton: function($container) {\r\n                    if (!$container || !$container.length) {\r\n                        return\r\n                    }\r\n                    var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                    var $overlayContainer = $container.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\r\n                    $tooltipElement && $tooltipElement.remove();\r\n                    $tooltipElement = $(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\r\n                    var tooltipOptions = {\r\n                        animation: null,\r\n                        visible: true,\r\n                        width: \"auto\",\r\n                        height: \"auto\",\r\n                        target: $container,\r\n                        shading: false,\r\n                        container: $overlayContainer,\r\n                        propagateOutsideClick: true,\r\n                        closeOnOutsideClick: false,\r\n                        copyRootClassesToWrapper: true,\r\n                        _ignoreCopyRootClassesToWrapperDeprecation: true,\r\n                        contentTemplate: () => {\r\n                            var $buttonElement = $(\"<div>\").addClass(REVERT_BUTTON_CLASS);\r\n                            var buttonOptions = {\r\n                                icon: \"revert\",\r\n                                hint: this.option(\"editing.texts.validationCancelChanges\"),\r\n                                onClick: () => {\r\n                                    this._editingController.cancelEditData()\r\n                                }\r\n                            };\r\n                            return new Button($buttonElement, buttonOptions).$element()\r\n                        },\r\n                        position: {\r\n                            my: \"left top\",\r\n                            at: \"right top\",\r\n                            offset: \"1 0\",\r\n                            collision: \"flip\",\r\n                            boundaryOffset: \"0 0\",\r\n                            boundary: this._rowsView.element()\r\n                        },\r\n                        onPositioned: this._positionedHandler.bind(this)\r\n                    };\r\n                    return new Overlay($tooltipElement, tooltipOptions)\r\n                },\r\n                _hideFixedGroupCell: function($cell, overlayOptions) {\r\n                    var $nextFixedRowElement;\r\n                    var $groupCellElement;\r\n                    var isFixedColumns = this._rowsView.isFixedColumns();\r\n                    var isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\r\n                    if (isFixedColumns && !isFormOrPopupEditMode) {\r\n                        var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\r\n                        if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\r\n                            $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\r\n                            $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\r\n                            if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\r\n                                $groupCellElement.css(\"visibility\", \"hidden\");\r\n                                overlayOptions.onDisposing = function() {\r\n                                    $groupCellElement.css(\"visibility\", \"\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _positionedHandler: function(e, isOverlayVisible) {\r\n                    if (!e.component.__skipPositionProcessing) {\r\n                        var isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                        var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\r\n                        var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\r\n                        e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\r\n                        if (normalizedPosition) {\r\n                            e.component.option(normalizedPosition)\r\n                        } else if (needRepaint) {\r\n                            e.component.repaint()\r\n                        }\r\n                    }\r\n                },\r\n                _showValidationMessage: function($cell, messages, alignment, revertTooltip) {\r\n                    var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\r\n                    var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\r\n                    var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\r\n                    var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\r\n                    var $overlayContainer = $cell.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\r\n                    var errorMessageText = \"\";\r\n                    messages && messages.forEach((function(message) {\r\n                        errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message)\r\n                    }));\r\n                    var $overlayElement = $(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\r\n                    var overlayOptions = {\r\n                        target: $cell,\r\n                        container: $overlayContainer,\r\n                        shading: false,\r\n                        width: \"auto\",\r\n                        height: \"auto\",\r\n                        visible: true,\r\n                        animation: false,\r\n                        propagateOutsideClick: true,\r\n                        closeOnOutsideClick: false,\r\n                        copyRootClassesToWrapper: true,\r\n                        _ignoreCopyRootClassesToWrapperDeprecation: true,\r\n                        position: {\r\n                            collision: \"flip\",\r\n                            boundary: this._rowsView.element(),\r\n                            boundaryOffset: \"0 0\",\r\n                            offset: {\r\n                                x: 0,\r\n                                y: !isOverlayVisible && browser.mozilla ? -1 : 0\r\n                            },\r\n                            my: myPosition,\r\n                            at: atPosition\r\n                        },\r\n                        onPositioned: e => {\r\n                            this._positionedHandler(e, isOverlayVisible);\r\n                            this._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell)\r\n                        }\r\n                    };\r\n                    this._hideFixedGroupCell($cell, overlayOptions);\r\n                    new Overlay($overlayElement, overlayOptions)\r\n                },\r\n                _normalizeValidationMessagePositionAndMaxWidth: function(options, isRevertButton, isOverlayVisible) {\r\n                    var fixedColumns = this._columnsController.getFixedColumns();\r\n                    if (!fixedColumns || !fixedColumns.length) {\r\n                        return\r\n                    }\r\n                    var position;\r\n                    var visibleTableWidth = !isRevertButton && (that = this, element = options.element, rowIndex = $(element).closest(\"tr\").index(), $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\"), that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0));\r\n                    var that, element, rowIndex, $cellElements;\r\n                    var $overlayContentElement = options.component.$content();\r\n                    var validationMessageWidth = getOuterWidth($overlayContentElement, true);\r\n                    var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\r\n                    var columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\r\n                    var boundaryNonFixedColumnsInfo = function(fixedColumns) {\r\n                        var firstNonFixedColumnIndex;\r\n                        var lastNonFixedColumnIndex;\r\n                        fixedColumns.some((column, index) => {\r\n                            if (column.command === COMMAND_TRANSPARENT) {\r\n                                firstNonFixedColumnIndex = 0 === index ? -1 : index;\r\n                                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\r\n                                return true\r\n                            }\r\n                        });\r\n                        return {\r\n                            startColumnIndex: firstNonFixedColumnIndex,\r\n                            endColumnIndex: lastNonFixedColumnIndex\r\n                        }\r\n                    }(fixedColumns);\r\n                    if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\r\n                        position = {\r\n                            collision: \"none flip\",\r\n                            my: \"top left\",\r\n                            at: isOverlayVisible ? \"top right\" : \"bottom left\"\r\n                        }\r\n                    } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\r\n                        position = {\r\n                            collision: \"none flip\",\r\n                            my: \"top right\",\r\n                            at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\r\n                        };\r\n                        if (isRevertButton) {\r\n                            position.offset = \"-1 0\"\r\n                        }\r\n                    }\r\n                    return position && {\r\n                        position: position,\r\n                        maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\r\n                    }\r\n                },\r\n                _shiftValidationMessageIfNeed: function($content, $revertContent, $cell) {\r\n                    if (!$revertContent) {\r\n                        return\r\n                    }\r\n                    var contentOffset = $content.offset();\r\n                    var revertContentOffset = $revertContent.offset();\r\n                    if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\r\n                        var left = getWidth($revertContent) + PADDING_BETWEEN_TOOLTIPS;\r\n                        $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left)\r\n                    }\r\n                },\r\n                _getTooltipsSelector: function() {\r\n                    var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\r\n                    var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\r\n                    return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this._columnsController = this.getController(\"columns\");\r\n                    this._rowsView = this.getView(\"rowsView\")\r\n                },\r\n                loseFocus: function(skipValidator) {\r\n                    if (!skipValidator) {\r\n                        this.getController(\"validating\").setValidator(null)\r\n                    }\r\n                    this.callBase()\r\n                },\r\n                updateCellState: function($element, validationResult, hideBorder) {\r\n                    var _change$data;\r\n                    var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                    var $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\r\n                    var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\r\n                    var change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\r\n                    var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\r\n                    var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\r\n                    var revertTooltip;\r\n                    if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\r\n                        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                            revertTooltip = this._showRevertButton($focus)\r\n                        }\r\n                    }\r\n                    var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\r\n                    if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\r\n                        var errorMessages = [];\r\n                        validationResult.brokenRules.forEach((function(rule) {\r\n                            errorMessages.push(rule.message)\r\n                        }));\r\n                        this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip)\r\n                    }!hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()\r\n                },\r\n                focus: function($element, hideBorder) {\r\n                    if (!arguments.length) {\r\n                        return this.callBase()\r\n                    }\r\n                    var $tooltips = $element && $element.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\r\n                    $tooltips && $tooltips.remove();\r\n                    if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\")) {\r\n                        return this.callBase($element, hideBorder)\r\n                    }\r\n                    var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                    var callBase = this.callBase;\r\n                    var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\r\n                    var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n                    var editingController = this.getController(\"editing\");\r\n                    var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\r\n                    var validationResult;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (validator) {\r\n                        validatingController.setValidator(validator);\r\n                        var value = validator.option(\"adapter\").getValue();\r\n                        if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\r\n                            editingController.waitForDeferredOperations().done(() => {\r\n                                when(validatingController.validateCell(validator)).done(result => {\r\n                                    validationResult = result;\r\n                                    var column = validationResult.validator.option(\"dataGetter\")().column;\r\n                                    if (change && column && !validatingController.isCurrentValidatorProcessing({\r\n                                            rowKey: change.key,\r\n                                            columnIndex: column.index\r\n                                        })) {\r\n                                        return\r\n                                    }\r\n                                    if (validationResult.status === VALIDATION_STATUS.invalid) {\r\n                                        hideBorder = true\r\n                                    }\r\n                                    this.updateCellState($element, validationResult, hideBorder);\r\n                                    callBase.call(this, $element, hideBorder)\r\n                                })\r\n                            });\r\n                            return this.callBase($element, hideBorder)\r\n                        }\r\n                    }\r\n                    this.updateCellState($element, validationResult, hideBorder);\r\n                    return this.callBase($element, hideBorder)\r\n                },\r\n                getEditorInstance: function($container) {\r\n                    var $editor = $container.find(\".dx-texteditor\").eq(0);\r\n                    return gridCoreUtils.getWidgetInstance($editor)\r\n                }\r\n            },\r\n            data: {\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var _oldRow$cells, _cell$column$validati;\r\n                    var cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];\r\n                    var oldValidationStatus = cell && cell.validationStatus;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationResult = validatingController.getCellValidationResult({\r\n                        rowKey: oldRow.key,\r\n                        columnIndex: columnIndex\r\n                    });\r\n                    var validationData = validatingController._getValidationData(oldRow.key);\r\n                    var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\r\n                    var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\r\n                    var cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));\r\n                    var editingChanged = oldRow.isEditing !== newRow.isEditing;\r\n                    var hasValidationRules = null === cell || void 0 === cell ? void 0 : null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;\r\n                    if (editingChanged && hasValidationRules || oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var $rowElements;\r\n                    var $freeSpaceRowElement;\r\n                    var $freeSpaceRowElements;\r\n                    var $element = this.element();\r\n                    var $tooltipContent = $element && $element.find(\".\" + this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\r\n                    this.callBase($table);\r\n                    if ($tooltipContent && $tooltipContent.length) {\r\n                        $rowElements = this._getRowElements();\r\n                        $freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n                        $freeSpaceRowElement = $freeSpaceRowElements.first();\r\n                        if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\r\n                            $freeSpaceRowElements.show();\r\n                            setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                _formItemPrepared: function(cellOptions, $container) {\r\n                    this.callBase.apply(this, arguments);\r\n                    deferUpdate(() => {\r\n                        var $editor = $container.find(\".dx-widget\").first();\r\n                        var isEditorDisposed = $editor.length && !$editor.children().length;\r\n                        if (!isEditorDisposed) {\r\n                            this.getController(\"validating\").createValidator(cellOptions, $editor)\r\n                        }\r\n                    })\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    if (!this.getController(\"editing\").isFormOrPopupEditMode()) {\r\n                        this.getController(\"validating\").createValidator(parameters, $cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _restoreErrorRow: function(contentTable) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\r\n                        var rowOptions = $(item).data(\"options\");\r\n                        if (rowOptions) {\r\n                            var change = editingController.getChangeByKey(rowOptions.key);\r\n                            change && editingController._showErrorRow(change)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}