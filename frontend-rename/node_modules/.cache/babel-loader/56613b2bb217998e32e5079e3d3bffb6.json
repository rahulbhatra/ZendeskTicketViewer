{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getHeight, getOuterHeight, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { setHeight } from \"../../core/utils/style\";\nimport { isDefined, isNumeric, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../core/utils/position\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { removeEvent } from \"../../core/remove_event\";\nimport messageLocalization from \"../../localization/message\";\nimport browser from \"../../core/utils/browser\";\nimport getScrollRtlBehavior from \"../../core/utils/scroll_rtl_behavior\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar CONTENT_CLASS = \"content\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\nvar EMPTY_CLASS = \"dx-empty\";\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nvar LOADPANEL_HIDE_TIMEOUT = 200;\n\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;\n}\n\nexport var rowsModule = {\n  defaultOptions: function () {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: messageLocalization.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      dataRowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: ColumnsView.inherit(function () {\n      var defaultCellTemplate = function ($container, options) {\n        var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\n        var text = options.text;\n        var container = $container.get(0);\n\n        if (isDataTextEmpty) {\n          gridCoreUtils.setEmptyText($container);\n        } else if (options.column.encodeHtml) {\n          container.textContent = text;\n        } else {\n          container.innerHTML = text;\n        }\n      };\n\n      return {\n        _getDefaultTemplate: function (column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function (column) {\n          var summaryTexts = this.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data;\n            var text = options.column.caption + \": \" + options.text;\n            var container = $container.get(0);\n\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts);\n            }\n\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuedMessage) {\n                text += \" (\" + options.groupContinuedMessage + \")\";\n              }\n            }\n\n            $container.addClass(GROUP_CELL_CLASS);\n\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function () {},\n        _getCellTemplate: function (options) {\n          var column = options.column;\n          var template;\n\n          if (\"group\" === options.rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultGroupTemplate(column)\n            };\n          } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n            template = column.cellTemplate;\n          } else {\n            template = {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultTemplate(column)\n            };\n          }\n\n          return template;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isGroup = \"group\" === row.rowType;\n            var isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n\n            if (false === row.visible) {\n              $row.hide();\n            }\n\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              var isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n\n          return $row;\n        },\n        _rowPrepared: function ($row, rowOptions, row) {\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n\n            this._setAriaRowIndex(rowOptions, $row);\n\n            rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row));\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function (row, $row) {\n          var component = this.component;\n          var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\n          var rowIndex = row.rowIndex + 1;\n\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function (e) {\n          var arg = e.args[0];\n          var dataController = this._dataController;\n          var row = dataController.getVisibleRows()[arg.rowIndex];\n          var watch = this.option(\"integrationOptions.watchMethod\");\n\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n\n          var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\n            dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n          eventsEngine.on(arg.rowElement, removeEvent, dispose);\n        },\n        _renderScrollable: function (force) {\n          var $element = this.element();\n\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n\n          if (force || !this._loadPanel) {\n            this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore());\n          }\n\n          if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\n            var columns = this.getColumns();\n            var allColumnsHasWidth = true;\n\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n\n            if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\n              this._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function (e) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          var isNativeScrolling = e.component.option(\"useNative\");\n          this._scrollTop = e.scrollOffset.top;\n          this._scrollLeft = e.scrollOffset.left;\n          var scrollLeft = e.scrollOffset.left;\n\n          if (rtlEnabled) {\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n\n            if (isNativeScrolling) {\n              scrollLeft = getScrollRtlBehavior().positive ? this._scrollRight : -this._scrollRight;\n            }\n\n            if (!this.isScrollbarVisible(true)) {\n              this._scrollLeft = -1;\n            }\n          }\n\n          this.scrollChanged.fire(_extends({}, e.scrollOffset, {\n            left: scrollLeft\n          }), this.name);\n        },\n        _renderScrollableCore: function ($element) {\n          var dxScrollableOptions = this._createScrollableOptions();\n\n          var scrollHandler = this._handleScroll.bind(this);\n\n          dxScrollableOptions.onScroll = scrollHandler;\n          this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\n          this._scrollableContainer = this._scrollable && $(this._scrollable.container());\n        },\n        _renderLoadPanel: gridCoreUtils.renderLoadPanel,\n        _renderContent: function (contentElement, tableElement) {\n          contentElement.empty().append(tableElement);\n          return this._findContentElement();\n        },\n        _updateContent: function (newTableElement, change) {\n          var that = this;\n          var tableElement = that.getTableElement();\n\n          var contentElement = that._findContentElement();\n\n          var changeType = change && change.changeType;\n          var executors = [];\n          var highlightChanges = this.option(\"highlightChanges\");\n          var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n\n          switch (changeType) {\n            case \"update\":\n              each(change.rowIndices, function (index, rowIndex) {\n                var $newRowElement = that._getRowElements(newTableElement).eq(index);\n\n                var changeType = change.changeTypes && change.changeTypes[index];\n                var item = change.items && change.items[index];\n                executors.push(function () {\n                  var $rowsElement = that._getRowElements();\n\n                  var $rowElement = $rowsElement.eq(rowIndex);\n\n                  switch (changeType) {\n                    case \"update\":\n                      if (item) {\n                        var columnIndices = change.columnIndices && change.columnIndices[index];\n\n                        if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                          $rowElement.toggle(item.visible);\n                        } else if (columnIndices) {\n                          that._updateCells($rowElement, $newRowElement, columnIndices);\n                        } else {\n                          $rowElement.replaceWith($newRowElement);\n                        }\n                      }\n\n                      break;\n\n                    case \"insert\":\n                      if (!$rowsElement.length) {\n                        if (tableElement) {\n                          var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                          $newRowElement.prependTo(target);\n                        }\n                      } else if ($rowElement.length) {\n                        $newRowElement.insertBefore($rowElement);\n                      } else {\n                        $newRowElement.insertAfter($rowsElement.last());\n                      }\n\n                      if (highlightChanges && change.isLiveUpdate) {\n                        $newRowElement.addClass(rowInsertedClass);\n                      }\n\n                      break;\n\n                    case \"remove\":\n                      $rowElement.remove();\n                  }\n                });\n              });\n              each(executors, function () {\n                this();\n              });\n              newTableElement.remove();\n              break;\n\n            default:\n              that.setTableElement(newTableElement);\n              contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\n\n              that._renderContent(contentElement, newTableElement);\n\n          }\n        },\n        _createEmptyRow: function (className, isFixed, height) {\n          var $cell;\n\n          var $row = this._createRow();\n\n          var columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          for (var i = 0; i < columns.length; i++) {\n            $cell = this._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            isNumeric(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n\n          this.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function ($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table);\n\n          var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n          var $container = isTableContainer ? $table : $tBodies;\n\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n\n            if (isTableContainer) {\n              var $colgroup = $container.children(\"colgroup\");\n              $container.prepend($colgroup);\n            }\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function ($tableElement) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\n\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function (options) {\n          var that = this;\n\n          var rows = that._getRows(options);\n\n          var keyExpr = that._dataController.store() && that._dataController.store().key();\n\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function (itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function ($tableElement) {\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + getBoundingRect(row).height;\n          }, 0);\n        },\n        _updateRowHeight: function () {\n          var $tableElement = this.getTableElement();\n\n          var itemsCount = this._dataController.items().length;\n\n          if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\n            var rowsHeight = this._getRowsHeight($tableElement);\n\n            this._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function () {\n          var $content = this.element();\n          var scrollable = this.getScrollable();\n\n          if ($content) {\n            if (scrollable) {\n              $content = $(scrollable.content());\n            }\n\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function (tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function ($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function () {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", extend({\n            evaluate: function (expr) {\n              var getter = compileGetter(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", extend({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function (columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n\n          return 0;\n        },\n        _getGroupCellOptions: function (options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n\n          var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _renderCells: function ($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else if (options.row.values) {\n            this.callBase($row, options);\n          }\n        },\n        _renderGroupedCells: function ($row, options) {\n          var row = options.row;\n          var expandColumn;\n          var columns = options.columns;\n          var rowIndex = row.rowIndex;\n          var isExpanded;\n\n          var groupCellOptions = this._getGroupCellOptions(options);\n\n          for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n\n            this._renderCell($row, {\n              value: isExpanded,\n              row: row,\n              rowIndex: rowIndex,\n              column: expandColumn,\n              columnIndex: i\n            });\n          }\n\n          var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\n          var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n\n          this._renderCell($row, {\n            value: row.values[row.groupIndex],\n            row: row,\n            rowIndex: rowIndex,\n            column: groupColumn,\n            columnIndex: groupCellOptions.columnIndex\n          });\n        },\n        _renderRows: function ($table, options) {\n          var scrollingMode = this.option(\"scrolling.mode\");\n          this.callBase($table, extend({\n            scrollingMode: scrollingMode\n          }, options));\n\n          this._checkRowKeys(options.change);\n\n          this._renderFreeSpaceRow($table);\n\n          if (!this._hasHeight) {\n            this.updateFreeSpaceRowHeight($table);\n          }\n        },\n\n        _renderDataRowByTemplate($table, options, dataRowTemplate) {\n          var row = options.row;\n          var rowOptions = extend({\n            columns: options.columns\n          }, row);\n\n          var $tbody = this._createRow(row, \"tbody\");\n\n          $tbody.appendTo($table);\n          this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\n\n          this._rowPrepared($tbody, rowOptions, options.row);\n        },\n\n        _renderRow: function ($table, options) {\n          var row = options.row;\n          var rowTemplate = this.option().rowTemplate;\n          var dataRowTemplate = this.option(\"dataRowTemplate\");\n\n          if (\"data\" === row.rowType && dataRowTemplate) {\n            this._renderDataRowByTemplate($table, options, dataRowTemplate);\n          } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\n            this.renderTemplate($table, rowTemplate, extend({\n              columns: options.columns\n            }, row), true);\n          } else {\n            this.callBase($table, options);\n          }\n        },\n        _renderTable: function (options) {\n          var that = this;\n          var $table = that.callBase(options);\n\n          if (!isDefined(that.getTableElement())) {\n            that.setTableElement($table);\n\n            that._renderScrollable(true);\n\n            that.resizeCompleted.add(function resizeCompletedHandler() {\n              var scrollableInstance = that.getScrollable();\n\n              if (scrollableInstance && that.element().closest(getWindow().document).length) {\n                that.resizeCompleted.remove(resizeCompletedHandler);\n\n                scrollableInstance._visibilityChanged(true);\n              }\n            });\n          } else {\n            that._renderScrollable();\n          }\n\n          return $table;\n        },\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n\n          if (this.option().rowTemplate && !this.option(\"dataRowTemplate\")) {\n            $table.appendTo(this.component.$element());\n          }\n\n          return $table;\n        },\n        _renderCore: function (change) {\n          var $element = this.element();\n          $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());\n          this.setAria(\"role\", \"presentation\", $element);\n\n          var $table = this._renderTable({\n            change: change\n          });\n\n          this._updateContent($table, change);\n\n          this.callBase(change);\n          this._lastColumnWidths = null;\n        },\n        _getRows: function (change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function (options) {\n          var column = options.column;\n          var row = options.row;\n          var data = row.data;\n          var summaryCells = row && row.summaryCells;\n          var value = options.value;\n          var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\n          var parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n\n          if (isDefined(column.groupIndex) && !column.command) {\n            var groupingTextsOptions = this.option(\"grouping.texts\");\n            var scrollingMode = this.option(\"scrolling.mode\");\n\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n\n          return parameters;\n        },\n        _setRowsOpacityCore: function ($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController;\n          var columns = columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          each($rows, function (rowIndex, row) {\n            if (!$(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n\n                  if (!isNumeric(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function () {\n          return getWindow().devicePixelRatio;\n        },\n        renderNoDataText: gridCoreUtils.renderNoDataText,\n        getCellOptions: function (rowIndex, columnIdentifier) {\n          var rowOptions = this._dataController.items()[rowIndex];\n\n          var cellOptions;\n          var column;\n\n          if (rowOptions) {\n            if (isString(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n\n          return cellOptions;\n        },\n        getRow: function (index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n\n            if (rows.length > index) {\n              return $(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function ($table) {\n          var dataController = this._dataController;\n          var itemCount = dataController.items(true).length;\n\n          var contentElement = this._findContentElement();\n\n          var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n\n            if (itemCount > 0) {\n              if (!this._hasHeight) {\n                var freeSpaceRowCount = dataController.pageSize() - itemCount;\n                var scrollingMode = this.option(\"scrolling.mode\");\n\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n\n                if (!isFreeSpaceRowVisible && $table) {\n                  setHeight(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n\n                this._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                deferUpdate(() => {\n                  var scrollbarWidth = this.getScrollbarWidth(true);\n                  var elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\n                  var contentHeight = getOuterHeight(contentElement);\n                  var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n\n                  var rowsHeight = this._getRowsHeight(contentElement.children().first());\n\n                  var $tableElement = $table || this.getTableElements();\n                  var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n\n                  var heightCorrection = this._getHeightCorrection();\n\n                  var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n\n                  if (showFreeSpaceRow) {\n                    deferRender(() => {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n\n                  deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible));\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n\n              this._updateLastRowBorder(true);\n            }\n          }\n        },\n        _getHeightCorrection: function () {\n          var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\n          var isChromeLatest = browser.chrome && browser.version >= 91;\n          var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\n          return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;\n        },\n        _columnOptionChanged: function (e) {\n          var optionNames = e.optionNames;\n\n          if (e.changeTypes.grouping) {\n            return;\n          }\n\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function () {\n          return this._scrollable;\n        },\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._scrollRight = 0;\n          that._hasHeight = false;\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(function () {\n            if (that._scrollLeft >= 0) {\n              that._handleScroll({\n                component: that.getScrollable(),\n                scrollOffset: {\n                  top: that._scrollTop,\n                  left: that._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function (change) {\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              this.render(null, change);\n              break;\n\n            default:\n              this._update(change);\n\n          }\n        },\n        publicMethods: function () {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function () {\n          return getWidth(this.element()) - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function (isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n\n          var scrollbarWidth = 0;\n\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0);\n            }\n          }\n\n          var that, scrollable;\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function () {\n          var lastColumnWidths = this._lastColumnWidths || [];\n          var columnWidths = [];\n          var columns = this.getColumns();\n\n          for (var i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n\n            if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n\n          this._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function (isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function () {\n          var dxScrollable = Scrollable.getInstance(this.element());\n\n          if (dxScrollable) {\n            dxScrollable.update();\n\n            this._updateHorizontalScrollPosition();\n          }\n        },\n        _updateHorizontalScrollPosition: function () {\n          var scrollable = this.getScrollable();\n          var scrollLeft = scrollable && scrollable.scrollOffset().left;\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n            var scrollRight = maxHorizontalScrollOffset - scrollLeft;\n\n            if (scrollRight !== this._scrollRight) {\n              this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n            }\n          }\n\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function () {\n          var that = this;\n\n          that._fireColumnResizedCallbacks();\n\n          that._updateRowHeight();\n\n          deferRender(function () {\n            that._renderScrollable();\n\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            deferUpdate(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function (location) {\n          var $element = this.element();\n          var dxScrollable = $element && Scrollable.getInstance($element);\n\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function (_height, hasHeight) {\n          var that = this;\n          var $element = this.element();\n\n          if (0 === arguments.length) {\n            return $element ? getOuterHeight($element, true) : 0;\n          }\n\n          that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\n\n          if (isDefined(_height) && $element) {\n            setHeight($element, _height);\n          }\n        },\n        setLoading: function (isLoading, messageText) {\n          var loadPanel = this._loadPanel;\n          var dataController = this._dataController;\n          var loadPanelOptions = this.option(\"loadPanel\") || {};\n          var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n          var $element = this.element();\n\n          if (!hasWindow()) {\n            return;\n          }\n\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            this._renderLoadPanel($element, $element.parent());\n\n            loadPanel = this._loadPanel;\n          }\n\n          if (loadPanel) {\n            var visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n\n            if (isLoading) {\n              visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element);\n            }\n\n            clearTimeout(this._hideLoadingTimeoutID);\n\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              this._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function (columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function (rowIndex) {\n          var $cells = this.callBase.apply(this, arguments);\n\n          if ($cells) {\n            var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n\n          return $cells;\n        },\n        _getBoundaryVisibleItemIndex: function (isTop, isFloor) {\n          var itemIndex = 0;\n          var prevOffset = 0;\n          var offset = 0;\n          var viewportBoundary = this._scrollTop;\n\n          var $contentElement = this._findContentElement();\n\n          var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n          var dataController = this.getController(\"data\");\n          var items = dataController.items();\n          var tableElement = this.getTableElement();\n\n          if (items.length && tableElement) {\n            var rowElements = this._getRowElements(tableElement).filter(\":visible\");\n\n            if (!isTop) {\n              var height = this._hasHeight ? getOuterHeight(this.element()) : $(getWindow()).outerHeight();\n              viewportBoundary += height;\n            }\n\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffset = offset;\n              var $rowElement = $(rowElements).eq(itemIndex);\n\n              if ($rowElement.length) {\n                offset = $rowElement.offset();\n                offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\n\n                if (offset > viewportBoundary) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\n                      itemIndex--;\n                    }\n                  }\n\n                  break;\n                }\n              }\n            }\n\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n\n          return itemIndex;\n        },\n        getTopVisibleItemIndex: function (isFloor) {\n          return this._getBoundaryVisibleItemIndex(true, isFloor);\n        },\n        getBottomVisibleItemIndex: function (isFloor) {\n          return this._getBoundaryVisibleItemIndex(false, isFloor);\n        },\n        getTopVisibleRowData: function () {\n          var itemIndex = this.getTopVisibleItemIndex();\n\n          var items = this._dataController.items();\n\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        _scrollToElement: function ($element, offset) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement($element, offset);\n        },\n        optionChanged: function (args) {\n          this.callBase(args);\n\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"dataRowTemplate\":\n            case \"twoWayBindingEnabled\":\n              this._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            case \"scrolling\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              args.handled = true;\n              break;\n\n            case \"rtlEnabled\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              break;\n\n            case \"loadPanel\":\n              this._tableElement = null;\n\n              this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n\n              args.handled = true;\n              break;\n\n            case \"noDataText\":\n              this.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function () {\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function () {},\n        _restoreErrorRow: function () {}\n      };\n    }())\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js"],"names":["_extends","getHeight","getOuterHeight","getWidth","$","getWindow","hasWindow","eventsEngine","deferRender","deferUpdate","setHeight","isDefined","isNumeric","isString","each","extend","getBoundingRect","getDefaultAlignment","isEmpty","compileGetter","gridCoreUtils","ColumnsView","Scrollable","removeEvent","messageLocalization","browser","getScrollRtlBehavior","ROWS_VIEW_CLASS","CONTENT_CLASS","NOWRAP_CLASS","GROUP_ROW_CLASS","GROUP_CELL_CLASS","DATA_ROW_CLASS","FREE_SPACE_CLASS","ROW_LINES_CLASS","COLUMN_LINES_CLASS","ROW_ALTERNATION_CLASS","LAST_ROW_BORDER","EMPTY_CLASS","ROW_INSERTED_ANIMATION_CLASS","LOADPANEL_HIDE_TIMEOUT","getMaxHorizontalScrollOffset","scrollable","Math","round","scrollWidth","clientWidth","rowsModule","defaultOptions","hoverStateEnabled","scrolling","useNative","loadPanel","enabled","text","format","width","height","showIndicator","indicatorSrc","showPane","dataRowTemplate","columnAutoWidth","noDataText","wordWrapEnabled","showColumnLines","showRowLines","rowAlternationEnabled","activeStateEnabled","twoWayBindingEnabled","views","rowsView","inherit","defaultCellTemplate","$container","options","isDataTextEmpty","rowType","container","get","setEmptyText","column","encodeHtml","textContent","innerHTML","_getDefaultTemplate","command","html","_getDefaultGroupTemplate","summaryTexts","option","data","caption","summaryItems","length","getGroupRowSummaryText","groupContinuedMessage","groupContinuesMessage","addClass","_update","_getCellTemplate","template","groupIndex","showWhenGrouped","groupCellTemplate","allowRenderToDetachedContainer","render","cellTemplate","_createRow","row","$row","callBase","apply","arguments","isGroup","isDataRow","visible","hide","isRowExpanded","isExpanded","setAria","toString","_rowPrepared","rowOptions","_isAltRow","watch","value","toggleClass","_setAriaRowIndex","rowIndex","component","isPagerMode","isVirtualRowRendering","pageIndex","pageSize","_dataController","getRowIndexOffset","_afterRowPrepared","e","arg","args","dataController","getVisibleRows","isNewRow","dispose","generateDataValues","columns","repaintRows","deep","skipImmediate","on","rowElement","_renderScrollable","force","$element","element","children","append","_loadPanel","_renderLoadPanel","parent","isLocalStore","getScrollable","isLoaded","getColumns","allColumnsHasWidth","i","minWidth","_hasHeight","_columnsController","_isColumnFixing","_renderScrollableCore","_handleScroll","rtlEnabled","isNativeScrolling","_scrollTop","scrollOffset","top","_scrollLeft","left","scrollLeft","_scrollRight","positive","isScrollbarVisible","scrollChanged","fire","name","dxScrollableOptions","_createScrollableOptions","scrollHandler","bind","onScroll","_scrollable","_createComponent","_scrollableContainer","renderLoadPanel","_renderContent","contentElement","tableElement","empty","_findContentElement","_updateContent","newTableElement","change","that","getTableElement","changeType","executors","highlightChanges","rowInsertedClass","addWidgetPrefix","rowIndices","index","$newRowElement","_getRowElements","eq","changeTypes","item","items","push","$rowsElement","$rowElement","columnIndices","is","toggle","_updateCells","replaceWith","target","prependTo","insertBefore","insertAfter","last","isLiveUpdate","remove","setTableElement","_createEmptyRow","className","isFixed","$cell","getFixedColumns","_createCell","columnIndex","css","_appendEmptyRow","$table","$emptyRow","location","$tBodies","_getBodies","isTableContainer","first","prepend","$colgroup","_renderFreeSpaceRow","$tableElement","$freeSpaceRowElement","_wrapRowIfNeed","_checkRowKeys","rows","_getRows","keyExpr","store","key","some","fireError","_needUpdateRowHeight","itemsCount","_rowHeight","_getRowsHeight","$rowElements","not","toArray","reduce","sum","_updateRowHeight","rowsHeight","$content","content","$rows","_getFreeSpaceRowElements","tableElements","getTableElements","_getNoDataText","_rowClick","executeAction","evaluate","expr","getter","_rowDblClick","_getColumnsCountBeforeGroups","type","_getGroupCellOptions","columnsCountBeforeGroups","colspan","_renderCells","_renderGroupedCells","values","expandColumn","groupCellOptions","allowCollapsing","scrollingMode","cssClass","_renderCell","groupColumnAlignment","groupColumn","alignment","_renderRows","updateFreeSpaceRowHeight","_renderDataRowByTemplate","$tbody","appendTo","renderTemplate","_renderRow","rowTemplate","_renderTable","resizeCompleted","add","resizeCompletedHandler","scrollableInstance","closest","document","_visibilityChanged","_createTable","_renderCore","_lastColumnWidths","_getCellOptions","summaryCells","displayValue","getDisplayValue","parameters","oldValue","formatValue","resized","resizedCallbacks","groupingTextsOptions","isContinuationOnNextPage","isContinuation","_setRowsOpacityCore","visibleColumns","columnsController","columnID","isBand","hasClass","isParentBandColumn","opacity","_getDevicePixelRatio","devicePixelRatio","renderNoDataText","getCellOptions","columnIdentifier","cellOptions","columnOption","getVisibleColumns","calculateCellValue","getRow","itemCount","freeSpaceRowElements","totalCount","isFreeSpaceRowVisible","freeSpaceRowCount","pageCount","_updateLastRowBorder","scrollbarWidth","getScrollbarWidth","elementHeightWithoutScrollbar","contentHeight","showFreeSpaceRow","borderTopWidth","ceil","parseFloat","heightCorrection","_getHeightCorrection","resultHeight","show","isZoomedWebkit","webkit","isChromeLatest","chrome","version","hasExtraBorderTop","mozilla","_columnOptionChanged","optionNames","grouping","visibleWidth","_fireColumnResizedCallbacks","init","getController","_editorFactoryController","loadingChanged","isLoading","messageText","setLoading","dataSourceChanged","_handleDataChanged","publicMethods","contentWidth","isHorizontal","scrollableContainer","offsetWidth","clientHeight","offsetHeight","lastColumnWidths","columnWidths","removeClass","_updateScrollable","dxScrollable","getInstance","update","_updateHorizontalScrollPosition","maxHorizontalScrollOffset","scrollRight","scrollTo","x","_resizeCore","_height","hasHeight","loadPanelOptions","animation","visibilityOptions","message","position","calculateLoadPanelPosition","clearTimeout","_hideLoadingTimeoutID","setTimeout","setRowsOpacity","_getCellElementsCore","$cells","groupCellIndex","filter","slice","_getBoundaryVisibleItemIndex","isTop","isFloor","itemIndex","prevOffset","offset","viewportBoundary","$contentElement","contentElementOffsetTop","rowElements","outerHeight","getTopVisibleItemIndex","getBottomVisibleItemIndex","getTopVisibleRowData","_scrollToElement","scrollToElement","optionChanged","_invalidate","handled","_tableElement","fullName","setScrollerSpacing","_restoreErrorRow"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    setHeight\r\n} from \"../../core/utils/style\";\r\nimport {\r\n    isDefined,\r\n    isNumeric,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect,\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isEmpty\r\n} from \"../../core/utils/string\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    removeEvent\r\n} from \"../../core/remove_event\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport getScrollRtlBehavior from \"../../core/utils/scroll_rtl_behavior\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\r\nvar ROW_LINES_CLASS = \"dx-row-lines\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\r\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\r\nvar EMPTY_CLASS = \"dx-empty\";\r\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\r\nvar LOADPANEL_HIDE_TIMEOUT = 200;\r\n\r\nfunction getMaxHorizontalScrollOffset(scrollable) {\r\n    return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0\r\n}\r\nexport var rowsModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            hoverStateEnabled: false,\r\n            scrolling: {\r\n                useNative: \"auto\"\r\n            },\r\n            loadPanel: {\r\n                enabled: \"auto\",\r\n                text: messageLocalization.format(\"Loading\"),\r\n                width: 200,\r\n                height: 90,\r\n                showIndicator: true,\r\n                indicatorSrc: \"\",\r\n                showPane: true\r\n            },\r\n            dataRowTemplate: null,\r\n            columnAutoWidth: false,\r\n            noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\r\n            wordWrapEnabled: false,\r\n            showColumnLines: true,\r\n            showRowLines: false,\r\n            rowAlternationEnabled: false,\r\n            activeStateEnabled: false,\r\n            twoWayBindingEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        rowsView: ColumnsView.inherit(function() {\r\n            var defaultCellTemplate = function($container, options) {\r\n                var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\r\n                var text = options.text;\r\n                var container = $container.get(0);\r\n                if (isDataTextEmpty) {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                } else if (options.column.encodeHtml) {\r\n                    container.textContent = text\r\n                } else {\r\n                    container.innerHTML = text\r\n                }\r\n            };\r\n            return {\r\n                _getDefaultTemplate: function(column) {\r\n                    switch (column.command) {\r\n                        case \"empty\":\r\n                            return function(container) {\r\n                                container.html(\"&nbsp;\")\r\n                            };\r\n                        default:\r\n                            return defaultCellTemplate\r\n                    }\r\n                },\r\n                _getDefaultGroupTemplate: function(column) {\r\n                    var summaryTexts = this.option(\"summary.texts\");\r\n                    return function($container, options) {\r\n                        var data = options.data;\r\n                        var text = options.column.caption + \": \" + options.text;\r\n                        var container = $container.get(0);\r\n                        if (options.summaryItems && options.summaryItems.length) {\r\n                            text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts)\r\n                        }\r\n                        if (data) {\r\n                            if (options.groupContinuedMessage && options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuedMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \")\"\r\n                            }\r\n                        }\r\n                        $container.addClass(GROUP_CELL_CLASS);\r\n                        if (column.encodeHtml) {\r\n                            container.textContent = text\r\n                        } else {\r\n                            container.innerHTML = text\r\n                        }\r\n                    }\r\n                },\r\n                _update: function() {},\r\n                _getCellTemplate: function(options) {\r\n                    var column = options.column;\r\n                    var template;\r\n                    if (\"group\" === options.rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command) {\r\n                        template = column.groupCellTemplate || {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultGroupTemplate(column)\r\n                        }\r\n                    } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\r\n                        template = column.cellTemplate\r\n                    } else {\r\n                        template = {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultTemplate(column)\r\n                        }\r\n                    }\r\n                    return template\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isGroup = \"group\" === row.rowType;\r\n                        var isDataRow = \"data\" === row.rowType;\r\n                        isDataRow && $row.addClass(DATA_ROW_CLASS);\r\n                        isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\r\n                        this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\r\n                        if (false === row.visible) {\r\n                            $row.hide()\r\n                        }\r\n                        if (isGroup) {\r\n                            $row.addClass(GROUP_ROW_CLASS);\r\n                            var isRowExpanded = row.isExpanded;\r\n                            this.setAria(\"role\", \"row\", $row);\r\n                            this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowPrepared: function($row, rowOptions, row) {\r\n                    if (\"data\" === rowOptions.rowType) {\r\n                        if (this.option(\"rowAlternationEnabled\")) {\r\n                            this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\r\n                            rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\r\n                                $row.toggleClass(ROW_ALTERNATION_CLASS, value)\r\n                            })\r\n                        }\r\n                        this._setAriaRowIndex(rowOptions, $row);\r\n                        rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row))\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _setAriaRowIndex: function(row, $row) {\r\n                    var component = this.component;\r\n                    var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\r\n                    var rowIndex = row.rowIndex + 1;\r\n                    if (isPagerMode) {\r\n                        rowIndex = component.pageIndex() * component.pageSize() + rowIndex\r\n                    } else {\r\n                        rowIndex += this._dataController.getRowIndexOffset()\r\n                    }\r\n                    this.setAria(\"rowindex\", rowIndex, $row)\r\n                },\r\n                _afterRowPrepared: function(e) {\r\n                    var arg = e.args[0];\r\n                    var dataController = this._dataController;\r\n                    var row = dataController.getVisibleRows()[arg.rowIndex];\r\n                    var watch = this.option(\"integrationOptions.watchMethod\");\r\n                    if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\r\n                        return\r\n                    }\r\n                    var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\r\n                        dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"))\r\n                    }, {\r\n                        deep: true,\r\n                        skipImmediate: true\r\n                    });\r\n                    eventsEngine.on(arg.rowElement, removeEvent, dispose)\r\n                },\r\n                _renderScrollable: function(force) {\r\n                    var $element = this.element();\r\n                    if (!$element.children().length) {\r\n                        $element.append(\"<div>\")\r\n                    }\r\n                    if (force || !this._loadPanel) {\r\n                        this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore())\r\n                    }\r\n                    if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\r\n                        var columns = this.getColumns();\r\n                        var allColumnsHasWidth = true;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            if (!columns[i].width && !columns[i].minWidth) {\r\n                                allColumnsHasWidth = false;\r\n                                break\r\n                            }\r\n                        }\r\n                        if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\r\n                            this._renderScrollableCore($element)\r\n                        }\r\n                    }\r\n                },\r\n                _handleScroll: function(e) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    var isNativeScrolling = e.component.option(\"useNative\");\r\n                    this._scrollTop = e.scrollOffset.top;\r\n                    this._scrollLeft = e.scrollOffset.left;\r\n                    var scrollLeft = e.scrollOffset.left;\r\n                    if (rtlEnabled) {\r\n                        this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\r\n                        if (isNativeScrolling) {\r\n                            scrollLeft = getScrollRtlBehavior().positive ? this._scrollRight : -this._scrollRight\r\n                        }\r\n                        if (!this.isScrollbarVisible(true)) {\r\n                            this._scrollLeft = -1\r\n                        }\r\n                    }\r\n                    this.scrollChanged.fire(_extends({}, e.scrollOffset, {\r\n                        left: scrollLeft\r\n                    }), this.name)\r\n                },\r\n                _renderScrollableCore: function($element) {\r\n                    var dxScrollableOptions = this._createScrollableOptions();\r\n                    var scrollHandler = this._handleScroll.bind(this);\r\n                    dxScrollableOptions.onScroll = scrollHandler;\r\n                    this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\r\n                    this._scrollableContainer = this._scrollable && $(this._scrollable.container())\r\n                },\r\n                _renderLoadPanel: gridCoreUtils.renderLoadPanel,\r\n                _renderContent: function(contentElement, tableElement) {\r\n                    contentElement.empty().append(tableElement);\r\n                    return this._findContentElement()\r\n                },\r\n                _updateContent: function(newTableElement, change) {\r\n                    var that = this;\r\n                    var tableElement = that.getTableElement();\r\n                    var contentElement = that._findContentElement();\r\n                    var changeType = change && change.changeType;\r\n                    var executors = [];\r\n                    var highlightChanges = this.option(\"highlightChanges\");\r\n                    var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\r\n                    switch (changeType) {\r\n                        case \"update\":\r\n                            each(change.rowIndices, (function(index, rowIndex) {\r\n                                var $newRowElement = that._getRowElements(newTableElement).eq(index);\r\n                                var changeType = change.changeTypes && change.changeTypes[index];\r\n                                var item = change.items && change.items[index];\r\n                                executors.push((function() {\r\n                                    var $rowsElement = that._getRowElements();\r\n                                    var $rowElement = $rowsElement.eq(rowIndex);\r\n                                    switch (changeType) {\r\n                                        case \"update\":\r\n                                            if (item) {\r\n                                                var columnIndices = change.columnIndices && change.columnIndices[index];\r\n                                                if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\r\n                                                    $rowElement.toggle(item.visible)\r\n                                                } else if (columnIndices) {\r\n                                                    that._updateCells($rowElement, $newRowElement, columnIndices)\r\n                                                } else {\r\n                                                    $rowElement.replaceWith($newRowElement)\r\n                                                }\r\n                                            }\r\n                                            break;\r\n                                        case \"insert\":\r\n                                            if (!$rowsElement.length) {\r\n                                                if (tableElement) {\r\n                                                    var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\r\n                                                    $newRowElement.prependTo(target)\r\n                                                }\r\n                                            } else if ($rowElement.length) {\r\n                                                $newRowElement.insertBefore($rowElement)\r\n                                            } else {\r\n                                                $newRowElement.insertAfter($rowsElement.last())\r\n                                            }\r\n                                            if (highlightChanges && change.isLiveUpdate) {\r\n                                                $newRowElement.addClass(rowInsertedClass)\r\n                                            }\r\n                                            break;\r\n                                        case \"remove\":\r\n                                            $rowElement.remove()\r\n                                    }\r\n                                }))\r\n                            }));\r\n                            each(executors, (function() {\r\n                                this()\r\n                            }));\r\n                            newTableElement.remove();\r\n                            break;\r\n                        default:\r\n                            that.setTableElement(newTableElement);\r\n                            contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\r\n                            that._renderContent(contentElement, newTableElement)\r\n                    }\r\n                },\r\n                _createEmptyRow: function(className, isFixed, height) {\r\n                    var $cell;\r\n                    var $row = this._createRow();\r\n                    var columns = isFixed ? this.getFixedColumns() : this.getColumns();\r\n                    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        $cell = this._createCell({\r\n                            column: columns[i],\r\n                            rowType: \"freeSpace\",\r\n                            columnIndex: i,\r\n                            columns: columns\r\n                        });\r\n                        isNumeric(height) && $cell.css(\"height\", height);\r\n                        $row.append($cell)\r\n                    }\r\n                    this.setAria(\"role\", \"presentation\", $row);\r\n                    return $row\r\n                },\r\n                _appendEmptyRow: function($table, $emptyRow, location) {\r\n                    var $tBodies = this._getBodies($table);\r\n                    var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\r\n                    var $container = isTableContainer ? $table : $tBodies;\r\n                    if (\"top\" === location) {\r\n                        $container.first().prepend($emptyRow);\r\n                        if (isTableContainer) {\r\n                            var $colgroup = $container.children(\"colgroup\");\r\n                            $container.prepend($colgroup)\r\n                        }\r\n                    } else {\r\n                        $container.last().append($emptyRow)\r\n                    }\r\n                },\r\n                _renderFreeSpaceRow: function($tableElement) {\r\n                    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\r\n                    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\r\n                    this._appendEmptyRow($tableElement, $freeSpaceRowElement)\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    var that = this;\r\n                    var rows = that._getRows(options);\r\n                    var keyExpr = that._dataController.store() && that._dataController.store().key();\r\n                    keyExpr && rows.some((function(row) {\r\n                        if (\"data\" === row.rowType && void 0 === row.key) {\r\n                            that._dataController.fireError(\"E1046\", keyExpr);\r\n                            return true\r\n                        }\r\n                    }))\r\n                },\r\n                _needUpdateRowHeight: function(itemsCount) {\r\n                    return itemsCount > 0 && !this._rowHeight\r\n                },\r\n                _getRowsHeight: function($tableElement) {\r\n                    var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\r\n                    return $rowElements.toArray().reduce((function(sum, row) {\r\n                        return sum + getBoundingRect(row).height\r\n                    }), 0)\r\n                },\r\n                _updateRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var itemsCount = this._dataController.items().length;\r\n                    if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\r\n                        var rowsHeight = this._getRowsHeight($tableElement);\r\n                        this._rowHeight = rowsHeight / itemsCount\r\n                    }\r\n                },\r\n                _findContentElement: function() {\r\n                    var $content = this.element();\r\n                    var scrollable = this.getScrollable();\r\n                    if ($content) {\r\n                        if (scrollable) {\r\n                            $content = $(scrollable.content())\r\n                        }\r\n                        return $content.children().first()\r\n                    }\r\n                },\r\n                _getRowElements: function(tableElement) {\r\n                    var $rows = this.callBase(tableElement);\r\n                    return $rows && $rows.not(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getFreeSpaceRowElements: function($table) {\r\n                    var tableElements = $table || this.getTableElements();\r\n                    return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getNoDataText: function() {\r\n                    return this.option(\"noDataText\")\r\n                },\r\n                _rowClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowClick\", extend({\r\n                        evaluate: function(expr) {\r\n                            var getter = compileGetter(expr);\r\n                            return getter(item.data)\r\n                        }\r\n                    }, e, item))\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowDblClick\", extend({}, e, item))\r\n                },\r\n                _getColumnsCountBeforeGroups: function(columns) {\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (\"groupExpand\" === columns[i].type) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return 0\r\n                },\r\n                _getGroupCellOptions: function(options) {\r\n                    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\r\n                    var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\r\n                    return {\r\n                        columnIndex: columnIndex,\r\n                        colspan: options.columns.length - columnIndex - 1\r\n                    }\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    if (\"group\" === options.row.rowType) {\r\n                        this._renderGroupedCells($row, options)\r\n                    } else if (options.row.values) {\r\n                        this.callBase($row, options)\r\n                    }\r\n                },\r\n                _renderGroupedCells: function($row, options) {\r\n                    var row = options.row;\r\n                    var expandColumn;\r\n                    var columns = options.columns;\r\n                    var rowIndex = row.rowIndex;\r\n                    var isExpanded;\r\n                    var groupCellOptions = this._getGroupCellOptions(options);\r\n                    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\r\n                        if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\r\n                            isExpanded = !!row.isExpanded;\r\n                            expandColumn = columns[i]\r\n                        } else {\r\n                            isExpanded = null;\r\n                            expandColumn = {\r\n                                command: \"expand\",\r\n                                cssClass: columns[i].cssClass\r\n                            }\r\n                        }\r\n                        this._renderCell($row, {\r\n                            value: isExpanded,\r\n                            row: row,\r\n                            rowIndex: rowIndex,\r\n                            column: expandColumn,\r\n                            columnIndex: i\r\n                        })\r\n                    }\r\n                    var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\r\n                    var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\r\n                        command: null,\r\n                        cssClass: null,\r\n                        width: null,\r\n                        showWhenGrouped: false,\r\n                        alignment: groupColumnAlignment\r\n                    });\r\n                    if (groupCellOptions.colspan > 1) {\r\n                        groupColumn.colspan = groupCellOptions.colspan\r\n                    }\r\n                    this._renderCell($row, {\r\n                        value: row.values[row.groupIndex],\r\n                        row: row,\r\n                        rowIndex: rowIndex,\r\n                        column: groupColumn,\r\n                        columnIndex: groupCellOptions.columnIndex\r\n                    })\r\n                },\r\n                _renderRows: function($table, options) {\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    this.callBase($table, extend({\r\n                        scrollingMode: scrollingMode\r\n                    }, options));\r\n                    this._checkRowKeys(options.change);\r\n                    this._renderFreeSpaceRow($table);\r\n                    if (!this._hasHeight) {\r\n                        this.updateFreeSpaceRowHeight($table)\r\n                    }\r\n                },\r\n                _renderDataRowByTemplate($table, options, dataRowTemplate) {\r\n                    var row = options.row;\r\n                    var rowOptions = extend({\r\n                        columns: options.columns\r\n                    }, row);\r\n                    var $tbody = this._createRow(row, \"tbody\");\r\n                    $tbody.appendTo($table);\r\n                    this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\r\n                    this._rowPrepared($tbody, rowOptions, options.row)\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    var row = options.row;\r\n                    var rowTemplate = this.option().rowTemplate;\r\n                    var dataRowTemplate = this.option(\"dataRowTemplate\");\r\n                    if (\"data\" === row.rowType && dataRowTemplate) {\r\n                        this._renderDataRowByTemplate($table, options, dataRowTemplate)\r\n                    } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\r\n                        this.renderTemplate($table, rowTemplate, extend({\r\n                            columns: options.columns\r\n                        }, row), true)\r\n                    } else {\r\n                        this.callBase($table, options)\r\n                    }\r\n                },\r\n                _renderTable: function(options) {\r\n                    var that = this;\r\n                    var $table = that.callBase(options);\r\n                    if (!isDefined(that.getTableElement())) {\r\n                        that.setTableElement($table);\r\n                        that._renderScrollable(true);\r\n                        that.resizeCompleted.add((function resizeCompletedHandler() {\r\n                            var scrollableInstance = that.getScrollable();\r\n                            if (scrollableInstance && that.element().closest(getWindow().document).length) {\r\n                                that.resizeCompleted.remove(resizeCompletedHandler);\r\n                                scrollableInstance._visibilityChanged(true)\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        that._renderScrollable()\r\n                    }\r\n                    return $table\r\n                },\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    if (this.option().rowTemplate && !this.option(\"dataRowTemplate\")) {\r\n                        $table.appendTo(this.component.$element())\r\n                    }\r\n                    return $table\r\n                },\r\n                _renderCore: function(change) {\r\n                    var $element = this.element();\r\n                    $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\r\n                    $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());\r\n                    this.setAria(\"role\", \"presentation\", $element);\r\n                    var $table = this._renderTable({\r\n                        change: change\r\n                    });\r\n                    this._updateContent($table, change);\r\n                    this.callBase(change);\r\n                    this._lastColumnWidths = null\r\n                },\r\n                _getRows: function(change) {\r\n                    return change && change.items || this._dataController.items()\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var column = options.column;\r\n                    var row = options.row;\r\n                    var data = row.data;\r\n                    var summaryCells = row && row.summaryCells;\r\n                    var value = options.value;\r\n                    var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\r\n                    var parameters = this.callBase(options);\r\n                    parameters.value = value;\r\n                    parameters.oldValue = options.oldValue;\r\n                    parameters.displayValue = displayValue;\r\n                    parameters.row = row;\r\n                    parameters.key = row.key;\r\n                    parameters.data = data;\r\n                    parameters.rowType = row.rowType;\r\n                    parameters.values = row.values;\r\n                    parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\r\n                    parameters.rowIndex = row.rowIndex;\r\n                    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\r\n                    parameters.resized = column.resizedCallbacks;\r\n                    if (isDefined(column.groupIndex) && !column.command) {\r\n                        var groupingTextsOptions = this.option(\"grouping.texts\");\r\n                        var scrollingMode = this.option(\"scrolling.mode\");\r\n                        if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                            parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\r\n                            parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage\r\n                        }\r\n                    }\r\n                    return parameters\r\n                },\r\n                _setRowsOpacityCore: function($rows, visibleColumns, columnIndex, value) {\r\n                    var columnsController = this._columnsController;\r\n                    var columns = columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    each($rows, (function(rowIndex, row) {\r\n                        if (!$(row).hasClass(GROUP_ROW_CLASS)) {\r\n                            for (var i = 0; i < visibleColumns.length; i++) {\r\n                                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\r\n                                    $rows.eq(rowIndex).children().eq(i).css({\r\n                                        opacity: value\r\n                                    });\r\n                                    if (!isNumeric(columnID)) {\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _getDevicePixelRatio: function() {\r\n                    return getWindow().devicePixelRatio\r\n                },\r\n                renderNoDataText: gridCoreUtils.renderNoDataText,\r\n                getCellOptions: function(rowIndex, columnIdentifier) {\r\n                    var rowOptions = this._dataController.items()[rowIndex];\r\n                    var cellOptions;\r\n                    var column;\r\n                    if (rowOptions) {\r\n                        if (isString(columnIdentifier)) {\r\n                            column = this._columnsController.columnOption(columnIdentifier)\r\n                        } else {\r\n                            column = this._columnsController.getVisibleColumns()[columnIdentifier]\r\n                        }\r\n                        if (column) {\r\n                            cellOptions = this._getCellOptions({\r\n                                value: column.calculateCellValue(rowOptions.data),\r\n                                rowIndex: rowOptions.rowIndex,\r\n                                row: rowOptions,\r\n                                column: column\r\n                            })\r\n                        }\r\n                    }\r\n                    return cellOptions\r\n                },\r\n                getRow: function(index) {\r\n                    if (index >= 0) {\r\n                        var rows = this._getRowElements();\r\n                        if (rows.length > index) {\r\n                            return $(rows[index])\r\n                        }\r\n                    }\r\n                },\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var dataController = this._dataController;\r\n                    var itemCount = dataController.items(true).length;\r\n                    var contentElement = this._findContentElement();\r\n                    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n                    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\r\n                        var isFreeSpaceRowVisible = false;\r\n                        if (itemCount > 0) {\r\n                            if (!this._hasHeight) {\r\n                                var freeSpaceRowCount = dataController.pageSize() - itemCount;\r\n                                var scrollingMode = this.option(\"scrolling.mode\");\r\n                                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                                    setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\r\n                                    isFreeSpaceRowVisible = true\r\n                                }\r\n                                if (!isFreeSpaceRowVisible && $table) {\r\n                                    setHeight(freeSpaceRowElements, 0)\r\n                                } else {\r\n                                    freeSpaceRowElements.toggle(isFreeSpaceRowVisible)\r\n                                }\r\n                                this._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                            } else {\r\n                                freeSpaceRowElements.hide();\r\n                                deferUpdate(() => {\r\n                                    var scrollbarWidth = this.getScrollbarWidth(true);\r\n                                    var elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\r\n                                    var contentHeight = getOuterHeight(contentElement);\r\n                                    var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\r\n                                    var rowsHeight = this._getRowsHeight(contentElement.children().first());\r\n                                    var $tableElement = $table || this.getTableElements();\r\n                                    var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\r\n                                    var heightCorrection = this._getHeightCorrection();\r\n                                    var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\r\n                                    if (showFreeSpaceRow) {\r\n                                        deferRender(() => {\r\n                                            freeSpaceRowElements.css(\"height\", resultHeight);\r\n                                            isFreeSpaceRowVisible = true;\r\n                                            freeSpaceRowElements.show()\r\n                                        })\r\n                                    }\r\n                                    deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible))\r\n                                })\r\n                            }\r\n                        } else {\r\n                            freeSpaceRowElements.css(\"height\", 0);\r\n                            freeSpaceRowElements.show();\r\n                            this._updateLastRowBorder(true)\r\n                        }\r\n                    }\r\n                },\r\n                _getHeightCorrection: function() {\r\n                    var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\r\n                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                    var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\r\n                    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var optionNames = e.optionNames;\r\n                    if (e.changeTypes.grouping) {\r\n                        return\r\n                    }\r\n                    if (optionNames.width || optionNames.visibleWidth) {\r\n                        this.callBase(e);\r\n                        this._fireColumnResizedCallbacks()\r\n                    }\r\n                },\r\n                getScrollable: function() {\r\n                    return this._scrollable\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var dataController = that.getController(\"data\");\r\n                    that.callBase();\r\n                    that._editorFactoryController = that.getController(\"editorFactory\");\r\n                    that._rowHeight = 0;\r\n                    that._scrollTop = 0;\r\n                    that._scrollLeft = -1;\r\n                    that._scrollRight = 0;\r\n                    that._hasHeight = false;\r\n                    dataController.loadingChanged.add((function(isLoading, messageText) {\r\n                        that.setLoading(isLoading, messageText)\r\n                    }));\r\n                    dataController.dataSourceChanged.add((function() {\r\n                        if (that._scrollLeft >= 0) {\r\n                            that._handleScroll({\r\n                                component: that.getScrollable(),\r\n                                scrollOffset: {\r\n                                    top: that._scrollTop,\r\n                                    left: that._scrollLeft\r\n                                }\r\n                            })\r\n                        }\r\n                    }))\r\n                },\r\n                _handleDataChanged: function(change) {\r\n                    switch (change.changeType) {\r\n                        case \"refresh\":\r\n                        case \"prepend\":\r\n                        case \"append\":\r\n                        case \"update\":\r\n                            this.render(null, change);\r\n                            break;\r\n                        default:\r\n                            this._update(change)\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"]\r\n                },\r\n                contentWidth: function() {\r\n                    return getWidth(this.element()) - this.getScrollbarWidth()\r\n                },\r\n                getScrollbarWidth: function(isHorizontal) {\r\n                    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\r\n                    var scrollbarWidth = 0;\r\n                    if (scrollableContainer) {\r\n                        if (!isHorizontal) {\r\n                            scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0\r\n                        } else {\r\n                            scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\r\n                            scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0)\r\n                        }\r\n                    }\r\n                    var that, scrollable;\r\n                    return scrollbarWidth > 0 ? scrollbarWidth : 0\r\n                },\r\n                _fireColumnResizedCallbacks: function() {\r\n                    var lastColumnWidths = this._lastColumnWidths || [];\r\n                    var columnWidths = [];\r\n                    var columns = this.getColumns();\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        columnWidths[i] = columns[i].visibleWidth;\r\n                        if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\r\n                            columns[i].resizedCallbacks.fire(columnWidths[i])\r\n                        }\r\n                    }\r\n                    this._lastColumnWidths = columnWidths\r\n                },\r\n                _updateLastRowBorder: function(isFreeSpaceRowVisible) {\r\n                    if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\r\n                        this.element().addClass(LAST_ROW_BORDER)\r\n                    } else {\r\n                        this.element().removeClass(LAST_ROW_BORDER)\r\n                    }\r\n                },\r\n                _updateScrollable: function() {\r\n                    var dxScrollable = Scrollable.getInstance(this.element());\r\n                    if (dxScrollable) {\r\n                        dxScrollable.update();\r\n                        this._updateHorizontalScrollPosition()\r\n                    }\r\n                },\r\n                _updateHorizontalScrollPosition: function() {\r\n                    var scrollable = this.getScrollable();\r\n                    var scrollLeft = scrollable && scrollable.scrollOffset().left;\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\r\n                        var scrollRight = maxHorizontalScrollOffset - scrollLeft;\r\n                        if (scrollRight !== this._scrollRight) {\r\n                            this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight\r\n                        }\r\n                    }\r\n                    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\r\n                        scrollable.scrollTo({\r\n                            x: this._scrollLeft\r\n                        })\r\n                    }\r\n                },\r\n                _resizeCore: function() {\r\n                    var that = this;\r\n                    that._fireColumnResizedCallbacks();\r\n                    that._updateRowHeight();\r\n                    deferRender((function() {\r\n                        that._renderScrollable();\r\n                        that.renderNoDataText();\r\n                        that.updateFreeSpaceRowHeight();\r\n                        deferUpdate((function() {\r\n                            that._updateScrollable()\r\n                        }))\r\n                    }))\r\n                },\r\n                scrollTo: function(location) {\r\n                    var $element = this.element();\r\n                    var dxScrollable = $element && Scrollable.getInstance($element);\r\n                    if (dxScrollable) {\r\n                        dxScrollable.scrollTo(location)\r\n                    }\r\n                },\r\n                height: function(_height, hasHeight) {\r\n                    var that = this;\r\n                    var $element = this.element();\r\n                    if (0 === arguments.length) {\r\n                        return $element ? getOuterHeight($element, true) : 0\r\n                    }\r\n                    that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\r\n                    if (isDefined(_height) && $element) {\r\n                        setHeight($element, _height)\r\n                    }\r\n                },\r\n                setLoading: function(isLoading, messageText) {\r\n                    var loadPanel = this._loadPanel;\r\n                    var dataController = this._dataController;\r\n                    var loadPanelOptions = this.option(\"loadPanel\") || {};\r\n                    var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\r\n                    var $element = this.element();\r\n                    if (!hasWindow()) {\r\n                        return\r\n                    }\r\n                    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\r\n                        this._renderLoadPanel($element, $element.parent());\r\n                        loadPanel = this._loadPanel\r\n                    }\r\n                    if (loadPanel) {\r\n                        var visibilityOptions = {\r\n                            message: messageText || loadPanelOptions.text,\r\n                            animation: animation,\r\n                            visible: isLoading\r\n                        };\r\n                        if (isLoading) {\r\n                            visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element)\r\n                        }\r\n                        clearTimeout(this._hideLoadingTimeoutID);\r\n                        if (loadPanel.option(\"visible\") && !isLoading) {\r\n                            this._hideLoadingTimeoutID = setTimeout((function() {\r\n                                loadPanel.option(visibilityOptions)\r\n                            }), LOADPANEL_HIDE_TIMEOUT)\r\n                        } else {\r\n                            loadPanel.option(visibilityOptions)\r\n                        }\r\n                    }\r\n                },\r\n                setRowsOpacity: function(columnIndex, value) {\r\n                    var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\r\n                    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value)\r\n                },\r\n                _getCellElementsCore: function(rowIndex) {\r\n                    var $cells = this.callBase.apply(this, arguments);\r\n                    if ($cells) {\r\n                        var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\r\n                        if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\r\n                            return $cells.slice(0, groupCellIndex + 1)\r\n                        }\r\n                    }\r\n                    return $cells\r\n                },\r\n                _getBoundaryVisibleItemIndex: function(isTop, isFloor) {\r\n                    var itemIndex = 0;\r\n                    var prevOffset = 0;\r\n                    var offset = 0;\r\n                    var viewportBoundary = this._scrollTop;\r\n                    var $contentElement = this._findContentElement();\r\n                    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\r\n                    var dataController = this.getController(\"data\");\r\n                    var items = dataController.items();\r\n                    var tableElement = this.getTableElement();\r\n                    if (items.length && tableElement) {\r\n                        var rowElements = this._getRowElements(tableElement).filter(\":visible\");\r\n                        if (!isTop) {\r\n                            var height = this._hasHeight ? getOuterHeight(this.element()) : $(getWindow()).outerHeight();\r\n                            viewportBoundary += height\r\n                        }\r\n                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                            prevOffset = offset;\r\n                            var $rowElement = $(rowElements).eq(itemIndex);\r\n                            if ($rowElement.length) {\r\n                                offset = $rowElement.offset();\r\n                                offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\r\n                                if (offset > viewportBoundary) {\r\n                                    if (itemIndex) {\r\n                                        if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\r\n                                            itemIndex--\r\n                                        }\r\n                                    }\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if (itemIndex && itemIndex === items.length) {\r\n                            itemIndex--\r\n                        }\r\n                    }\r\n                    return itemIndex\r\n                },\r\n                getTopVisibleItemIndex: function(isFloor) {\r\n                    return this._getBoundaryVisibleItemIndex(true, isFloor)\r\n                },\r\n                getBottomVisibleItemIndex: function(isFloor) {\r\n                    return this._getBoundaryVisibleItemIndex(false, isFloor)\r\n                },\r\n                getTopVisibleRowData: function() {\r\n                    var itemIndex = this.getTopVisibleItemIndex();\r\n                    var items = this._dataController.items();\r\n                    if (items[itemIndex]) {\r\n                        return items[itemIndex].data\r\n                    }\r\n                },\r\n                _scrollToElement: function($element, offset) {\r\n                    var scrollable = this.getScrollable();\r\n                    scrollable && scrollable.scrollToElement($element, offset)\r\n                },\r\n                optionChanged: function(args) {\r\n                    this.callBase(args);\r\n                    switch (args.name) {\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                        case \"showRowLines\":\r\n                        case \"rowAlternationEnabled\":\r\n                        case \"rowTemplate\":\r\n                        case \"dataRowTemplate\":\r\n                        case \"twoWayBindingEnabled\":\r\n                            this._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"scrolling\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            break;\r\n                        case \"loadPanel\":\r\n                            this._tableElement = null;\r\n                            this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"noDataText\":\r\n                            this.renderNoDataText();\r\n                            args.handled = true\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    clearTimeout(this._hideLoadingTimeoutID);\r\n                    this._scrollable && this._scrollable.dispose()\r\n                },\r\n                setScrollerSpacing: function() {},\r\n                _restoreErrorRow: function() {}\r\n            }\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}