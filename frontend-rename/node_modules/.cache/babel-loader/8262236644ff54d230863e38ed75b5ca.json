{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/date.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { isString } from \"../core/utils/type\";\nimport { each } from \"../core/utils/iterator\";\nimport { inArray } from \"../core/utils/array\";\nimport errors from \"../core/errors\";\nimport { getFormatter as getLDMLDateFormatter } from \"./ldml/date.formatter\";\nimport { getFormat as getLDMLDateFormat } from \"./ldml/date.format\";\nimport { getParser as getLDMLDateParser } from \"./ldml/date.parser\";\nimport defaultDateNames from \"./default_date_names\";\nimport firstDayOfWeekData from \"./cldr-data/first_day_of_week_data\";\nimport localizationCore from \"./core\";\nimport numberLocalization from \"./number\";\nimport intlDateLocalization from \"./intl/date\";\nvar DEFAULT_DAY_OF_WEEK_INDEX = 0;\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar FORMATS_TO_PATTERN_MAP = {\n  shortdate: \"M/d/y\",\n  shorttime: \"h:mm a\",\n  longdate: \"EEEE, MMMM d, y\",\n  longtime: \"h:mm:ss a\",\n  monthandday: \"MMMM d\",\n  monthandyear: \"MMMM y\",\n  quarterandyear: \"QQQ y\",\n  day: \"d\",\n  year: \"y\",\n  shortdateshorttime: \"M/d/y, h:mm a\",\n  longdatelongtime: \"EEEE, MMMM d, y, h:mm:ss a\",\n  month: \"LLLL\",\n  shortyear: \"yy\",\n  dayofweek: \"EEEE\",\n  quarter: \"QQQ\",\n  hour: \"HH\",\n  minute: \"mm\",\n  second: \"ss\",\n  millisecond: \"SSS\",\n  \"datetime-local\": \"yyyy-MM-ddTHH':'mm':'ss\"\n};\nvar possiblePartPatterns = {\n  year: [\"y\", \"yy\", \"yyyy\"],\n  day: [\"d\", \"dd\"],\n  month: [\"M\", \"MM\", \"MMM\", \"MMMM\"],\n  hours: [\"H\", \"HH\", \"h\", \"hh\", \"ah\"],\n  minutes: [\"m\", \"mm\"],\n  seconds: [\"s\", \"ss\"],\n  milliseconds: [\"S\", \"SS\", \"SSS\"]\n};\nvar dateLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  _getPatternByFormat: function (format) {\n    return FORMATS_TO_PATTERN_MAP[format.toLowerCase()];\n  },\n  _expandPattern: function (pattern) {\n    return this._getPatternByFormat(pattern) || pattern;\n  },\n  formatUsesMonthName: function (format) {\n    return -1 !== this._expandPattern(format).indexOf(\"MMMM\");\n  },\n  formatUsesDayName: function (format) {\n    return -1 !== this._expandPattern(format).indexOf(\"EEEE\");\n  },\n  getFormatParts: function (format) {\n    var pattern = this._getPatternByFormat(format) || format;\n    var result = [];\n    each(pattern.split(/\\W+/), (_, formatPart) => {\n      each(possiblePartPatterns, (partName, possiblePatterns) => {\n        if (inArray(formatPart, possiblePatterns) > -1) {\n          result.push(partName);\n        }\n      });\n    });\n    return result;\n  },\n  getMonthNames: function (format) {\n    return defaultDateNames.getMonthNames(format);\n  },\n  getDayNames: function (format) {\n    return defaultDateNames.getDayNames(format);\n  },\n  getQuarterNames: function (format) {\n    return defaultDateNames.getQuarterNames(format);\n  },\n  getPeriodNames: function (format) {\n    return defaultDateNames.getPeriodNames(format);\n  },\n  getTimeSeparator: function () {\n    return \":\";\n  },\n  is24HourFormat: function (format) {\n    var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);\n    var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);\n    var amTimeFormatted = this.format(amTime, format);\n    var pmTimeFormatted = this.format(pmTime, format);\n\n    for (var i = 0; i < amTimeFormatted.length; i++) {\n      if (amTimeFormatted[i] !== pmTimeFormatted[i]) {\n        return !isNaN(parseInt(amTimeFormatted[i]));\n      }\n    }\n  },\n  format: function (date, _format) {\n    if (!date) {\n      return;\n    }\n\n    if (!_format) {\n      return date;\n    }\n\n    var formatter;\n\n    if (\"function\" === typeof _format) {\n      formatter = _format;\n    } else if (_format.formatter) {\n      formatter = _format.formatter;\n    } else {\n      _format = _format.type || _format;\n\n      if (isString(_format)) {\n        _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;\n        return numberLocalization.convertDigits(getLDMLDateFormatter(_format, this)(date));\n      }\n    }\n\n    if (!formatter) {\n      return;\n    }\n\n    return formatter(date);\n  },\n  parse: function (text, format) {\n    var that = this;\n    var ldmlFormat;\n    var formatter;\n\n    if (!text) {\n      return;\n    }\n\n    if (!format) {\n      return this.parse(text, \"shortdate\");\n    }\n\n    if (format.parser) {\n      return format.parser(text);\n    }\n\n    if (\"string\" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {\n      ldmlFormat = format;\n    } else {\n      formatter = value => {\n        var text = that.format(value, format);\n        return numberLocalization.convertDigits(text, true);\n      };\n\n      try {\n        ldmlFormat = getLDMLDateFormat(formatter);\n      } catch (e) {}\n    }\n\n    if (ldmlFormat) {\n      text = numberLocalization.convertDigits(text, true);\n      return getLDMLDateParser(ldmlFormat, this)(text);\n    }\n\n    errors.log(\"W0012\");\n    var result = new Date(text);\n\n    if (!result || isNaN(result.getTime())) {\n      return;\n    }\n\n    return result;\n  },\n  firstDayOfWeekIndex: function () {\n    var index = localizationCore.getValueByClosestLocale(locale => firstDayOfWeekData[locale]);\n    return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index;\n  }\n});\n\nif (hasIntl) {\n  dateLocalization.inject(intlDateLocalization);\n}\n\nexport default dateLocalization;","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/localization/date.js"],"names":["dependencyInjector","isString","each","inArray","errors","getFormatter","getLDMLDateFormatter","getFormat","getLDMLDateFormat","getParser","getLDMLDateParser","defaultDateNames","firstDayOfWeekData","localizationCore","numberLocalization","intlDateLocalization","DEFAULT_DAY_OF_WEEK_INDEX","hasIntl","Intl","FORMATS_TO_PATTERN_MAP","shortdate","shorttime","longdate","longtime","monthandday","monthandyear","quarterandyear","day","year","shortdateshorttime","longdatelongtime","month","shortyear","dayofweek","quarter","hour","minute","second","millisecond","possiblePartPatterns","hours","minutes","seconds","milliseconds","dateLocalization","engine","_getPatternByFormat","format","toLowerCase","_expandPattern","pattern","formatUsesMonthName","indexOf","formatUsesDayName","getFormatParts","result","split","_","formatPart","partName","possiblePatterns","push","getMonthNames","getDayNames","getQuarterNames","getPeriodNames","getTimeSeparator","is24HourFormat","amTime","Date","pmTime","amTimeFormatted","pmTimeFormatted","i","length","isNaN","parseInt","date","_format","formatter","type","convertDigits","parse","text","that","ldmlFormat","parser","value","e","log","getTime","firstDayOfWeekIndex","index","getValueByClosestLocale","locale","inject"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/localization/date.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dependencyInjector from \"../core/utils/dependency_injector\";\r\nimport {\r\n    isString\r\n} from \"../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    inArray\r\n} from \"../core/utils/array\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    getFormatter as getLDMLDateFormatter\r\n} from \"./ldml/date.formatter\";\r\nimport {\r\n    getFormat as getLDMLDateFormat\r\n} from \"./ldml/date.format\";\r\nimport {\r\n    getParser as getLDMLDateParser\r\n} from \"./ldml/date.parser\";\r\nimport defaultDateNames from \"./default_date_names\";\r\nimport firstDayOfWeekData from \"./cldr-data/first_day_of_week_data\";\r\nimport localizationCore from \"./core\";\r\nimport numberLocalization from \"./number\";\r\nimport intlDateLocalization from \"./intl/date\";\r\nvar DEFAULT_DAY_OF_WEEK_INDEX = 0;\r\nvar hasIntl = \"undefined\" !== typeof Intl;\r\nvar FORMATS_TO_PATTERN_MAP = {\r\n    shortdate: \"M/d/y\",\r\n    shorttime: \"h:mm a\",\r\n    longdate: \"EEEE, MMMM d, y\",\r\n    longtime: \"h:mm:ss a\",\r\n    monthandday: \"MMMM d\",\r\n    monthandyear: \"MMMM y\",\r\n    quarterandyear: \"QQQ y\",\r\n    day: \"d\",\r\n    year: \"y\",\r\n    shortdateshorttime: \"M/d/y, h:mm a\",\r\n    longdatelongtime: \"EEEE, MMMM d, y, h:mm:ss a\",\r\n    month: \"LLLL\",\r\n    shortyear: \"yy\",\r\n    dayofweek: \"EEEE\",\r\n    quarter: \"QQQ\",\r\n    hour: \"HH\",\r\n    minute: \"mm\",\r\n    second: \"ss\",\r\n    millisecond: \"SSS\",\r\n    \"datetime-local\": \"yyyy-MM-ddTHH':'mm':'ss\"\r\n};\r\nvar possiblePartPatterns = {\r\n    year: [\"y\", \"yy\", \"yyyy\"],\r\n    day: [\"d\", \"dd\"],\r\n    month: [\"M\", \"MM\", \"MMM\", \"MMMM\"],\r\n    hours: [\"H\", \"HH\", \"h\", \"hh\", \"ah\"],\r\n    minutes: [\"m\", \"mm\"],\r\n    seconds: [\"s\", \"ss\"],\r\n    milliseconds: [\"S\", \"SS\", \"SSS\"]\r\n};\r\nvar dateLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    _getPatternByFormat: function(format) {\r\n        return FORMATS_TO_PATTERN_MAP[format.toLowerCase()]\r\n    },\r\n    _expandPattern: function(pattern) {\r\n        return this._getPatternByFormat(pattern) || pattern\r\n    },\r\n    formatUsesMonthName: function(format) {\r\n        return -1 !== this._expandPattern(format).indexOf(\"MMMM\")\r\n    },\r\n    formatUsesDayName: function(format) {\r\n        return -1 !== this._expandPattern(format).indexOf(\"EEEE\")\r\n    },\r\n    getFormatParts: function(format) {\r\n        var pattern = this._getPatternByFormat(format) || format;\r\n        var result = [];\r\n        each(pattern.split(/\\W+/), (_, formatPart) => {\r\n            each(possiblePartPatterns, (partName, possiblePatterns) => {\r\n                if (inArray(formatPart, possiblePatterns) > -1) {\r\n                    result.push(partName)\r\n                }\r\n            })\r\n        });\r\n        return result\r\n    },\r\n    getMonthNames: function(format) {\r\n        return defaultDateNames.getMonthNames(format)\r\n    },\r\n    getDayNames: function(format) {\r\n        return defaultDateNames.getDayNames(format)\r\n    },\r\n    getQuarterNames: function(format) {\r\n        return defaultDateNames.getQuarterNames(format)\r\n    },\r\n    getPeriodNames: function(format) {\r\n        return defaultDateNames.getPeriodNames(format)\r\n    },\r\n    getTimeSeparator: function() {\r\n        return \":\"\r\n    },\r\n    is24HourFormat: function(format) {\r\n        var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);\r\n        var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);\r\n        var amTimeFormatted = this.format(amTime, format);\r\n        var pmTimeFormatted = this.format(pmTime, format);\r\n        for (var i = 0; i < amTimeFormatted.length; i++) {\r\n            if (amTimeFormatted[i] !== pmTimeFormatted[i]) {\r\n                return !isNaN(parseInt(amTimeFormatted[i]))\r\n            }\r\n        }\r\n    },\r\n    format: function(date, _format) {\r\n        if (!date) {\r\n            return\r\n        }\r\n        if (!_format) {\r\n            return date\r\n        }\r\n        var formatter;\r\n        if (\"function\" === typeof _format) {\r\n            formatter = _format\r\n        } else if (_format.formatter) {\r\n            formatter = _format.formatter\r\n        } else {\r\n            _format = _format.type || _format;\r\n            if (isString(_format)) {\r\n                _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;\r\n                return numberLocalization.convertDigits(getLDMLDateFormatter(_format, this)(date))\r\n            }\r\n        }\r\n        if (!formatter) {\r\n            return\r\n        }\r\n        return formatter(date)\r\n    },\r\n    parse: function(text, format) {\r\n        var that = this;\r\n        var ldmlFormat;\r\n        var formatter;\r\n        if (!text) {\r\n            return\r\n        }\r\n        if (!format) {\r\n            return this.parse(text, \"shortdate\")\r\n        }\r\n        if (format.parser) {\r\n            return format.parser(text)\r\n        }\r\n        if (\"string\" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {\r\n            ldmlFormat = format\r\n        } else {\r\n            formatter = value => {\r\n                var text = that.format(value, format);\r\n                return numberLocalization.convertDigits(text, true)\r\n            };\r\n            try {\r\n                ldmlFormat = getLDMLDateFormat(formatter)\r\n            } catch (e) {}\r\n        }\r\n        if (ldmlFormat) {\r\n            text = numberLocalization.convertDigits(text, true);\r\n            return getLDMLDateParser(ldmlFormat, this)(text)\r\n        }\r\n        errors.log(\"W0012\");\r\n        var result = new Date(text);\r\n        if (!result || isNaN(result.getTime())) {\r\n            return\r\n        }\r\n        return result\r\n    },\r\n    firstDayOfWeekIndex: function() {\r\n        var index = localizationCore.getValueByClosestLocale(locale => firstDayOfWeekData[locale]);\r\n        return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index\r\n    }\r\n});\r\nif (hasIntl) {\r\n    dateLocalization.inject(intlDateLocalization)\r\n}\r\nexport default dateLocalization;\r\n"]},"metadata":{},"sourceType":"module"}