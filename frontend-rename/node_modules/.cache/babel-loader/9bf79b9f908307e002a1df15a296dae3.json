{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./ui.grid_core.editing_constants\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\n\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar isEditingCell = function (isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function (isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = (buttons, name) => {\n    var result = -1;\n    buttons.some((button, index) => {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n\n  return {\n    init: function () {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n\n      if (this._deferreds) {\n        this._deferreds.forEach(d => d.reject(\"cancel\"));\n      }\n\n      this._deferreds = [];\n\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n\n      this._updateEditColumn();\n\n      this._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function () {\n      var editMode = this.option(\"editing.mode\");\n\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function () {\n      return (container, options) => {\n        var $editor = $(\"<div>\").appendTo(container);\n        this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    getChanges: function () {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    getInsertRowCount: function () {\n      var changes = this.option(EDITING_CHANGES_OPTION_NAME);\n      return changes.filter(change => \"insert\" === change.type).length;\n    },\n    resetChanges: function () {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function (key) {\n      return this._internalState.filter(item => equalByValue(item.key, key))[0];\n    },\n    _addInternalData: function (params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return extend(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function (key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function () {\n      return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data);\n    },\n    getRemovedData: function () {\n      return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key));\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n\n        case \"undelete\":\n          result = false;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _isButtonDisabled: function (button, options) {\n      var disabled = button.disabled;\n      return isFunction(disabled) ? disabled.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : !!disabled;\n    },\n    _getButtonConfig: function (button, options) {\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n\n      var editingTexts = (options => {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      })(options);\n\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName],\n        onClick: e => {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(() => {\n            options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(button => this._getButtonConfig(button, options));\n    },\n    _renderEditingButtons: function ($container, buttons, options, change) {\n      buttons.forEach(button => {\n        if (this._isButtonVisible(button, options)) {\n          this._createButton($container, button, options, change);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      return (container, options, change) => {\n        var $container = $(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = this._getEditingButtons(options);\n\n          this._renderEditingButtons($container, buttons, options, change);\n\n          options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\n            $container.empty();\n\n            this._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function () {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          this._handleChangesChange(args);\n        } else if (!args.handled) {\n          this._columnsController.reinit();\n\n          this.init();\n          this.resetChanges();\n\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function (args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function (args) {\n      var dataController = this._dataController;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      this._processInsertChanges(args.value);\n\n      dataController.updateItems({\n        repaintChangesOnly: true\n      });\n    },\n    _processInsertChanges: function (changes) {\n      changes.forEach(change => {\n        if (\"insert\" === change.type) {\n          this._addInsertInfo(change);\n        }\n      });\n    },\n    publicMethods: function () {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function (isPageChanged) {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n\n      this._refreshCore(isPageChanged);\n    },\n    _refreshCore: noop,\n    isEditing: function () {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function () {\n      return false;\n    },\n    _setEditRowKey: function (value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function (rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      return -1;\n    },\n\n    _isEditRowByIndex(rowIndex) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n\n      if (isKeyEqual) {\n        return this._getVisibleEditRowIndex() === rowIndex;\n      }\n\n      return isKeyEqual;\n    },\n\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      return this._isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _isProcessedItem: function (item) {\n      return false;\n    },\n    _getInsertRowIndex: function (items, change, isProcessedItems) {\n      var result = -1;\n      var dataController = this._dataController;\n\n      var key = this._getInsertAfterOrBeforeKey(change);\n\n      if (!isDefined(key) && 0 === items.length) {\n        result = 0;\n      } else if (isDefined(key)) {\n        items.some((item, index) => {\n          var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\n\n          if (isObject(item)) {\n            if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n              if (equalByValue(item.key, key)) {\n                result = index;\n              }\n            } else if (equalByValue(dataController.keyOf(item), key)) {\n              result = index;\n            }\n          }\n\n          if (result >= 0) {\n            var nextItem = items[result + 1];\n\n            if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n              return;\n            }\n\n            if (isDefined(change.insertAfterKey)) {\n              result += 1;\n            }\n\n            return true;\n          }\n        });\n      }\n\n      return result;\n    },\n    _generateNewItem: function (key) {\n      var _this$_getInternalDat2;\n\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndex: function (items, change, isProcessedItems) {\n      var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n\n      var dataController = this._dataController;\n\n      if (loadedRowIndex < 0) {\n        var newRowPosition = this.option(\"editing.newRowPosition\");\n        var pageIndex = dataController.pageIndex();\n        var pageCount = dataController.pageCount();\n\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n          loadedRowIndex = 0;\n        } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex === pageCount - 1) {\n          loadedRowIndex = items.length;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function (items, e) {\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(change => {\n        var _this$_getInternalDat3;\n\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n\n        if (!isInsert) {\n          return;\n        }\n\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n\n        if (!isDefined(key) || !isDefined(insertInfo)) {\n          insertInfo = this._addInsertInfo(change);\n          key = insertInfo.key;\n        }\n\n        var loadedRowIndex = this._getLoadedRowIndex(items, change);\n\n        var item = this._generateNewItem(key);\n\n        if (loadedRowIndex >= 0) {\n          items.splice(loadedRowIndex, 0, item);\n        }\n      });\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function (item, change, key, columns, generateDataValues) {\n      var {\n        data: data,\n        type: type\n      } = change;\n\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function (options) {\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n        return deferred;\n      }\n    },\n    _createInsertInfo: function () {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _addInsertInfo: function (change, parentKey) {\n      var _this$_getInternalDat4;\n\n      var insertInfo;\n      var {\n        key: key\n      } = change;\n\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n\n      if (!isDefined(insertInfo)) {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        insertInfo = this._createInsertInfo();\n\n        if (!isDefined(insertAfterOrBeforeKey)) {\n          this._setInsertAfterOrBeforeKey(change, parentKey);\n        }\n      }\n\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n\n      return {\n        insertInfo: insertInfo,\n        key: key\n      };\n    },\n    _setInsertAfterOrBeforeKey: function (change, parentKey) {\n      var dataController = this._dataController;\n      var allItems = dataController.items(true);\n      var rowsView = this.getView(\"rowsView\");\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n\n      switch (newRowPosition) {\n        case FIRST_NEW_ROW_POSITION:\n        case LAST_NEW_ROW_POSITION:\n          break;\n\n        case PAGE_TOP_NEW_ROW_POSITION:\n          change.insertBeforeKey = allItems[0].key;\n          break;\n\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          change.insertAfterKey = allItems[allItems.length - 1].key;\n          break;\n\n        default:\n          var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          var row = dataController.getVisibleRows()[visibleItemIndex];\n\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n\n          var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n\n      }\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(editItem => {\n        var _this$_getInternalDat5;\n\n        var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    _getInsertAfterOrBeforeKey: function (insertChange) {\n      var _insertChange$insertA;\n\n      return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey;\n    },\n    _getPageIndexToInsertRow: function () {\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n      var dataController = this._dataController;\n      var pageIndex = dataController.pageIndex();\n      var pageCount = dataController.pageCount();\n      var lastPageIndex = pageCount - 1;\n\n      if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n        return 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n        return lastPageIndex;\n      }\n\n      return -1;\n    },\n    addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n\n      return this._addRow(parentKey);\n    },\n    _addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var deferred = new Deferred();\n      this.refresh();\n\n      if (!this._allowRowAdding()) {\n        when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        return deferred.promise();\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n\n      when(this._initNewRow(param, parentKey)).done(() => {\n        if (this._allowRowAdding()) {\n          when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var insertIndex = this._getInsertIndex();\n\n      if (insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n\n      var editRowIndex = this._getVisibleEditRowIndex();\n\n      var insertInfo = this._addInsertInfo(change, parentKey);\n\n      var key = insertInfo.key;\n\n      this._setEditRowKey(key, true);\n\n      this._addChange(change);\n\n      return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n    },\n    _navigateToNewRow: function (oldEditRowIndex, change, editRowIndex) {\n      var _editRowIndex, _change;\n\n      var d = new Deferred();\n      var dataController = this._dataController;\n      var focusController = this.getController(\"focus\");\n      editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\n      change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\n\n      if (!change) {\n        return d.reject(\"cancel\").promise();\n      }\n\n      var pageIndexToInsertRow = this._getPageIndexToInsertRow();\n\n      var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n\n      var navigateToRowByKey = key => {\n        when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\n          rowIndex = dataController.getRowIndexByKey(change.key);\n          d.resolve();\n        });\n      };\n\n      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n      if (pageIndexToInsertRow >= 0) {\n        dataController.pageIndex(pageIndexToInsertRow).done(() => {\n          navigateToRowByKey(change.key);\n        }).fail(d.reject);\n      } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n        navigateToRowByKey(insertAfterOrBeforeKey);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n        });\n        d.resolve();\n      }\n\n      d.done(() => {\n        this._showAddedRow(rowIndex);\n\n        this._afterInsertRow(change.key);\n      });\n      return d.promise();\n    },\n    _showAddedRow: function (rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _beforeFocusElementInRow: noop,\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n\n      this._delayedInputFocus($firstCell, () => {\n        this._editCellInProgress = false;\n\n        this._beforeFocusElementInRow(rowIndex);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function (index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function (name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function () {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function (name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      isDefined(name) && visibleColumns.some(column => {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function (columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function (columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function () {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function () {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function (rowIndex) {\n      var _item$oldData;\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function (rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex);\n    },\n    _editRowFromOptionChangedCore: function (rowIndices, rowIndex, oldRowIndex) {\n      this._needFocusEditor = true;\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function () {\n      return e => {\n        if (this.isEditing()) {\n          this.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function (key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _updateInsertAfterOrBeforeKeys: function (changes, index) {\n      var removeChange = changes[index];\n      changes.forEach(change => {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange);\n        }\n      });\n    },\n    _removeChange: function (index) {\n      if (index >= 0) {\n        var changes = [...this.getChanges()];\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        this._updateInsertAfterOrBeforeKeys(changes, index);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function (deferred, func) {\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(() => {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        this._lastOperation = null;\n      }).fail(() => {\n        deferred.reject();\n        this._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return when(...this._deferreds);\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var inputFocus = () => {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(this, $focusableElement);\n        }\n\n        this._beforeFocusCallback = null;\n      };\n\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n\n        clearTimeout(this._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n      if ($editCell) {\n        this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n      }\n    },\n    deleteRow: function (rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n\n      var item = this._dataController.items()[rowIndex];\n\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\n            if (confirmResult) {\n              this._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var {\n            data: data\n          } = changes[editIndex];\n\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function () {\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: [...this.getChanges()]\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(() => {\n        d.resolve(onSavingParams);\n      }).fail(arg => {\n        createFailureHandler(d);\n\n        this._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function (actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function (deferreds, results, dataChanges, changes) {\n      var store = this._dataController.store();\n\n      each(changes, (index, change) => {\n        var oldData = this._getOldData(change.key);\n\n        var {\n          data: data,\n          type: type\n        } = change;\n\n        var changeCopy = _extends({}, change);\n\n        var deferred;\n        var params;\n\n        if (this._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function (changes, editIndex) {\n      var change = changes[editIndex];\n\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n\n      return true;\n    },\n    _processRemove: function (changes, editIndex, cancel) {\n      var change = changes[editIndex];\n\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function (changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n\n      return true;\n    },\n    _processSaveEditDataResult: function (results) {\n      var hasSavedData = false;\n      var changes = [...this.getChanges()];\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          this._fireDataErrorOccurred(arg);\n\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (changes) {\n      each(changes, (_, _ref) => {\n        var {\n          data: data,\n          key: key,\n          type: type\n        } = _ref;\n\n        var internalData = this._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            this.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            this.executeAction(\"onRowInserted\", params);\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            this.executeAction(\"onRowUpdated\", params);\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function () {\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(() => {\n        if (this.isSaving()) {\n          this._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        when(this._beforeSaveEditData()).done(cancel => {\n          if (cancel) {\n            this._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          this._saving = true;\n\n          this._saveEditDataInner().always(() => {\n            this._saving = false;\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function (deferred) {\n      var {\n        cancel: cancel,\n        error: error\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function () {\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new Deferred();\n      when(this._fireOnSaving()).done(_ref2 => {\n        var {\n          cancel: cancel,\n          changes: changes\n        } = _ref2;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        this._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when(...deferreds).done(() => {\n            if (this._processSaveEditDataResult(results)) {\n              this._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(error => {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(() => {\n            this._focusEditingCell();\n          }).promise();\n        }\n\n        this._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function (changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function (dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n\n      this._beforeEndSaving(changes);\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function (result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function (dataChanges, changes, deferred) {\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(() => {\n        this._fireSaveEditDataEvents(changes);\n      }).done(() => {\n        this._resolveAfterSave(deferred);\n      }).fail(error => {\n        this._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var isEditColumnVisible = this._isEditColumnVisible();\n\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function () {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function () {\n      var headerPanel = this.getView(\"headerPanel\");\n\n      var isButtonDisabled = this._isEditButtonDisabled();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function () {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function (rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    update: function (changeType) {\n      var dataController = this._dataController;\n\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh(true);\n        }\n\n        this._pageIndex = dataController.pageIndex();\n      }\n\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(() => {\n          var index = this._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            this._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function (options, value, text) {\n      var _options$row;\n\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        this._updateRowValues(options);\n\n        this.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function (options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(params => {\n          when(this._applyChange(options, params, forceUpdateRow)).always(() => {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n\n        this._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function (options, params, forceUpdateRow) {\n      this._addChange(params, options.row);\n\n      this._updateEditButtons();\n\n      return this._applyChangeCore(options, forceUpdateRow);\n    },\n    _applyChangeCore: function (options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function (row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function (row, isCustomSetCellValue) {\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(() => {\n        var $focusedElement = $(domAdapter.getActiveElement());\n\n        var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n        this._updateEditRowCore(row, false, isCustomSetCellValue);\n\n        this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n        if (columnIndex >= 0) {\n          var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n          this._delayedInputFocus($focusedItem, () => {\n            setTimeout(() => {\n              focusedElement = domAdapter.getActiveElement();\n\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function (options, row) {\n      var changes = [...this.getChanges()];\n      var index = gridCoreUtils.getIndexByKey(options.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: options.key,\n          oldData: options.oldData\n        });\n\n        delete options.oldData;\n        changes.push(options);\n      }\n\n      var change = _extends({}, changes[index]);\n\n      if (change) {\n        if (options.data) {\n          change.data = createObjectWithChanges(change.data, options.data);\n        }\n\n        if ((!change.type || !options.data) && options.type) {\n          change.type = options.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, options.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      return change;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function (options) {\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            this._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = (value, text) => {\n              this.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n\n      return template;\n    },\n    _createButton: function ($container, button, options, change) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template && useLegacyColumnButtonTemplate) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (button.template) {\n          $button = $(\"<span>\").addClass(button.cssClass);\n        } else if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        if (this._isButtonDisabled(button, options)) {\n          $button.addClass(\"dx-state-disabled\");\n        } else {\n          eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n            button.onClick.call(button, extend({}, e, {\n              row: options.row,\n              column: options.column\n            }));\n            e.event.preventDefault();\n            e.event.stopPropagation();\n          }));\n        }\n\n        $container.append($button, \"&nbsp;\");\n\n        if (button.template) {\n          this._rowsView.renderTemplate($button, button.template, options, true, change);\n        }\n      }\n    },\n    getButtonLocalizationNames: () => ({\n      edit: \"dxDataGrid-editingEditRow\",\n      save: \"dxDataGrid-editingSaveRowChanges\",\n      delete: \"dxDataGrid-editingDeleteRow\",\n      undelete: \"dxDataGrid-editingUndeleteRow\",\n      cancel: \"dxDataGrid-editingCancelRowChanges\"\n    }),\n    prepareButtonItem: function (headerPanel, name, methodName, sortIndex) {\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: e => {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: () => {\n            setTimeout(() => {\n              this[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function ($cell, parameters) {\n      var cellModified = this.isCellModified(parameters);\n      cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function (change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    },\n    isNewRowInEditMode: function () {\n      var visibleEditRowIndex = this._getVisibleEditRowIndex();\n\n      var rows = this._dataController.items();\n\n      return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n    }\n  };\n}());\nexport var editingModule = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      },\n      useLegacyColumnButtonTemplate: false\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            var _this$_updateEditItem;\n\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items(true));\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var template = this._editingController.getColumnTemplate(options);\n\n          return template || this.callBase(options);\n        },\n        _isNativeClick: function () {\n          return (devices.real().ios || devices.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n\n          var row = this._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            if ((devices.real().ios || devices.real().android) && !isEditedCell) {\n              resetActiveElement();\n            }\n\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !isEditedCell) {\n            editingController.closeEditCell();\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          this._pointerDownTimeout = setTimeout(() => {\n            this._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function (options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function () {\n          this.callBase.apply(this, arguments);\n\n          this._editingController._focusEditorIfNeed();\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            case \"useLegacyColumnButtonTemplate\":\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js"],"names":["_extends","$","domAdapter","eventsEngine","Guid","resetActiveElement","isDefined","isObject","isFunction","isEmptyObject","each","extend","modules","name","clickEventName","pointerEvents","gridCoreUtils","createObjectWithChanges","addNamespace","confirm","messageLocalization","devices","when","Deferred","fromPromise","equalByValue","noop","iconUtils","EDITOR_CELL_CLASS","ROW_CLASS","EDIT_FORM_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","EDITING_POPUP_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","TARGET_COMPONENT_NAME","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_ROW","EDIT_MODES","ROW_BASED_MODES","FIRST_NEW_ROW_POSITION","LAST_NEW_ROW_POSITION","PAGE_BOTTOM_NEW_ROW_POSITION","PAGE_TOP_NEW_ROW_POSITION","VIEWPORT_BOTTOM_NEW_ROW_POSITION","VIEWPORT_TOP_NEW_ROW_POSITION","READONLY_CLASS","LINK_CLASS","ROW_SELECTED","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","INSERT_INDEX","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","CELL_FOCUS_DISABLED_CLASS","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_LINK_CLASS","save","cancel","edit","undelete","delete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_CHANGES_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getButtonIndex","buttons","result","some","button","index","getButtonName","init","_columnsController","getController","_dataController","_rowsView","getView","_lastOperation","_deferreds","forEach","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","component","_optionsByReference","getEditMode","editMode","option","indexOf","_getDefaultEditorTemplate","container","options","$editor","appendTo","createEditor","value","setValue","row","parentType","width","readOnly","isOnForm","id","getChanges","getInsertRowCount","changes","filter","change","type","length","resetChanges","needReset","_silentOption","_getInternalData","key","item","_addInternalData","params","internalData","push","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","map","getRemovedData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","_closeEditItem","_isDefaultButtonVisible","allowDeleting","_isButtonVisible","visible","call","_isButtonDisabled","disabled","_getButtonConfig","config","buttonName","editingTexts","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","watch","empty","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnsController","columnIndex","visibleColumns","getVisibleColumns","getFirstEditableCellInRow","rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","optionChanged","args","fullName","_handleEditRowKeyChange","_handleChangesChange","handled","reinit","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_processInsertChanges","updateItems","repaintChangesOnly","_addInsertInfo","publicMethods","refresh","isPageChanged","_pageIndex","_refreshCore","isEditRowKeyDefined","_setEditRowKey","silent","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","_isEditRowByIndex","isKeyEqual","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_isProcessedItem","_getInsertRowIndex","isProcessedItems","_getInsertAfterOrBeforeKey","isProcessedItem","nextItem","insertAfterKey","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndex","newRowPosition","pageIndex","pageCount","insertAfterOrBeforeKey","processItems","changeType","update","_this$_getInternalDat3","isInsert","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","done","resolve","fail","_createInsertInfo","_getInsertIndex","parentKey","_this$_getInternalDat4","_setInsertAfterOrBeforeKey","allItems","insertBeforeKey","isViewportBottom","visibleItemIndex","getBottomVisibleItemIndex","getTopVisibleItemIndex","getVisibleRows","insertKey","maxInsertIndex","editItem","_this$_getInternalDat5","insertChange","_insertChange$insertA","_getPageIndexToInsertRow","lastPageIndex","addRow","store","NAME","_addRow","param","oldEditRowIndex","_allowRowAdding","_navigateToNewRow","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","editRowIndex","_addChange","_editRowIndex","_change","focusController","c","pageIndexToInsertRow","navigateToRowByKey","navigateToRow","rowIndices","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","_beforeFocusElementInRow","$firstCell","_editCellInProgress","_delayedInputFocus","_isEditingStart","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","_item$oldData","_editRowFromOptionChangedCore","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","saveEditData","_getCancelButtonConfig","_removeInternalData","_updateInsertAfterOrBeforeKeys","removeChange","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","loseFocus","$cell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","_focusEditingCell","$editCell","editColumnIndex","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","arguments","_afterSaveEditData","dataSource","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","headerPanel","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","$focusedElement","getActiveElement","getCellIndex","focusedElement","get","selectionRange","getSelectionRange","$focusedItem","selectionStart","setSelectionRange","_getFormEditItemTemplate","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","useLegacyColumnButtonTemplate","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","on","append","prepareButtonItem","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","element","_getToolbarButtonClass","addWidgetPrefix","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","parameters","cellModified","isCellModified","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","isNewRowInEditMode","visibleEditRowIndex","rows","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","form","colCount","popup","controllers","extenders","_editingController","full","apply","repaintRows","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","_isCellChanged","oldRow","newRow","editingController","cell","cells","views","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_isNativeClick","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","$targetElement","_editCellByClick","target","isEditedCell","editCell","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClick","isEditForm","rowElement","hasClass","_rowDblClick","_cellPrepared","isEditableCell","toggleClass","css","_editCellPrepared","_formItemPrepared","_getCellOptions","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    resetActiveElement\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    confirm\r\n} from \"../dialog\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as iconUtils from \"../../core/utils/icon\";\r\nimport {\r\n    EDITOR_CELL_CLASS,\r\n    ROW_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    TARGET_COMPONENT_NAME,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    ROW_BASED_MODES,\r\n    FIRST_NEW_ROW_POSITION,\r\n    LAST_NEW_ROW_POSITION,\r\n    PAGE_BOTTOM_NEW_ROW_POSITION,\r\n    PAGE_TOP_NEW_ROW_POSITION,\r\n    VIEWPORT_BOTTOM_NEW_ROW_POSITION,\r\n    VIEWPORT_TOP_NEW_ROW_POSITION\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    delete: \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    delete: \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    delete: \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    delete: \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = modules.ViewController.inherit(function() {\r\n    var getButtonIndex = (buttons, name) => {\r\n        var result = -1;\r\n        buttons.some((button, index) => {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return isObject(button) ? button.name : button\r\n    }\r\n    return {\r\n        init: function() {\r\n            this._columnsController = this.getController(\"columns\");\r\n            this._dataController = this.getController(\"data\");\r\n            this._rowsView = this.getView(\"rowsView\");\r\n            this._lastOperation = null;\r\n            if (this._deferreds) {\r\n                this._deferreds.forEach(d => d.reject(\"cancel\"))\r\n            }\r\n            this._deferreds = [];\r\n            if (!this._dataChangedHandler) {\r\n                this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n                this._dataController.changed.add(this._dataChangedHandler)\r\n            }\r\n            if (!this._saveEditorHandler) {\r\n                this.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                })\r\n            }\r\n            this._updateEditColumn();\r\n            this._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getEditMode: function() {\r\n            var editMode = this.option(\"editing.mode\");\r\n            if (-1 !== EDIT_MODES.indexOf(editMode)) {\r\n                return editMode\r\n            }\r\n            return EDIT_MODE_ROW\r\n        },\r\n        _getDefaultEditorTemplate: function() {\r\n            return (container, options) => {\r\n                var $editor = $(\"<div>\").appendTo(container);\r\n                this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\r\n                    value: options.value,\r\n                    setValue: options.setValue,\r\n                    row: options.row,\r\n                    parentType: \"dataRow\",\r\n                    width: null,\r\n                    readOnly: !options.setValue,\r\n                    isOnForm: options.isOnForm,\r\n                    id: options.id\r\n                }))\r\n            }\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        getInsertRowCount: function() {\r\n            var changes = this.option(EDITING_CHANGES_OPTION_NAME);\r\n            return changes.filter(change => \"insert\" === change.type).length\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(item => equalByValue(item.key, key))[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return extend(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return createObjectWithChanges(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data)\r\n        },\r\n        getRemovedData: function() {\r\n            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key))\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: noop,\r\n        _closeEditItem: noop,\r\n        _handleDataChanged: noop,\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            switch (button.name) {\r\n                case \"delete\":\r\n                    result = this.allowDeleting(options);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = false\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _isButtonDisabled: function(button, options) {\r\n            var disabled = button.disabled;\r\n            return isFunction(disabled) ? disabled.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : !!disabled\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var config = isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = (options => {\r\n                var editingTexts = options.component.option(\"editing.texts\") || {};\r\n                return {\r\n                    save: editingTexts.saveRowChanges,\r\n                    cancel: editingTexts.cancelRowChanges,\r\n                    edit: editingTexts.editRow,\r\n                    undelete: editingTexts.undeleteRow,\r\n                    delete: editingTexts.deleteRow,\r\n                    add: editingTexts.addRowToNode\r\n                }\r\n            })(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return extend({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName],\r\n                onClick: e => {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(() => {\r\n                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                    })\r\n                }\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(button => this._getButtonConfig(button, options))\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options, change) {\r\n            buttons.forEach(button => {\r\n                if (this._isButtonVisible(button, options)) {\r\n                    this._createButton($container, button, options, change)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            return (container, options, change) => {\r\n                var $container = $(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = this._getEditingButtons(options);\r\n                    this._renderEditingButtons($container, buttons, options, change);\r\n                    options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowBasedEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return -1 !== ROW_BASED_MODES.indexOf(editMode)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var columnIndex;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            each(visibleColumns, (function(index, column) {\r\n                if (column.allowEditing) {\r\n                    columnIndex = index;\r\n                    return false\r\n                }\r\n            }));\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return gridCoreUtils.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                    this._handleEditRowKeyChange(args)\r\n                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                    this._handleChangesChange(args)\r\n                } else if (!args.handled) {\r\n                    this._columnsController.reinit();\r\n                    this.init();\r\n                    this.resetChanges();\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value)) {\r\n                if (args.value !== args.previousValue) {\r\n                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                }\r\n            } else {\r\n                this.cancelEditData()\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            this._processInsertChanges(args.value);\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true\r\n            })\r\n        },\r\n        _processInsertChanges: function(changes) {\r\n            changes.forEach(change => {\r\n                if (\"insert\" === change.type) {\r\n                    this._addInsertInfo(change)\r\n                }\r\n            })\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function(isPageChanged) {\r\n            if (!isDefined(this._pageIndex)) {\r\n                return\r\n            }\r\n            this._refreshCore(isPageChanged)\r\n        },\r\n        _refreshCore: noop,\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function() {\r\n            return false\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            return -1\r\n        },\r\n        _isEditRowByIndex(rowIndex) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\r\n            if (isKeyEqual) {\r\n                return this._getVisibleEditRowIndex() === rowIndex\r\n            }\r\n            return isKeyEqual\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this._isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: noop,\r\n        _isProcessedItem: function(item) {\r\n            return false\r\n        },\r\n        _getInsertRowIndex: function(items, change, isProcessedItems) {\r\n            var result = -1;\r\n            var dataController = this._dataController;\r\n            var key = this._getInsertAfterOrBeforeKey(change);\r\n            if (!isDefined(key) && 0 === items.length) {\r\n                result = 0\r\n            } else if (isDefined(key)) {\r\n                items.some((item, index) => {\r\n                    var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\r\n                    if (isObject(item)) {\r\n                        if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\r\n                            if (equalByValue(item.key, key)) {\r\n                                result = index\r\n                            }\r\n                        } else if (equalByValue(dataController.keyOf(item), key)) {\r\n                            result = index\r\n                        }\r\n                    }\r\n                    if (result >= 0) {\r\n                        var nextItem = items[result + 1];\r\n                        if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\r\n                            return\r\n                        }\r\n                        if (isDefined(change.insertAfterKey)) {\r\n                            result += 1\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var _this$_getInternalDat2;\r\n            var item = {\r\n                key: key\r\n            };\r\n            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndex: function(items, change, isProcessedItems) {\r\n            var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\r\n            var dataController = this._dataController;\r\n            if (loadedRowIndex < 0) {\r\n                var newRowPosition = this.option(\"editing.newRowPosition\");\r\n                var pageIndex = dataController.pageIndex();\r\n                var pageCount = dataController.pageCount();\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\r\n                    loadedRowIndex = 0\r\n                } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex === pageCount - 1) {\r\n                    loadedRowIndex = items.length\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(change => {\r\n                var _this$_getInternalDat3;\r\n                var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n                if (!isInsert) {\r\n                    return\r\n                }\r\n                var key = change.key;\r\n                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n                if (!isDefined(key) || !isDefined(insertInfo)) {\r\n                    insertInfo = this._addInsertInfo(change);\r\n                    key = insertInfo.key\r\n                }\r\n                var loadedRowIndex = this._getLoadedRowIndex(items, change);\r\n                var item = this._generateNewItem(key);\r\n                if (loadedRowIndex >= 0) {\r\n                    items.splice(loadedRowIndex, 0, item)\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n            }\r\n        },\r\n        _processDataItemCore: function(item, change, key, columns, generateDataValues) {\r\n            var {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    item.isNewRow = true;\r\n                    item.key = key;\r\n                    item.data = data;\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    item.modified = true;\r\n                    item.oldData = item.data;\r\n                    item.data = createObjectWithChanges(item.data, data);\r\n                    item.modifiedValues = generateDataValues(data, columns, true);\r\n                    break;\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    item.removed = true\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new Deferred;\r\n                when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                return deferred\r\n            }\r\n        },\r\n        _createInsertInfo: function() {\r\n            var insertInfo = {};\r\n            insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n            return insertInfo\r\n        },\r\n        _addInsertInfo: function(change, parentKey) {\r\n            var _this$_getInternalDat4;\r\n            var insertInfo;\r\n            var {\r\n                key: key\r\n            } = change;\r\n            if (!isDefined(key)) {\r\n                key = String(new Guid);\r\n                change.key = key\r\n            }\r\n            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n            if (!isDefined(insertInfo)) {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                insertInfo = this._createInsertInfo();\r\n                if (!isDefined(insertAfterOrBeforeKey)) {\r\n                    this._setInsertAfterOrBeforeKey(change, parentKey)\r\n                }\r\n            }\r\n            this._addInternalData({\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            });\r\n            return {\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            }\r\n        },\r\n        _setInsertAfterOrBeforeKey: function(change, parentKey) {\r\n            var dataController = this._dataController;\r\n            var allItems = dataController.items(true);\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var newRowPosition = this.option(\"editing.newRowPosition\");\r\n            switch (newRowPosition) {\r\n                case FIRST_NEW_ROW_POSITION:\r\n                case LAST_NEW_ROW_POSITION:\r\n                    break;\r\n                case PAGE_TOP_NEW_ROW_POSITION:\r\n                    change.insertBeforeKey = allItems[0].key;\r\n                    break;\r\n                case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                    change.insertAfterKey = allItems[allItems.length - 1].key;\r\n                    break;\r\n                default:\r\n                    var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\r\n                    var row = dataController.getVisibleRows()[visibleItemIndex];\r\n                    if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                        visibleItemIndex++\r\n                    }\r\n                    var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\r\n                    if (isDefined(insertKey)) {\r\n                        change.insertBeforeKey = insertKey\r\n                    }\r\n            }\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(editItem => {\r\n                var _this$_getInternalDat5;\r\n                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n                if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = insertInfo[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        _getInsertAfterOrBeforeKey: function(insertChange) {\r\n            var _insertChange$insertA;\r\n            return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey\r\n        },\r\n        _getPageIndexToInsertRow: function() {\r\n            var newRowPosition = this.option(\"editing.newRowPosition\");\r\n            var dataController = this._dataController;\r\n            var pageIndex = dataController.pageIndex();\r\n            var pageCount = dataController.pageCount();\r\n            var lastPageIndex = pageCount - 1;\r\n            if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\r\n                return 0\r\n            } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\r\n                return lastPageIndex\r\n            }\r\n            return -1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return (new Deferred).reject()\r\n            }\r\n            return this._addRow(parentKey)\r\n        },\r\n        _addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var deferred = new Deferred;\r\n            this.refresh();\r\n            if (!this._allowRowAdding()) {\r\n                when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\r\n                return deferred.promise()\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new Guid)\r\n            }\r\n            when(this._initNewRow(param, parentKey)).done(() => {\r\n                if (this._allowRowAdding()) {\r\n                    when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var insertIndex = this._getInsertIndex();\r\n            if (insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var change = {\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            };\r\n            var editRowIndex = this._getVisibleEditRowIndex();\r\n            var insertInfo = this._addInsertInfo(change, parentKey);\r\n            var key = insertInfo.key;\r\n            this._setEditRowKey(key, true);\r\n            this._addChange(change);\r\n            return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)\r\n        },\r\n        _navigateToNewRow: function(oldEditRowIndex, change, editRowIndex) {\r\n            var _editRowIndex, _change;\r\n            var d = new Deferred;\r\n            var dataController = this._dataController;\r\n            var focusController = this.getController(\"focus\");\r\n            editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\r\n            change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\r\n            if (!change) {\r\n                return d.reject(\"cancel\").promise()\r\n            }\r\n            var pageIndexToInsertRow = this._getPageIndexToInsertRow();\r\n            var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\r\n            var navigateToRowByKey = key => {\r\n                when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\r\n                    rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    d.resolve()\r\n                })\r\n            };\r\n            var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            if (pageIndexToInsertRow >= 0) {\r\n                dataController.pageIndex(pageIndexToInsertRow).done(() => {\r\n                    navigateToRowByKey(change.key)\r\n                }).fail(d.reject)\r\n            } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\r\n                navigateToRowByKey(insertAfterOrBeforeKey)\r\n            } else {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\r\n                });\r\n                d.resolve()\r\n            }\r\n            d.done(() => {\r\n                this._showAddedRow(rowIndex);\r\n                this._afterInsertRow(change.key)\r\n            });\r\n            return d.promise()\r\n        },\r\n        _showAddedRow: function(rowIndex) {\r\n            this._focusFirstEditableCellInRow(rowIndex)\r\n        },\r\n        _beforeFocusElementInRow: noop,\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n            this._editCellInProgress = true;\r\n            this._delayedInputFocus($firstCell, () => {\r\n                this._editCellInProgress = false;\r\n                this._beforeFocusElementInRow(rowIndex)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeUpdateItems: noop,\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!isDefined(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            isDefined(name) && visibleColumns.some(column => {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (-1 === rowIndex) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var _item$oldData;\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            this._editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex)\r\n        },\r\n        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, oldRowIndex) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndices\r\n            })\r\n        },\r\n        _focusEditorIfNeed: noop,\r\n        _showEditPopup: noop,\r\n        _repaintEditPopup: noop,\r\n        _getEditPopupHiddenHandler: function() {\r\n            return e => {\r\n                if (this.isEditing()) {\r\n                    this.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: noop,\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _updateInsertAfterOrBeforeKeys: function(changes, index) {\r\n            var removeChange = changes[index];\r\n            changes.forEach(change => {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\r\n                    change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange)\r\n                }\r\n            })\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = [...this.getChanges()];\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                this._updateInsertAfterOrBeforeKeys(changes, index);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                this._lastOperation = null\r\n            }).fail(() => {\r\n                deferred.reject();\r\n                this._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return when(...this._deferreds)\r\n        },\r\n        _processCanceledEditingCell: noop,\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else if (column !== oldColumn) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: []\r\n                })\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var inputFocus = () => {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n                }\r\n                this._beforeFocusCallback = null\r\n            };\r\n            if (devices.real().ios || devices.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (this._beforeFocusCallback) {\r\n                    this._beforeFocusCallback()\r\n                }\r\n                clearTimeout(this._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    this._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            if ($editCell) {\r\n                this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n            }\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            this._checkAndDeleteRow(rowIndex)\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var editingOptions = this.option(\"editing\");\r\n            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n            var item = this._dataController.items()[rowIndex];\r\n            var allowDeleting = !this.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (!confirmDelete || !confirmDeleteMessage) {\r\n                    this._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\r\n                        if (confirmResult) {\r\n                            this._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n        },\r\n        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n            return this.saveEditData()\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var {\r\n                        data: data\r\n                    } = changes[editIndex];\r\n                    if (isEmptyObject(data)) {\r\n                        this._removeChange(editIndex)\r\n                    } else {\r\n                        this._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: [...this.getChanges()]\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new Deferred;\r\n            when(fromPromise(onSavingParams.promise)).done(() => {\r\n                d.resolve(onSavingParams)\r\n            }).fail(arg => {\r\n                createFailureHandler(d);\r\n                this._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new Deferred;\r\n            this.executeAction(actionName, params);\r\n            when(fromPromise(params.cancel)).done((function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout((function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    }))\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            })).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var store = this._dataController.store();\r\n            each(changes, (index, change) => {\r\n                var oldData = this._getOldData(change.key);\r\n                var {\r\n                    data: data,\r\n                    type: type\r\n                } = change;\r\n                var changeCopy = _extends({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (this._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowRemoving\", params, (function() {\r\n                            return store.remove(change.key).done((function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowInserting\", params, (function() {\r\n                            return store.insert(params.data).done((function(data, key) {\r\n                                if (isDefined(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && isObject(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowUpdating\", params, (function() {\r\n                            return store.update(change.key, params.newData).done((function(data, key) {\r\n                                if (data && isObject(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            }))\r\n                        }))\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new Deferred;\r\n                    deferred.always((function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    })).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processRemoveIfError: function(changes, editIndex) {\r\n            var change = changes[editIndex];\r\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                if (editIndex >= 0) {\r\n                    changes.splice(editIndex, 1)\r\n                }\r\n            }\r\n            return true\r\n        },\r\n        _processRemove: function(changes, editIndex, cancel) {\r\n            var change = changes[editIndex];\r\n            if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n            }\r\n        },\r\n        _processRemoveCore: function(changes, editIndex) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n            return true\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var hasSavedData = false;\r\n            var changes = [...this.getChanges()];\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    this._fireDataErrorOccurred(arg);\r\n                    if (this._processRemoveIfError(changes, editIndex)) {\r\n                        break\r\n                    }\r\n                } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                    hasSavedData = !cancel\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            each(changes, (_, _ref) => {\r\n                var {\r\n                    data: data,\r\n                    key: key,\r\n                    type: type\r\n                } = _ref;\r\n                var internalData = this._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        this.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        this.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var deferred = new Deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (this.isSaving()) {\r\n                    this._resolveAfterSave(deferred);\r\n                    return\r\n                }\r\n                when(this._beforeSaveEditData()).done(cancel => {\r\n                    if (cancel) {\r\n                        this._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    this._saving = true;\r\n                    this._saveEditDataInner().always(() => {\r\n                        this._saving = false\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var {\r\n                cancel: cancel,\r\n                error: error\r\n            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n            when(this._afterSaveEditData(cancel)).done((function() {\r\n                deferred.resolve(error)\r\n            })).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function() {\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var result = new Deferred;\r\n            when(this._fireOnSaving()).done(_ref2 => {\r\n                var {\r\n                    cancel: cancel,\r\n                    changes: changes\r\n                } = _ref2;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                this._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    when(...deferreds).done(() => {\r\n                        if (this._processSaveEditDataResult(results)) {\r\n                            this._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(error => {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(() => {\r\n                        this._focusEditingCell()\r\n                    }).promise()\r\n                }\r\n                this._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _beforeEndSaving: function(changes) {\r\n            this._resetEditIndices()\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var dataSource = this._dataController.dataSource();\r\n            this._beforeEndSaving(changes);\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }\r\n            when(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(() => {\r\n                this._fireSaveEditDataEvents(changes)\r\n            }).done(() => {\r\n                this._resolveAfterSave(deferred)\r\n            }).fail(error => {\r\n                this._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var isEditColumnVisible = this._isEditColumnVisible();\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            this._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: this._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            this._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var editingOptions = this.option(\"editing\");\r\n            return editingOptions.allowDeleting\r\n        },\r\n        _isEditButtonDisabled: function() {\r\n            var hasChanges = this.hasChanges();\r\n            var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n            return !(isEditRowDefined || hasChanges)\r\n        },\r\n        _updateEditButtons: function() {\r\n            var headerPanel = this.getView(\"headerPanel\");\r\n            var isButtonDisabled = this._isEditButtonDisabled();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: noop,\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            this._afterCancelEditData(rowIndex)\r\n        },\r\n        _afterCancelEditData: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            dataController.updateItems({\r\n                repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n            })\r\n        },\r\n        _hideEditPopup: noop,\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        update: function(changeType) {\r\n            var dataController = this._dataController;\r\n            if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    this.refresh(true)\r\n                }\r\n                this._pageIndex = dataController.pageIndex()\r\n            }\r\n            this._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(() => {\r\n                    var index = this._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        this._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 !== rowKey) {\r\n                options.value = value;\r\n                var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n                setCellValueResult.done((function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                if (isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                this._updateRowValues(options);\r\n                this.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(params => {\r\n                    when(this._applyChange(options, params, forceUpdateRow)).always(() => {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                this._focusEditingCell();\r\n                this._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            this._addChange(params, options.row);\r\n            this._updateEditButtons();\r\n            return this._applyChangeCore(options, forceUpdateRow)\r\n        },\r\n        _applyChangeCore: function(options, forceUpdateRow) {\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else if (row.update) {\r\n                    row.update()\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n            })\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            if (forceUpdateRow) {\r\n                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else {\r\n                this._updateRowWithDelay(row, isCustomSetCellValue)\r\n            }\r\n        },\r\n        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (!forceUpdateRow) {\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _updateRowWithDelay: function(row, isCustomSetCellValue) {\r\n            var deferred = new Deferred;\r\n            this.addDeferred(deferred);\r\n            setTimeout(() => {\r\n                var $focusedElement = $(domAdapter.getActiveElement());\r\n                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                var focusedElement = $focusedElement.get(0);\r\n                var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n                this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n                if (columnIndex >= 0) {\r\n                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                    this._delayedInputFocus($focusedItem, () => {\r\n                        setTimeout(() => {\r\n                            focusedElement = domAdapter.getActiveElement();\r\n                            if (selectionRange.selectionStart >= 0) {\r\n                                gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            })\r\n        },\r\n        _validateEditFormAfterUpdate: noop,\r\n        _addChange: function(options, row) {\r\n            var changes = [...this.getChanges()];\r\n            var index = gridCoreUtils.getIndexByKey(options.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: options.key,\r\n                    oldData: options.oldData\r\n                });\r\n                delete options.oldData;\r\n                changes.push(options)\r\n            }\r\n            var change = _extends({}, changes[index]);\r\n            if (change) {\r\n                if (options.data) {\r\n                    change.data = createObjectWithChanges(change.data, options.data)\r\n                }\r\n                if ((!change.type || !options.data) && options.type) {\r\n                    change.type = options.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = createObjectWithChanges(row.data, options.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            return change\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = this.isRowBasedEditMode();\r\n            var isRowEditing = this.isEditRow(rowIndex);\r\n            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = this.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        this._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = (value, text) => {\r\n                            this.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n            } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options, change) {\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\r\n            var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template && useLegacyColumnButtonTemplate) {\r\n                this._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (button.template) {\r\n                    $button = $(\"<span>\").addClass(button.cssClass)\r\n                } else if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                if (this._isButtonDisabled(button, options)) {\r\n                    $button.addClass(\"dx-state-disabled\")\r\n                } else {\r\n                    eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((function(e) {\r\n                        button.onClick.call(button, extend({}, e, {\r\n                            row: options.row,\r\n                            column: options.column\r\n                        }));\r\n                        e.event.preventDefault();\r\n                        e.event.stopPropagation()\r\n                    })))\r\n                }\r\n                $container.append($button, \"&nbsp;\");\r\n                if (button.template) {\r\n                    this._rowsView.renderTemplate($button, button.template, options, true, change)\r\n                }\r\n            }\r\n        },\r\n        getButtonLocalizationNames: () => ({\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }),\r\n        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {\r\n            var editingTexts = this.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var className = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            } [name];\r\n            var hintText = titleButtonTextByClassNames[name];\r\n            var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n            return {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: e => {\r\n                        $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"))\r\n                    },\r\n                    icon: \"edit-button-\" + className,\r\n                    disabled: isButtonDisabled,\r\n                    onClick: () => {\r\n                        setTimeout(() => {\r\n                            this[methodName]()\r\n                        })\r\n                    },\r\n                    text: hintText,\r\n                    hint: hintText\r\n                },\r\n                showText: \"inMenu\",\r\n                name: name + \"Button\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: sortIndex\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var editingOptions = this.option(\"editing\") || {};\r\n            var buttonItems = [];\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: noop,\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: noop,\r\n        _beforeCancelEditData: noop,\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        },\r\n        isNewRowInEditMode: function() {\r\n            var visibleEditRowIndex = this._getVisibleEditRowIndex();\r\n            var rows = this._dataController.items();\r\n            return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false\r\n        }\r\n    }\r\n}());\r\nexport var editingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            },\r\n            useLegacyColumnButtonTemplate: false\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        var _this$_updateEditItem;\r\n                        editItem.isEditing = true;\r\n                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items(true))\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        each($cellElements, (function(index, cellElement) {\r\n                            if ($(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        }));\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var template = this._editingController.getColumnTemplate(options);\r\n                    return template || this.callBase(options)\r\n                },\r\n                _isNativeClick: function() {\r\n                    return (devices.real().ios || devices.real().android) && this.option(\"editing.allowUpdating\")\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var editingController = this._editingController;\r\n                    var $targetElement = $(e.event.target);\r\n                    var columnIndex = this._getColumnIndexByElement($targetElement);\r\n                    var row = this._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n                    var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\r\n                    var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n                    if (\"down\" === eventName) {\r\n                        if ((devices.real().ios || devices.real().android) && !isEditedCell) {\r\n                            resetActiveElement()\r\n                        }\r\n                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction && !isEditedCell) {\r\n                        editingController.closeEditCell()\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    this._pointerDownTimeout = setTimeout(() => {\r\n                        this._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    if (parameters.column && !isCommandCell) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: noop,\r\n                _formItemPrepared: noop,\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._editingController._focusEditorIfNeed()\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        case \"useLegacyColumnButtonTemplate\":\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}