{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/components/parse_utils.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../../core/utils/common\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport { isDefined } from \"../../core/utils/type\";\nvar parsers = {\n  string: function (val) {\n    return isDefined(val) ? \"\" + val : val;\n  },\n  numeric: function (val) {\n    if (!isDefined(val)) {\n      return val;\n    }\n\n    var parsedVal = Number(val);\n\n    if (isNaN(parsedVal)) {\n      parsedVal = void 0;\n    }\n\n    return parsedVal;\n  },\n  datetime: function (val) {\n    if (!isDefined(val)) {\n      return val;\n    }\n\n    var parsedVal;\n    var numVal = Number(val);\n\n    if (!isNaN(numVal)) {\n      parsedVal = new Date(numVal);\n    } else {\n      parsedVal = dateSerialization.deserializeDate(val);\n    }\n\n    if (isNaN(Number(parsedVal))) {\n      parsedVal = void 0;\n    }\n\n    return parsedVal;\n  }\n};\nexport function correctValueType(type) {\n  return \"numeric\" === type || \"datetime\" === type || \"string\" === type ? type : \"\";\n}\nexport var getParser = function (valueType) {\n  return parsers[correctValueType(valueType)] || noop;\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/components/parse_utils.js"],"names":["noop","dateSerialization","isDefined","parsers","string","val","numeric","parsedVal","Number","isNaN","datetime","numVal","Date","deserializeDate","correctValueType","type","getParser","valueType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,IADJ,QAEO,yBAFP;AAGA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,SACIC,SADJ,QAEO,uBAFP;AAGA,IAAIC,OAAO,GAAG;AACVC,EAAAA,MAAM,EAAE,UAASC,GAAT,EAAc;AAClB,WAAOH,SAAS,CAACG,GAAD,CAAT,GAAiB,KAAKA,GAAtB,GAA4BA,GAAnC;AACH,GAHS;AAIVC,EAAAA,OAAO,EAAE,UAASD,GAAT,EAAc;AACnB,QAAI,CAACH,SAAS,CAACG,GAAD,CAAd,EAAqB;AACjB,aAAOA,GAAP;AACH;;AACD,QAAIE,SAAS,GAAGC,MAAM,CAACH,GAAD,CAAtB;;AACA,QAAII,KAAK,CAACF,SAAD,CAAT,EAAsB;AAClBA,MAAAA,SAAS,GAAG,KAAK,CAAjB;AACH;;AACD,WAAOA,SAAP;AACH,GAbS;AAcVG,EAAAA,QAAQ,EAAE,UAASL,GAAT,EAAc;AACpB,QAAI,CAACH,SAAS,CAACG,GAAD,CAAd,EAAqB;AACjB,aAAOA,GAAP;AACH;;AACD,QAAIE,SAAJ;AACA,QAAII,MAAM,GAAGH,MAAM,CAACH,GAAD,CAAnB;;AACA,QAAI,CAACI,KAAK,CAACE,MAAD,CAAV,EAAoB;AAChBJ,MAAAA,SAAS,GAAG,IAAIK,IAAJ,CAASD,MAAT,CAAZ;AACH,KAFD,MAEO;AACHJ,MAAAA,SAAS,GAAGN,iBAAiB,CAACY,eAAlB,CAAkCR,GAAlC,CAAZ;AACH;;AACD,QAAII,KAAK,CAACD,MAAM,CAACD,SAAD,CAAP,CAAT,EAA8B;AAC1BA,MAAAA,SAAS,GAAG,KAAK,CAAjB;AACH;;AACD,WAAOA,SAAP;AACH;AA7BS,CAAd;AA+BA,OAAO,SAASO,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,SAAO,cAAcA,IAAd,IAAsB,eAAeA,IAArC,IAA6C,aAAaA,IAA1D,GAAiEA,IAAjE,GAAwE,EAA/E;AACH;AACD,OAAO,IAAIC,SAAS,GAAG,UAASC,SAAT,EAAoB;AACvC,SAAOd,OAAO,CAACW,gBAAgB,CAACG,SAAD,CAAjB,CAAP,IAAwCjB,IAA/C;AACH,CAFM","sourcesContent":["/**\r\n * DevExtreme (esm/viz/components/parse_utils.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar parsers = {\r\n    string: function(val) {\r\n        return isDefined(val) ? \"\" + val : val\r\n    },\r\n    numeric: function(val) {\r\n        if (!isDefined(val)) {\r\n            return val\r\n        }\r\n        var parsedVal = Number(val);\r\n        if (isNaN(parsedVal)) {\r\n            parsedVal = void 0\r\n        }\r\n        return parsedVal\r\n    },\r\n    datetime: function(val) {\r\n        if (!isDefined(val)) {\r\n            return val\r\n        }\r\n        var parsedVal;\r\n        var numVal = Number(val);\r\n        if (!isNaN(numVal)) {\r\n            parsedVal = new Date(numVal)\r\n        } else {\r\n            parsedVal = dateSerialization.deserializeDate(val)\r\n        }\r\n        if (isNaN(Number(parsedVal))) {\r\n            parsedVal = void 0\r\n        }\r\n        return parsedVal\r\n    }\r\n};\r\nexport function correctValueType(type) {\r\n    return \"numeric\" === type || \"datetime\" === type || \"string\" === type ? type : \"\"\r\n}\r\nexport var getParser = function(valueType) {\r\n    return parsers[correctValueType(valueType)] || noop\r\n};\r\n"]},"metadata":{},"sourceType":"module"}