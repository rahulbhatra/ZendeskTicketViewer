{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight, getHeight, getWidth, getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport core from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined, isEmptyObject } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { focused } from \"../widget/selectors\";\nimport { addNamespace, createEvent, isCommandKeyPressed } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { noop } from \"../../core/utils/common\";\nimport * as accessibility from \"../shared/accessibility\";\nimport browser from \"../../core/utils/browser\";\nimport { keyboard } from \"../../events/short\";\nimport devices from \"../../core/devices\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar GROUP_FOOTER_CLASS = \"group-footer\";\nvar ROW_CLASS = \"dx-row\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar FAST_EDITING_DELETE_KEY = \"delete\";\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox\";\nvar NON_FOCUSABLE_ELEMENTS_SELECTOR = \"\".concat(INTERACTIVE_ELEMENTS_SELECTOR, \", .dx-dropdowneditor-icon\");\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar FOCUS_TYPE_ROW = \"row\";\nvar FOCUS_TYPE_CELL = \"cell\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\n\nfunction isGroupRow($row) {\n  return $row && $row.hasClass(GROUP_ROW_CLASS);\n}\n\nfunction isDetailRow($row) {\n  return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS);\n}\n\nfunction isDataRow($row) {\n  return $row && !isGroupRow($row) && !isDetailRow($row);\n}\n\nfunction isNotFocusedRow($row) {\n  return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS);\n}\n\nfunction isCellElement($element) {\n  return $element.length && \"TD\" === $element[0].tagName;\n}\n\nfunction isEditorCell(that, $cell) {\n  return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS);\n}\n\nfunction isElementDefined($element) {\n  return isDefined($element) && $element.length > 0;\n}\n\nfunction isMobile() {\n  return \"desktop\" !== devices.current().deviceType;\n}\n\nfunction isCellInHeaderRow($cell) {\n  return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length;\n}\n\nfunction isFixedColumnIndexOffsetRequired(that, column) {\n  var rtlEnabled = that.option(\"rtlEnabled\");\n  var result = false;\n\n  if (rtlEnabled) {\n    result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition));\n  } else {\n    result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition);\n  }\n\n  return result;\n}\n\nfunction shouldPreventScroll(that) {\n  var keyboardController = that.getController(\"keyboardNavigation\");\n  return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false;\n}\n\nvar KeyboardNavigationController = core.ViewController.inherit({\n  init: function () {\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._editingController = this.getController(\"editing\");\n    this._headerPanel = this.getView(\"headerPanel\");\n    this._columnsController = this.getController(\"columns\");\n    this._editorFactory = this.getController(\"editorFactory\");\n\n    if (this.isKeyboardEnabled()) {\n      accessibility.subscribeVisibilityChange();\n      this._updateFocusTimeout = null;\n      this._fastEditingStarted = false;\n      this._focusedCellPosition = {};\n      this._canceledCellPosition = null;\n\n      this._editorFactory.focused.add($element => {\n        this.setupFocusedView();\n\n        if (this._isNeedScroll) {\n          if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\n            this._focusedView._scrollToElement($element);\n\n            this._isNeedScroll = false;\n          }\n        }\n      });\n\n      this._initViewHandlers();\n\n      this._initDocumentHandlers();\n\n      this.createAction(\"onKeyDown\");\n    }\n  },\n  _initViewHandlers: function () {\n    var rowsView = this.getView(\"rowsView\");\n\n    var rowsViewFocusHandler = event => {\n      var $element = $(event.target);\n      var isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\n      var isCommandButton = $element.hasClass(\"dx-link\");\n\n      if (isCommandButton && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\n        var $focusedCell = this._getFocusedCell();\n\n        $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\n\n        if (!$element.closest($focusedCell).length) {\n          event.preventDefault();\n          eventsEngine.trigger($focusedCell, \"focus\");\n        }\n      }\n    };\n\n    rowsView.renderCompleted.add(e => {\n      var $rowsView = rowsView.element();\n      var isFullUpdate = !e || \"refresh\" === e.changeType;\n      var isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\n      var needUpdateFocus = false;\n      var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n      var $focusedElement = $(\":focus\");\n      var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;\n      eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\n      eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\n\n      this._initPointerEventHandler();\n\n      this._initKeyDownHandler();\n\n      this._setRowsViewAttributes();\n\n      if (isFocusedViewCorrect && isFocusedElementCorrect) {\n        needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate;\n        needUpdateFocus && this._updateFocus(true);\n      }\n    });\n  },\n  _initDocumentHandlers: function () {\n    var document = domAdapter.getDocument();\n    this._documentClickHandler = this.createAction(e => {\n      var $target = $(e.event.target);\n      var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\n      var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n      var columnsResizerController = this.getController(\"columnsResizer\");\n      var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\n\n      if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\n        var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\n        !targetInsideFocusedView && this._resetFocusedCell(true);\n\n        this._resetFocusedView();\n      }\n    });\n    eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n  },\n  _setRowsViewAttributes: function () {\n    var $rowsView = this._getRowsViewElement();\n\n    var isGridEmpty = !this._dataController.getVisibleRows().length;\n\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  },\n  _initPointerEventHandler: function () {\n    var pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\n\n    var $rowsView = this._getRowsViewElement();\n\n    if (!isDefined(this._pointerEventAction)) {\n      this._pointerEventAction = this.createAction(this._pointerEventHandler);\n    }\n\n    eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\n    eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction);\n  },\n  _initKeyDownHandler: function () {\n    var $rowsView = this._getRowsViewElement();\n\n    keyboard.off(this._keyDownListener);\n    this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e));\n  },\n  dispose: function () {\n    this.callBase();\n\n    this._resetFocusedView();\n\n    keyboard.off(this._keyDownListener);\n    eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    clearTimeout(this._updateFocusTimeout);\n    accessibility.unsubscribeVisibilityChange();\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"keyboardNavigation\":\n      case \"useLegacyKeyboardNavigation\":\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  isRowFocusType: function () {\n    return this.focusType === FOCUS_TYPE_ROW;\n  },\n  isCellFocusType: function () {\n    return this.focusType === FOCUS_TYPE_CELL;\n  },\n  setRowFocusType: function () {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = FOCUS_TYPE_ROW;\n    }\n  },\n  setCellFocusType: function () {\n    this.focusType = FOCUS_TYPE_CELL;\n  },\n  _keyDownHandler: function (e) {\n    var isEditing = this._editingController.isEditing();\n\n    var needStopPropagation = true;\n    var originalEvent = e.originalEvent;\n\n    var isHandled = this._processOnKeyDown(e);\n\n    if (originalEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    this._updateFocusedCellPositionByTarget(originalEvent.target);\n\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n\n          break;\n\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n\n          break;\n\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n\n          break;\n\n        case \"space\":\n          this._spaceKeyHandler(e, isEditing);\n\n          break;\n\n        case \"A\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlAKeyHandler(e, isEditing);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n\n          break;\n\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n\n          break;\n\n        case \"escape\":\n          this._escapeKeyHandler(e, isEditing);\n\n          break;\n\n        case \"F\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlFKeyHandler(e);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"F2\":\n          this._f2KeyHandler();\n\n          break;\n\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            this._beginFastEditing(originalEvent, true);\n          }\n\n          break;\n\n        default:\n          if (!this._beginFastEditing(originalEvent)) {\n            this._isNeedFocus = false;\n            this._isNeedScroll = false;\n            needStopPropagation = false;\n          }\n\n      }\n\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  },\n  _processOnKeyDown: function (eventArgs) {\n    var originalEvent = eventArgs.originalEvent;\n    var args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  },\n  _closeEditCell: function () {\n    setTimeout(() => {\n      this._editingController.closeEditCell();\n    });\n  },\n  _leftRightKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $event = eventArgs.originalEvent;\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(directionCode);\n      }\n\n      var $cell = this._getNextCell(directionCode);\n\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _upDownKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this._focusedCellPosition.rowIndex;\n    var visibleRowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\n\n    var $event = eventArgs.originalEvent;\n    var isUpArrow = \"upArrow\" === eventArgs.keyName;\n\n    var dataSource = this._dataController.dataSource();\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\n\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          var rowHeight = getOuterHeight($row);\n          rowIndex = this._focusedCellPosition.rowIndex - 1;\n\n          this._scrollBy(0, -rowHeight, rowIndex, $event);\n        }\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _pageUpDownKeyHandler: function (eventArgs) {\n    var pageIndex = this._dataController.pageIndex();\n\n    var pageCount = this._dataController.pageCount();\n\n    var pagingEnabled = this.option(\"paging.enabled\");\n    var isPageUp = \"pageUp\" === eventArgs.keyName;\n    var pageStep = isPageUp ? -1 : 1;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\n      this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _spaceKeyHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\n\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\n\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n\n      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else {\n      this._beginFastEditing(eventArgs.originalEvent);\n    }\n  },\n  _ctrlAKeyHandler: function (eventArgs, isEditing) {\n    if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _tabKeyHandler: function (eventArgs, isEditing) {\n    var editingOptions = this.option(\"editing\");\n    var direction = eventArgs.shift ? \"previous\" : \"next\";\n    var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\n\n    var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var focusedViewElement = this._focusedView && this._focusedView.element();\n\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n\n    $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._resetFocusedCell();\n      }\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(direction);\n      }\n\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else if (this._targetCellTabHandler(eventArgs, direction)) {\n        isOriginalHandlerRequired = true;\n      }\n    }\n\n    if (isOriginalHandlerRequired) {\n      this._editorFactory.loseFocus();\n\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell(true);\n\n        this._resetFocusedView();\n\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _getMaxHorizontalOffset: function () {\n    var scrollable = this.component.getScrollable();\n    var rowsView = this.getView(\"rowsView\");\n    var offset = scrollable ? scrollable.scrollWidth() - getWidth(rowsView.element()) : 0;\n    return offset;\n  },\n  _isColumnRendered: function (columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var renderedVisibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = allVisibleColumns[columnIndex];\n    var result = false;\n\n    if (column) {\n      result = renderedVisibleColumns.indexOf(column) >= 0;\n    }\n\n    return result;\n  },\n  _isFixedColumn: function (columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var column = allVisibleColumns[columnIndex];\n    return !!column && !!column.fixed;\n  },\n  _isColumnVirtual: function (columnIndex) {\n    var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\n\n    var visibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = visibleColumns[localColumnIndex];\n    return !!column && \"virtual\" === column.command;\n  },\n  _processVirtualHorizontalPosition: function (direction) {\n    var scrollable = this.component.getScrollable();\n    var columnIndex = this.getColumnIndex();\n    var nextColumnIndex;\n    var horizontalScrollPosition = 0;\n    var needToScroll = false;\n\n    switch (direction) {\n      case \"next\":\n      case \"nextInRow\":\n        var columnsCount = this._getVisibleColumnCount();\n\n        nextColumnIndex = columnIndex + 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\n\n        if (\"next\" === direction) {\n          needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n        break;\n\n      case \"previous\":\n      case \"previousInRow\":\n        nextColumnIndex = columnIndex - 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\n\n        if (\"previous\" === direction) {\n          var columnIndexOffset = this._columnsController.getColumnIndexOffset();\n\n          var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\n          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n    }\n\n    if (needToScroll) {\n      scrollable.scrollTo({\n        left: horizontalScrollPosition\n      });\n    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\n      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\n      0 !== horizontalScrollPosition && scrollable.scrollBy({\n        left: horizontalScrollPosition,\n        top: 0\n      });\n    }\n  },\n  _getHorizontalScrollPositionOffset: function (direction) {\n    var positionOffset = 0;\n\n    var $currentCell = this._getCell(this._focusedCellPosition);\n\n    var currentCellWidth = $currentCell && getOuterWidth($currentCell);\n\n    if (currentCellWidth > 0) {\n      var rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\n      positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;\n    }\n\n    return positionOffset;\n  },\n  _editingCellTabHandler: function (eventArgs, direction) {\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var isEditingAllowed;\n    var $event = eventArgs.originalEvent;\n\n    var elementType = this._getElementType(eventTarget);\n\n    if ($cell.is(COMMAND_CELL_SELECTOR)) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n\n    this._updateFocusedCellPosition($cell);\n\n    var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n    $cell = nextCellInfo.$cell;\n\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n\n    var columnsController = this._columnsController;\n    var cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\n    var columnIndex = cellIndex + columnsController.getColumnIndexOffset();\n    var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n    var $row = $cell.parent();\n\n    var rowIndex = this._getRowIndex($row);\n\n    var row = this._dataController.items()[rowIndex];\n\n    var editingController = this._editingController;\n\n    if (column && column.allowEditing) {\n      var _isDataRow = !row || \"data\" === row.rowType;\n\n      isEditingAllowed = editingController.allowUpdating({\n        row: row\n      }) ? _isDataRow : row && row.isNewRow;\n    }\n\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editFocusedCell();\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return true;\n  },\n  _targetCellTabHandler: function (eventArgs, direction) {\n    var $event = eventArgs.originalEvent;\n    var eventTarget = $event.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\n\n    var isOriginalHandlerRequired = false;\n    var elementType;\n\n    if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\n        this._updateFocusedCellPosition($cell);\n      }\n\n      elementType = this._getElementType(eventTarget);\n\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n\n        if (\"row\" === elementType && isDataRow($(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow($(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n\n      var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n      $cell = nextCellInfo.$cell;\n\n      if (!$cell) {\n        return false;\n      }\n\n      $cell = this._checkNewLineTransition($event, $cell);\n\n      if (!$cell) {\n        return false;\n      }\n\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return isOriginalHandlerRequired;\n  },\n  _getNextCellByTabKey: function ($event, direction, elementType) {\n    var $cell = this._getNextCell(direction, elementType);\n\n    var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n\n    if (!args || args.cancel) {\n      return {};\n    }\n\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  },\n  _checkNewLineTransition: function ($event, $cell) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $row = $cell.parent();\n\n    if (rowIndex !== this._getRowIndex($row)) {\n      var cellPosition = this._getCellPosition($cell);\n\n      var args = this._fireFocusedRowChanging($event, $row);\n\n      if (args.cancel) {\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n\n    return $cell;\n  },\n  _enterKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getFocusedCell();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var item = this._dataController.items()[rowIndex];\n\n      if (void 0 !== key && item && item.data && !item.data.isContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  },\n  _processEnterKeyForDataCell: function (eventArgs, isEditing) {\n    var direction = this._getEnterKeyDirection(eventArgs);\n\n    var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent);\n\n      if (\"next\" === direction || \"previous\" === direction) {\n        this._targetCellTabHandler(eventArgs, direction);\n      } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\n        this._navigateNextCell(eventArgs.originalEvent, direction);\n      }\n    } else if (allowEditingOnEnterKey) {\n      this._startEditing(eventArgs);\n    }\n  },\n  _getEnterKeyDirection: function (eventArgs) {\n    var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    var isShift = eventArgs.shift;\n\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n  },\n  _handleEnterKeyEditingCell: function (event) {\n    var target = event.target;\n\n    var $cell = this._getCellElementFromTarget(target);\n\n    var isRowEditMode = this._isRowEditMode();\n\n    this._updateFocusedCellPosition($cell);\n\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n    } else {\n      eventsEngine.trigger($(target), \"change\");\n\n      this._closeEditCell();\n\n      event.preventDefault();\n    }\n  },\n  _escapeKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n\n        this._editingController.cancelEditData();\n\n        if (0 === this._dataController.items().length) {\n          this._resetFocusedCell();\n\n          this._editorFactory.loseFocus();\n        }\n      }\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _ctrlFKeyHandler: function (eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      var searchTextEditor = this._headerPanel.getSearchTextEditor();\n\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _f2KeyHandler: function () {\n    var isEditing = this._editingController.isEditing();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  },\n  _navigateNextCell: function ($event, keyCode) {\n    var $cell = this._getNextCell(keyCode);\n\n    var directionCode = this._getDirectionCodeByKey(keyCode);\n\n    var isCellValid = $cell && this._isCellValid($cell);\n\n    var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\n    return result;\n  },\n  _arrowKeysHandlerFocusCell: function ($event, $nextCell, direction) {\n    var isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\n\n    var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\n\n    $nextCell = args.$newCellElement;\n\n    if (!args.cancel && this._isCellValid($nextCell)) {\n      this._focus($nextCell, !args.isHighlighted);\n\n      return true;\n    }\n\n    return false;\n  },\n  _beginFastEditing: function (originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n\n    if (isDeleting) {\n      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);\n    } else {\n      var key = originalEvent.key;\n      var keyCode = originalEvent.keyCode || originalEvent.which;\n      var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n\n      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n\n    return true;\n  },\n  _pointerEventHandler: function (e) {\n    var event = e.event || e;\n    var $target = $(event.currentTarget);\n    var rowsView = this.getView(\"rowsView\");\n    var focusedViewElement = rowsView && rowsView.element();\n    var $parent = $target.parent();\n    var isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n    var isRevertButton = !!$(event.target).closest(\".\".concat(REVERT_BUTTON_CLASS)).length;\n    var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\n\n    if (!this._isEventInCurrentGrid(event)) {\n      return;\n    }\n\n    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\n      $target = this._isInsideEditForm($target) ? $(event.target) : $target;\n\n      this._focusView();\n\n      $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n\n      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\n        this._updateFocusedCellPosition($target);\n\n        this._applyTabIndexToElement(this._focusedView.element());\n\n        this._focusedView.focus();\n      } else if (!this._isMasterDetailCell($target)) {\n        this._clickTargetCellHandler(event, $target);\n      } else {\n        this._updateFocusedCellPosition($target);\n      }\n    } else if ($target.is(\"td\")) {\n      this._resetFocusedCell();\n    }\n  },\n  _clickTargetCellHandler: function (event, $cell) {\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    var isCellEditMode = this._isCellEditMode();\n\n    this.setCellFocusType();\n\n    var args = this._fireFocusChangingEvents(event, $cell, true);\n\n    $cell = args.$newCellElement;\n\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this.getController(\"focus\")._resetFocusedRow();\n\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n\n      this._updateFocusedCellPosition($cell);\n\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        var $target = event && $(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + \", td\");\n        var skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\n        var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\n        var isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\n\n        this._focus($cell, isDisabled, skipFocusEvent);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      $cell = this._getFocusedCell();\n\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  },\n  _allowRowUpdating: function () {\n    var rowIndex = this.getVisibleRowIndex();\n\n    var row = this._dataController.items()[rowIndex];\n\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  },\n  focus: function (element) {\n    var activeElementSelector;\n    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var isHighlighted = isCellElement($(element));\n\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n\n    element && this._focusElement($(element), isHighlighted);\n  },\n  getFocusedView: function () {\n    return this._focusedView;\n  },\n  setupFocusedView: function () {\n    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\n      this._focusView();\n    }\n  },\n  _focusElement: function ($element, isHighlighted) {\n    var rowsViewElement = $(this._getRowsViewElement());\n    var $focusedView = $element.closest(rowsViewElement);\n    var isRowFocusType = this.isRowFocusType();\n    var args = {};\n\n    if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n\n    this._focusView();\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    if (isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\n      $element = args.$newCellElement;\n\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n\n    if (!args.cancel) {\n      this._focus($element, !args.isHighlighted);\n\n      this._focusInteractiveElement($element);\n    }\n  },\n  _getFocusedViewByElement: function ($element) {\n    var view = this.getFocusedView();\n    var $view = view && $(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  },\n  _focusView: function () {\n    this._focusedView = this.getView(\"rowsView\");\n  },\n  _resetFocusedView: function () {\n    this.setRowFocusType();\n    this._focusedView = null;\n  },\n  _focusInteractiveElement: function ($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n\n    var $focusedElement = this._getInteractiveElement($cell, isLast);\n\n    gridCoreUtils.focusAndSelectElement(this, $focusedElement);\n  },\n  _focus: function ($cell, disableFocus, skipFocusEvent) {\n    var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\n\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n\n    var focusedView = this._focusedView;\n    var $focusViewElement = focusedView && focusedView.element();\n    var $focusElement;\n    this._isHiddenFocus = disableFocus;\n    var isRowFocus = isGroupRow($row) || this.isRowFocusType();\n\n    if (isRowFocus) {\n      $focusElement = $row;\n\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else if (isCellElement($cell)) {\n      $focusElement = $cell;\n\n      this._updateFocusedCellPosition($cell);\n    }\n\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      }\n\n      eventsEngine.one($focusElement, \"blur\", e => {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      });\n\n      if (!skipFocusEvent) {\n        this._applyTabIndexToElement($focusElement);\n\n        eventsEngine.trigger($focusElement, \"focus\");\n      }\n\n      if (disableFocus) {\n        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n        if (isRowFocus) {\n          $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      } else {\n        this._editorFactory.focus($focusElement);\n      }\n    }\n  },\n  _updateFocus: function (isRenderView) {\n    this._updateFocusTimeout = setTimeout(() => {\n      var editingController = this._editingController;\n      var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;\n      var isBatchEditMode = editingController.getEditMode() === EDIT_MODE_BATCH;\n\n      if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {\n        editingController._focusEditingCell();\n\n        return;\n      }\n\n      var $cell = this._getFocusedCell();\n\n      var isEditing = editingController.isEditing();\n\n      if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\n        if (this._hasSkipRow($cell.parent())) {\n          var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = this._getNextCell(direction);\n        }\n\n        if (isElementDefined($cell)) {\n          if (isRenderView && !isEditing && this._checkCellOverlapped($cell)) {\n            return;\n          }\n\n          if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\n            var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n            var $focusedElementInsideCell = $cell.find(\":focus\");\n            var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\n\n            if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\n              if (isCommandCell && isFocusedElementDefined) {\n                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\n                return;\n              }\n\n              !isFocusedElementDefined && this._focus($cell);\n            } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\n              this._focus($cell, this._isHiddenFocus);\n            }\n\n            if (isEditing) {\n              this._focusInteractiveElement.bind(this)($cell);\n            }\n          } else {\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  },\n  _checkCellOverlapped: function ($cell) {\n    var cellOffset = $cell.offset();\n    var hasScrollable = this.component.getScrollable && this.component.getScrollable();\n    var isOverlapped = false;\n\n    if (hasScrollable) {\n      if (cellOffset.left < 0) {\n        isOverlapped = getWidth($cell) + cellOffset.left <= 0;\n      } else if (cellOffset.top < 0) {\n        isOverlapped = getHeight($cell) + cellOffset.top <= 0;\n      }\n    }\n\n    return isOverlapped;\n  },\n  _getFocusedCell: function () {\n    return $(this._getCell(this._focusedCellPosition));\n  },\n  _updateFocusedCellPositionByTarget: function (target) {\n    var _this$_focusedCellPos;\n\n    var elementType = this._getElementType(target);\n\n    if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\n      var $row = $(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  },\n  _updateFocusedCellPosition: function ($cell, direction) {\n    var position = this._getCellPosition($cell, direction);\n\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n\n    return position;\n  },\n  _getFocusedColumnIndexOffset: function (columnIndex) {\n    var offset = 0;\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    if (column && column.fixed) {\n      offset = this._getFixedColumnIndexOffset(column);\n    } else if (columnIndex >= 0) {\n      offset = this._columnsController.getColumnIndexOffset();\n    }\n\n    return offset;\n  },\n  _getFixedColumnIndexOffset: function (column) {\n    var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\n    return offset;\n  },\n  _getCellPosition: function ($cell, direction) {\n    var columnIndex;\n    var $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    var rowsView = this.getView(\"rowsView\");\n\n    if (isElementDefined($row)) {\n      var rowIndex = this._getRowIndex($row);\n\n      columnIndex = rowsView.getCellIndex($cell, rowIndex);\n      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\n\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = this._applyColumnIndexBoundaries(columnIndex);\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  },\n  _focusCell: function ($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n\n      return true;\n    }\n  },\n  _focusEditFormCell: function ($cell) {\n    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\n      this._editorFactory.focus($cell, true);\n    }\n  },\n  _resetFocusedCell: function (preventScroll) {\n    var _this$_focusedView;\n\n    var $cell = this._getFocusedCell();\n\n    isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\n    this._isNeedFocus = false;\n    this._isNeedScroll = false;\n    this._focusedCellPosition = {};\n    clearTimeout(this._updateFocusTimeout);\n    null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState(preventScroll);\n  },\n  restoreFocusableElement: function (rowIndex, $event) {\n    var args;\n    var $rowElement;\n    var isUpArrow = isDefined(rowIndex);\n    var rowsView = this.getView(\"rowsView\");\n    var $rowsViewElement = rowsView.element();\n    var columnIndex = this._focusedCellPosition.columnIndex;\n\n    var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n    rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n\n    if (!isUpArrow) {\n      this._editorFactory.loseFocus();\n\n      this._applyTabIndexToElement($rowsViewElement);\n\n      eventsEngine.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\n      args = this._fireFocusedRowChanging($event, $rowElement);\n\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n\n    if (!isUpArrow || !args.cancel) {\n      this.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n\n    isUpArrow && this._updateFocus();\n  },\n  _getNewPositionByCode: function (cellPosition, elementType, code) {\n    var columnIndex = cellPosition.columnIndex;\n    var rowIndex = cellPosition.rowIndex;\n    var visibleColumnsCount;\n\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n\n        if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex++;\n        } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\n          columnIndex = 0;\n          rowIndex++;\n        }\n\n        break;\n\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex--;\n        } else if (rowIndex > 0 && \"previous\" === code) {\n          rowIndex--;\n          visibleColumnsCount = this._getVisibleColumnCount();\n          columnIndex = visibleColumnsCount - 1;\n        }\n\n        break;\n\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  },\n  setFocusedCellPosition: function (rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  },\n  setFocusedRowIndex: function (rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.rowIndex = rowIndex;\n  },\n  setFocusedColumnIndex: function (columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.columnIndex = columnIndex;\n  },\n  getRowIndex: function () {\n    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;\n  },\n  getColumnIndex: function () {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;\n  },\n  getVisibleRowIndex: function () {\n    var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\n\n    if (!isDefined(rowIndex) || rowIndex < 0) {\n      return -1;\n    }\n\n    return rowIndex - this._dataController.getRowIndexOffset();\n  },\n  getVisibleColumnIndex: function () {\n    var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\n\n    if (!isDefined(columnIndex)) {\n      return -1;\n    }\n\n    return columnIndex - this._columnsController.getColumnIndexOffset();\n  },\n  _applyColumnIndexBoundaries: function (columnIndex) {\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else if (columnIndex >= visibleColumnsCount) {\n      columnIndex = visibleColumnsCount - 1;\n    }\n\n    return columnIndex;\n  },\n  _isCellByPositionValid: function (cellPosition) {\n    var $cell = $(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  },\n  _isLastRow: function (rowIndex) {\n    var dataController = this._dataController;\n\n    if (this._isVirtualRowRender()) {\n      return rowIndex >= dataController.getMaxRowIndex();\n    }\n\n    return rowIndex === dataController.items().length - 1;\n  },\n  _isFirstValidCell: function (cellPosition) {\n    var isFirstValidCell = false;\n\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);\n    }\n\n    return isFirstValidCell;\n  },\n  _hasValidCellBeforePosition: function (cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    while (columnIndex > 0 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _hasValidCellAfterPosition: function (cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    var visibleColumnCount = this._getVisibleColumnCount();\n\n    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: ++columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _isLastValidCell: function (cellPosition) {\n    var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    var rowIndex = cellPosition.rowIndex;\n    var checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n\n    var visibleRows = this._dataController.getVisibleRows();\n\n    var row = visibleRows && visibleRows[rowIndex];\n\n    var isLastRow = this._isLastRow(rowIndex);\n\n    if (!isLastRow) {\n      return false;\n    }\n\n    if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\n      return true;\n    }\n\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n\n    return this._isLastValidCell(checkingPosition);\n  },\n  _isCellValid: function ($cell, isClick) {\n    if (isElementDefined($cell)) {\n      var rowsView = this.getView(\"rowsView\");\n      var $row = $cell.parent();\n      var columnsController = this._columnsController;\n      var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\n      var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n\n      var visibleColumnCount = this._getVisibleColumnCount();\n\n      var editingController = this._editingController;\n      var isMasterDetailRow = isDetailRow($row);\n      var isShowWhenGrouped = column && column.showWhenGrouped;\n      var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\n\n      if (this._isMasterDetailCell($cell)) {\n        return true;\n      }\n\n      if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1)) {\n        var rowItems = this._dataController.items();\n\n        var visibleRowIndex = rowsView.getRowIndex($row);\n        var row = rowItems[visibleRowIndex];\n        var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        var isEditing = isRowEditingInCurrentRow || isCellEditing;\n\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n\n          if (isCellEditing) {\n            return false;\n          }\n\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n\n          return !isEditing;\n        }\n\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  },\n  getFirstValidCellInRow: function ($row, columnIndex) {\n    var $cells = $row.find(\"> td\");\n    var $cell;\n    var $result;\n    columnIndex = columnIndex || 0;\n\n    for (var i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n\n      if (this._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n\n    return $result;\n  },\n  _getNextCell: function (keyCode, elementType, cellPosition) {\n    var focusedCellPosition = cellPosition || this._focusedCellPosition;\n    var isRowFocusType = this.isRowFocusType();\n    var includeCommandCells = isRowFocusType || inArray(keyCode, [\"next\", \"previous\"]) > -1;\n    var $cell;\n    var $row;\n\n    if (this._focusedView && focusedCellPosition) {\n      var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n\n      $cell = $(this._getCell(newFocusedCellPosition));\n      var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\n\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n\n      $row = isElementDefined($cell) && $cell.parent();\n\n      if (this._hasSkipRow($row)) {\n        var rowIndex = this._getRowIndex($row);\n\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n\n      return isElementDefined($cell) ? $cell : null;\n    }\n\n    return null;\n  },\n  _startEditing: function (eventArgs, fastEditingKey) {\n    var focusedCellPosition = this._focusedCellPosition;\n    var visibleRowIndex = this.getVisibleRowIndex();\n    var visibleColumnIndex = this.getVisibleColumnIndex();\n\n    var row = this._dataController.items()[visibleRowIndex];\n\n    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(visibleRowIndex);\n      } else if (focusedCellPosition) {\n        this._startEditCell(eventArgs, fastEditingKey);\n      }\n    }\n  },\n  _isAllowEditing: function (row, column) {\n    return this._editingController.allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  },\n  _editFocusedCell: function () {\n    var rowIndex = this.getVisibleRowIndex();\n    var colIndex = this.getVisibleColumnIndex();\n    return this._editingController.editCell(rowIndex, colIndex);\n  },\n  _startEditCell: function (eventArgs, fastEditingKey) {\n    this._fastEditingStarted = isDefined(fastEditingKey);\n\n    var editResult = this._editFocusedCell();\n\n    if (this._isFastEditingStarted()) {\n      if (true === editResult) {\n        this._editingCellHandler(eventArgs, fastEditingKey);\n      } else if (editResult && editResult.done) {\n        var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\n        editResult.done(() => this._editingCellHandler(eventArgs, editorValue));\n      }\n    }\n  },\n  _editingCellHandler: function (eventArgs, editorValue) {\n    var _$input$get$select, _$input$get;\n\n    var $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\n\n    var keyDownEvent = createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $input.get(0)\n    });\n    var keyPressEvent = createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $input.get(0)\n    });\n    var inputEvent = createEvent(eventArgs, {\n      type: \"input\",\n      target: $input.get(0)\n    });\n    null === (_$input$get$select = (_$input$get = $input.get(0)).select) || void 0 === _$input$get$select ? void 0 : _$input$get$select.call(_$input$get);\n    eventsEngine.trigger($input, keyDownEvent);\n\n    if (!keyDownEvent.isDefaultPrevented()) {\n      eventsEngine.trigger($input, keyPressEvent);\n\n      if (!keyPressEvent.isDefaultPrevented()) {\n        var timeout = browser.mozilla ? 25 : 0;\n        setTimeout(() => {\n          $input.val(editorValue);\n          var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\n          eventsEngine.off($widgetContainer, \"focusout\");\n          eventsEngine.one($widgetContainer, \"focusout\", function () {\n            eventsEngine.trigger($input, \"change\");\n          });\n          eventsEngine.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  },\n  _fireFocusChangingEvents: function ($event, $cell, fireRowEvent, isHighlighted) {\n    var args = {};\n    var cellPosition = this._getCellPosition($cell) || {};\n\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = $(this._getCell(cellPosition));\n      }\n    }\n\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n\n    args.$newCellElement = $(this._getCell(cellPosition));\n\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanging: function ($event, $cellElement, isHighlighted) {\n    var prevCellIndex = this.option(\"focusedColumnIndex\");\n    var prevRowIndex = this.option(\"focusedRowIndex\");\n\n    var cellPosition = this._getCellPosition($cellElement);\n\n    var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    var args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevCellIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: this._dataController.getVisibleRows(),\n      columns: this._columnsController.getVisibleColumns(),\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    this.executeAction(\"onFocusedCellChanging\", args);\n\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = $(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanged: function ($cellElement, prevCellIndex, prevRowIndex) {\n    var dataController = this._dataController;\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cellElement);\n\n    var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\n\n    var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\n\n    var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\n\n    var row = dataController.items()[localRowIndex];\n\n    if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\n      this.executeAction(\"onFocusedCellChanged\", {\n        cellElement: $cellElement,\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        row: row,\n        column: this._columnsController.getVisibleColumns()[columnIndex]\n      });\n    }\n  },\n  _fireFocusedRowChanging: function (eventArgs, $newFocusedRow) {\n    var newRowIndex = this._getRowIndex($newFocusedRow);\n\n    var dataController = this._dataController;\n    var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    var loadingOperationTypes = dataController.loadingOperationTypes();\n    var args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: dataController.getVisibleRows(),\n      cancel: false\n    };\n\n    if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\n      args.cancel = true;\n      return args;\n    }\n\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n\n        args.rowIndexChanged = true;\n      }\n    }\n\n    return args;\n  },\n  _fireFocusedRowChanged: function ($rowElement) {\n    var row;\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var focusController = this.getController(\"focus\");\n    var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\n\n    if (this.option(\"focusedRowEnabled\")) {\n      if (focusedRowIndex >= 0) {\n        var dataController = this._dataController;\n        row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()];\n      }\n\n      this.executeAction(\"onFocusedRowChanged\", {\n        rowElement: $rowElement,\n        rowIndex: focusedRowIndex,\n        row: row\n      });\n    }\n  },\n  _isEventInCurrentGrid: function (event) {\n    return gridCoreUtils.isElementInCurrentGrid(this, $(event.target));\n  },\n  _isRowEditMode: function () {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;\n  },\n  _isCellEditMode: function () {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;\n  },\n  _isFastEditingAllowed: function () {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  },\n  _getInteractiveElement: function ($cell, isLast) {\n    var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  },\n  _applyTabIndexToElement: function ($element) {\n    var tabIndex = this.option(\"tabIndex\") || 0;\n    $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0);\n  },\n  _getCell: function (cellPosition) {\n    if (this._focusedView && cellPosition) {\n      var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n      var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\n\n      var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\n      var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\n      var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\n      return this._focusedView.getCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    }\n  },\n  _getRowIndex: function ($row) {\n    var rowsView = this.getView(\"rowsView\");\n    var rowIndex = rowsView.getRowIndex($row);\n\n    if (rowIndex >= 0) {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n\n    return rowIndex;\n  },\n  _hasSkipRow: function ($row) {\n    var row = $row && $row.get(0);\n    return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)));\n  },\n  _allowEditingOnEnterKey: function () {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  },\n  _isLegacyNavigation: function () {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  },\n  _getDirectionCodeByKey: function (key) {\n    var directionCode;\n\n    switch (key) {\n      case \"upArrow\":\n        directionCode = \"prevRow\";\n        break;\n\n      case \"downArrow\":\n        directionCode = \"nextRow\";\n        break;\n\n      case \"leftArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\n        break;\n\n      case \"rightArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\";\n    }\n\n    return directionCode;\n  },\n  _isVirtualScrolling: function () {\n    var scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  },\n  _isVirtualRowRender: function () {\n    return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this);\n  },\n  _isVirtualColumnRender: function () {\n    return \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  },\n  _scrollBy: function (left, top, rowIndex, $event) {\n    var that = this;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (that._focusedCellPosition) {\n      scrollable.on(\"scroll\", function scrollHandler() {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      });\n    }\n\n    return scrollable.scrollBy({\n      left: left,\n      top: top\n    });\n  },\n  _isInsideEditForm: function (element) {\n    return $(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0;\n  },\n  _isMasterDetailCell: function (element) {\n    var $masterDetailCell = $(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\n    var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\n    return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element());\n  },\n  _processNextCellInMasterDetail: function ($nextCell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  },\n  _handleTabKeyOnMasterDetailCell: function (target, direction) {\n    if (this._isMasterDetailCell(target)) {\n      this._updateFocusedCellPosition($(target), direction);\n\n      var $nextCell = this._getNextCell(direction, \"row\");\n\n      this._processNextCellInMasterDetail($nextCell);\n\n      return true;\n    }\n\n    return false;\n  },\n  _getElementType: function (target) {\n    return $(target).is(\"tr\") ? \"row\" : \"cell\";\n  },\n  _isFastEditingStarted: function () {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  },\n  _getVisibleColumnCount: function () {\n    return this._columnsController.getVisibleColumns(null, true).length;\n  },\n  _isCellInRow: function (cellPosition, includeCommandCells) {\n    var columnIndex = cellPosition.columnIndex;\n\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  },\n  _getCellElementFromTarget: function (target) {\n    var elementType = this._getElementType(target);\n\n    var $targetElement = $(target);\n    var $cell;\n\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"));\n    } else {\n      $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first();\n    }\n\n    return $cell;\n  },\n  _getRowsViewElement: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return rowsView && rowsView.element();\n  },\n  isKeyboardEnabled: function () {\n    return this.option(\"keyboardNavigation.enabled\");\n  },\n  _processCanceledEditCellPosition: function (rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n  }\n});\nexport var keyboardNavigationModule = {\n  defaultOptions: function () {\n    return {\n      useLegacyKeyboardNavigation: false,\n      keyboardNavigation: {\n        enabled: true,\n        enterKeyAction: \"startEdit\",\n        enterKeyDirection: \"none\",\n        editOnKeyPress: false\n      }\n    };\n  },\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _rowClick: function (e) {\n          var editRowIndex = this.getController(\"editing\").getEditRowIndex();\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (editRowIndex === e.rowIndex) {\n            keyboardController.setCellFocusType();\n          }\n\n          var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\n\n          if (needTriggerPointerEventHandler) {\n            this._triggerPointerDownEventHandler(e);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _triggerPointerDownEventHandler: function (e) {\n          var originalEvent = e.event.originalEvent;\n\n          if (originalEvent) {\n            var keyboardController = this.getController(\"keyboardNavigation\");\n            var $cell = $(originalEvent.target);\n            var columnIndex = this.getCellIndex($cell);\n            var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\n            var row = this.getController(\"data\").items()[e.rowIndex];\n\n            if (keyboardController._isAllowEditing(row, column)) {\n              var eventArgs = createEvent(originalEvent, {\n                currentTarget: originalEvent.target\n              });\n\n              keyboardController._pointerEventHandler(eventArgs);\n            }\n          }\n        },\n        renderFocusState: function (preventScroll) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $rowsViewElement = this.element();\n\n          if ($rowsViewElement && !focused($rowsViewElement)) {\n            $rowsViewElement.attr(\"tabindex\", null);\n          }\n\n          var rowIndex = keyboardController.getVisibleRowIndex();\n\n          if (!isDefined(rowIndex) || rowIndex < 0) {\n            rowIndex = 0;\n          }\n\n          var cellElements = this.getCellElements(rowIndex);\n\n          if (keyboardController.isKeyboardEnabled() && cellElements.length) {\n            this.updateFocusElementTabIndex(cellElements, preventScroll);\n          }\n        },\n        updateFocusElementTabIndex: function (cellElements) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $row = cellElements.eq(0).parent();\n\n          if (isGroupRow($row)) {\n            keyboardController._applyTabIndexToElement($row);\n          } else {\n            var columnIndex = keyboardController.getColumnIndex();\n\n            if (!isDefined(columnIndex) || columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            this._updateFocusedCellTabIndex(cellElements, columnIndex);\n          }\n        },\n        _updateFocusedCellTabIndex: function (cellElements, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var cellElementsLength = cellElements ? cellElements.length : -1;\n\n          var updateCellTabIndex = function ($cell) {\n            var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\n\n            var isValidCell = keyboardController._isCellValid($cell);\n\n            if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {\n              keyboardController._applyTabIndexToElement($cell);\n\n              keyboardController.setCellFocusType();\n              return true;\n            }\n          };\n\n          var $cell = cellElements.filter(\"[aria-colindex='\".concat(columnIndex + 1, \"']\"));\n\n          if ($cell.length) {\n            updateCellTabIndex($cell);\n          } else {\n            if (cellElementsLength <= columnIndex) {\n              columnIndex = cellElementsLength - 1;\n            }\n\n            for (var i = columnIndex; i < cellElementsLength; ++i) {\n              if (updateCellTabIndex($(cellElements[i]))) {\n                break;\n              }\n            }\n          }\n        },\n        renderDelayedTemplates: function (change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n\n        _renderFocusByChange(change) {\n          if (!change || !change.repaintChangesOnly) {\n            var preventScroll = shouldPreventScroll(this);\n            this.renderFocusState(preventScroll);\n          }\n        },\n\n        _renderCore: function (change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n        _editCellPrepared: function ($cell) {\n          var editorInstance = this._getEditorInstance($cell);\n\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n\n          if (editorInstance && isEditingNavigationMode) {\n            this._handleEditingNavigationMode(editorInstance);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleEditingNavigationMode: function (editorInstance) {\n          [\"downArrow\", \"upArrow\"].forEach(function (keyName) {\n            var originalKeyHandler = editorInstance._supportedKeys()[keyName];\n\n            editorInstance.registerKeyHandler(keyName, e => {\n              var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n\n              if (isDropDownOpened) {\n                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n              }\n            });\n          });\n          editorInstance.registerKeyHandler(\"leftArrow\", noop);\n          editorInstance.registerKeyHandler(\"rightArrow\", noop);\n          var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\n\n          if (isDateBoxWithMask) {\n            editorInstance.registerKeyHandler(\"enter\", noop);\n          }\n        },\n        _getEditorInstance: function ($cell) {\n          var $editor = $cell.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      }\n    },\n    controllers: {\n      editing: {\n        editCell: function (rowIndex, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n            return false;\n          }\n\n          var isCellEditing = this.callBase(rowIndex, columnIndex);\n\n          if (isCellEditing) {\n            keyboardController.setupFocusedView();\n          }\n\n          return isCellEditing;\n        },\n        editRow: function (rowIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var visibleColumnIndex = keyboardController.getVisibleColumnIndex();\n\n          var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n          if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\n            keyboardController._resetFocusedCell();\n          }\n\n          this.callBase(rowIndex);\n        },\n        addRow: function (parentKey) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          keyboardController.setupFocusedView();\n          keyboardController.setCellFocusType();\n          return this.callBase.apply(this, arguments);\n        },\n        getFocusedCellInRow: function (rowIndex) {\n          var keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          var $cell = this.callBase(rowIndex);\n\n          if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\n            var $focusedCell = keyboardNavigationController._getFocusedCell();\n\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\n              $cell = $focusedCell;\n            }\n          }\n\n          return $cell;\n        },\n        _processCanceledEditingCell: function () {\n          this.closeEditCell().done(() => {\n            var keyboardNavigation = this.getController(\"keyboardNavigation\");\n\n            keyboardNavigation._updateFocus();\n          });\n        },\n        init: function () {\n          this.callBase();\n          this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n        },\n        closeEditCell: function () {\n          var keyboardNavigation = this._keyboardNavigationController;\n          keyboardNavigation._fastEditingStarted = false;\n          var result = this.callBase.apply(this, arguments);\n\n          keyboardNavigation._updateFocus();\n\n          return result;\n        },\n        _delayedInputFocus: function () {\n          this._keyboardNavigationController._isNeedScroll = true;\n          this.callBase.apply(this, arguments);\n        },\n        _isEditingStart: function () {\n          var keyboardNavigation = this.getController(\"keyboardNavigation\");\n          var cancel = this.callBase.apply(this, arguments);\n\n          if (cancel && !keyboardNavigation._isNeedFocus) {\n            var $cell = keyboardNavigation._getFocusedCell();\n\n            keyboardNavigation._focus($cell, true);\n          }\n\n          return cancel;\n        }\n      },\n      data: {\n        _correctRowIndices: function (getRowIndexCorrection) {\n          var that = this;\n          var keyboardNavigationController = that.getController(\"keyboardNavigation\");\n          var editorFactory = that.getController(\"editorFactory\");\n          var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\n          that.callBase.apply(that, arguments);\n\n          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n            var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n\n            if (focusedRowIndexCorrection) {\n              focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n              editorFactory.refocus();\n            }\n          }\n        },\n        getMaxRowIndex: function () {\n          var result = this.items().length - 1;\n          var virtualItemsCount = this.virtualItemsCount();\n\n          if (virtualItemsCount) {\n            result += virtualItemsCount.begin + virtualItemsCount.end;\n          }\n\n          return result;\n        }\n      },\n      adaptiveColumns: {\n        _showHiddenCellsInView: function (_ref) {\n          var {\n            viewName: viewName,\n            $cells: $cells,\n            isCommandColumn: isCommandColumn\n          } = _ref;\n          this.callBase.apply(this, arguments);\n          viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {\n            var $cell = $(cellElement);\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n          });\n        },\n        _hideVisibleCellInView: function (_ref2) {\n          var {\n            viewName: viewName,\n            $cell: $cell,\n            isCommandColumn: isCommandColumn\n          } = _ref2;\n          this.callBase.apply(this, arguments);\n\n          if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\n            $cell.removeAttr(\"tabindex\");\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.keyboard_navigation.js"],"names":["getOuterHeight","getHeight","getWidth","getOuterWidth","$","domAdapter","eventsEngine","core","gridCoreUtils","isDefined","isEmptyObject","inArray","focused","addNamespace","createEvent","isCommandKeyPressed","pointerEvents","name","clickEventName","noop","accessibility","browser","keyboard","devices","ROWS_VIEW_CLASS","EDIT_FORM_CLASS","GROUP_FOOTER_CLASS","ROW_CLASS","DATA_ROW_CLASS","GROUP_ROW_CLASS","HEADER_ROW_CLASS","EDIT_FORM_ITEM_CLASS","MASTER_DETAIL_ROW_CLASS","FREESPACE_ROW_CLASS","VIRTUAL_ROW_CLASS","MASTER_DETAIL_CELL_CLASS","EDITOR_CELL_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","COMMAND_EXPAND_CLASS","COMMAND_SELECT_CLASS","COMMAND_EDIT_CLASS","COMMAND_CELL_SELECTOR","CELL_FOCUS_DISABLED_CLASS","DATEBOX_WIDGET_NAME","FOCUS_STATE_CLASS","WIDGET_CLASS","REVERT_BUTTON_CLASS","FAST_EDITING_DELETE_KEY","INTERACTIVE_ELEMENTS_SELECTOR","NON_FOCUSABLE_ELEMENTS_SELECTOR","concat","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","FOCUS_TYPE_ROW","FOCUS_TYPE_CELL","COLUMN_HEADERS_VIEW","isGroupRow","$row","hasClass","isDetailRow","isDataRow","isNotFocusedRow","isCellElement","$element","length","tagName","isEditorCell","that","$cell","_isRowEditMode","isElementDefined","isMobile","current","deviceType","isCellInHeaderRow","parent","isFixedColumnIndexOffsetRequired","column","rtlEnabled","option","result","fixedPosition","command","shouldPreventScroll","keyboardController","getController","_isVirtualScrolling","getRowIndex","KeyboardNavigationController","ViewController","inherit","init","_dataController","_selectionController","_editingController","_headerPanel","getView","_columnsController","_editorFactory","isKeyboardEnabled","subscribeVisibilityChange","_updateFocusTimeout","_fastEditingStarted","_focusedCellPosition","_canceledCellPosition","add","setupFocusedView","_isNeedScroll","is","_focusedView","getScrollable","_scrollToElement","_initViewHandlers","_initDocumentHandlers","createAction","rowsView","rowsViewFocusHandler","event","target","isRelatedTargetInRowsView","relatedTarget","closest","element","isCommandButton","_isEventInCurrentGrid","$focusedCell","_getFocusedCell","getCellElements","filter","eq","preventDefault","trigger","renderCompleted","e","$rowsView","isFullUpdate","changeType","isFocusedViewCorrect","needUpdateFocus","isAppend","$focusedElement","isFocusedElementCorrect","off","on","_initPointerEventHandler","_initKeyDownHandler","_setRowsViewAttributes","_isNeedFocus","_isHiddenFocus","_updateFocus","document","getDocument","_documentClickHandler","$target","isCurrentRowsViewClick","addWidgetPrefix","isEditorOverlay","columnsResizerController","isColumnResizing","isResizing","targetInsideFocusedView","parents","_resetFocusedCell","_resetFocusedView","down","_getRowsViewElement","isGridEmpty","getVisibleRows","_applyTabIndexToElement","pointerEventName","clickSelector","_pointerEventAction","_pointerEventHandler","_keyDownListener","_keyDownHandler","dispose","callBase","clearTimeout","unsubscribeVisibilityChange","optionChanged","args","handled","isRowFocusType","focusType","isCellFocusType","setRowFocusType","setCellFocusType","isEditing","needStopPropagation","originalEvent","isHandled","_processOnKeyDown","isDefaultPrevented","_updateFocusedCellPositionByTarget","keyName","_leftRightKeysHandler","ctrl","selectView","_upDownKeysHandler","_pageUpDownKeyHandler","_spaceKeyHandler","_ctrlAKeyHandler","_beginFastEditing","_tabKeyHandler","_enterKeyHandler","_escapeKeyHandler","_ctrlFKeyHandler","_f2KeyHandler","_isFastEditingAllowed","_isFastEditingStarted","stopPropagation","eventArgs","executeAction","ctrlKey","alt","altKey","shift","shiftKey","_closeEditCell","setTimeout","closeEditCell","rowIndex","getVisibleRowIndex","$event","getRow","directionCode","_getDirectionCodeByKey","isEditingNavigationMode","allowNavigate","_isVirtualColumnRender","_processVirtualHorizontalPosition","_getNextCell","_arrowKeysHandlerFocusCell","visibleRowIndex","isUpArrow","dataSource","_navigateNextCell","_isVirtualRowRender","isLoading","rowHeight","_scrollBy","pageIndex","pageCount","pagingEnabled","isPageUp","pageStep","scrollable","container","$content","mode","isFocusedRowElement","_getElementType","isFocusedSelectionCell","startSelectionWithCheckboxes","changeItemSelection","control","selectAll","editingOptions","direction","isCellPositionDefined","isOriginalHandlerRequired","_isLastValidCell","_isFirstValidCell","eventTarget","focusedViewElement","_handleTabKeyOnMasterDetailCell","addClass","_editingCellTabHandler","_targetCellTabHandler","loseFocus","_getMaxHorizontalOffset","component","offset","scrollWidth","_isColumnRendered","columnIndex","allVisibleColumns","getVisibleColumns","renderedVisibleColumns","indexOf","_isFixedColumn","fixed","_isColumnVirtual","localColumnIndex","getColumnIndexOffset","visibleColumns","getColumnIndex","nextColumnIndex","horizontalScrollPosition","needToScroll","columnsCount","_getVisibleColumnCount","columnIndexOffset","leftEdgePosition","scrollTo","left","_getHorizontalScrollPositionOffset","scrollBy","top","positionOffset","$currentCell","_getCell","currentCellWidth","rtlMultiplier","_getCellElementFromTarget","isEditingAllowed","elementType","_updateFocusedCellPosition","nextCellInfo","_getNextCellByTabKey","columnsController","cellIndex","getCellIndex","_getRowIndex","row","items","editingController","allowEditing","_isDataRow","rowType","allowUpdating","isNewRow","_focusCell","isHighlighted","_editFocusedCell","_focusInteractiveElement","$lastInteractiveElement","_getInteractiveElement","get","getFirstValidCellInRow","_checkNewLineTransition","_fireFocusedCellChanging","cancel","$newCellElement","cellPosition","_getCellPosition","_fireFocusedRowChanging","rowIndexChanged","setFocusedColumnIndex","key","getKeyByRowIndex","item","data","isContinuation","changeRowExpand","_processEnterKeyForDataCell","_getEnterKeyDirection","allowEditingOnEnterKey","_allowEditingOnEnterKey","_handleEnterKeyEditingCell","_startEditing","enterKeyDirection","isShift","isRowEditMode","_focusEditFormCell","saveEditData","bind","getEditMode","cancelEditData","searchTextEditor","getSearchTextEditor","focus","keyCode","isCellValid","_isCellValid","$nextCell","isVerticalDirection","_fireFocusChangingEvents","_focus","isDeleting","which","fastEditingKey","String","fromCharCode","currentTarget","$parent","isInteractiveElement","isRevertButton","isExpandCommandCell","_isInsideEditForm","_focusView","removeClass","_isMasterDetailCell","_clickTargetCellHandler","isCellEditMode","_isCellEditMode","resetFocusedRow","_resetFocusedRow","_allowRowUpdating","skipFocusEvent","not","isEditor","isDisabled","setFocusedRowIndex","prevRowIndex","activeElementSelector","focusedRowEnabled","find","first","_focusElement","getFocusedView","rowsViewElement","$focusedView","_getFocusedViewByElement","view","$view","isLast","focusAndSelectElement","disableFocus","focusedView","$focusViewElement","$focusElement","isRowFocus","removeAttr","one","isRenderView","isBatchEditMode","hasChanges","isNewRowInEditMode","_focusEditingCell","_hasSkipRow","_checkCellOverlapped","isCommandCell","$focusedElementInsideCell","isFocusedElementDefined","cellOffset","hasScrollable","isOverlapped","_this$_focusedCellPos","position","setFocusedCellPosition","_getFocusedColumnIndexOffset","_getFixedColumnIndexOffset","_applyColumnIndexBoundaries","preventScroll","_this$_focusedView","renderFocusState","restoreFocusableElement","$rowElement","$rowsViewElement","rowIndexOffset","getRowIndexOffset","getTopVisibleItemIndex","newRowIndex","_getNewPositionByCode","code","visibleColumnsCount","_hasValidCellAfterPosition","_isLastRow","_hasValidCellBeforePosition","getVisibleColumnIndex","_isCellByPositionValid","dataController","getMaxRowIndex","isFirstValidCell","hasValidCells","checkingPosition","visibleColumnCount","visibleRows","isLastRow","isClick","isMasterDetailRow","isShowWhenGrouped","showWhenGrouped","isDataCell","groupIndex","parseInt","attr","rowItems","isCellEditing","isRowEditingInCurrentRow","isEditRow","_isLegacyNavigation","$cells","$result","i","focusedCellPosition","includeCommandCells","newFocusedCellPosition","isLastCellOnDirection","_isCellInRow","visibleColumnIndex","_isAllowEditing","editRow","_startEditCell","colIndex","editCell","editResult","_editingCellHandler","done","editorValue","_$input$get$select","_$input$get","$input","keyDownEvent","type","keyPressEvent","inputEvent","select","call","timeout","mozilla","val","$widgetContainer","fireRowEvent","newColumnIndex","$cellElement","prevCellIndex","cellElement","prevColumnIndex","rows","columns","_fireFocusedCellChanged","localRowIndex","Math","min","isEditingCell","isEditCell","$newFocusedRow","prevFocusedRowIndex","loadingOperationTypes","rowElement","reload","paging","_fireFocusedRowChanged","focusedRowKey","focusController","focusedRowIndex","getFocusedRowIndexByKey","isElementInCurrentGrid","editMode","last","tabIndex","getCell","style","display","scrollingMode","isVirtualRowRendering","scrollHandler","$masterDetailCell","$masterDetailGrid","getWidgetContainerClass","_processNextCellInMasterDetail","$targetElement","children","_processCanceledEditCellPosition","isCanceled","keyboardNavigationModule","defaultOptions","useLegacyKeyboardNavigation","keyboardNavigation","enabled","enterKeyAction","editOnKeyPress","controllers","extenders","views","_rowClick","editRowIndex","getEditRowIndex","needTriggerPointerEventHandler","_triggerPointerDownEventHandler","apply","arguments","cellElements","updateFocusElementTabIndex","_updateFocusedCellTabIndex","cellElementsLength","updateCellTabIndex","isMasterDetailCell","isValidCell","renderDelayedTemplates","change","_renderFocusByChange","repaintChangesOnly","_renderCore","_editCellPrepared","editorInstance","_getEditorInstance","_handleEditingNavigationMode","forEach","originalKeyHandler","_supportedKeys","registerKeyHandler","isDropDownOpened","_input","isDateBoxWithMask","NAME","$editor","getWidgetInstance","editing","addRow","parentKey","getFocusedCellInRow","keyboardNavigationController","_processCanceledEditingCell","_keyboardNavigationController","_delayedInputFocus","_isEditingStart","_correctRowIndices","getRowIndexCorrection","editorFactory","focusedRowIndexCorrection","refocus","virtualItemsCount","begin","end","adaptiveColumns","_showHiddenCellsInView","_ref","viewName","isCommandColumn","each","_","_hideVisibleCellInView","_ref2"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterHeight,\r\n    getHeight,\r\n    getWidth,\r\n    getOuterWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport core from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    focused\r\n} from \"../widget/selectors\";\r\nimport {\r\n    addNamespace,\r\n    createEvent,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as accessibility from \"../shared/accessibility\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    keyboard\r\n} from \"../../events/short\";\r\nimport devices from \"../../core/devices\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar EDIT_FORM_CLASS = \"edit-form\";\r\nvar GROUP_FOOTER_CLASS = \"group-footer\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar HEADER_ROW_CLASS = \"dx-header-row\";\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\r\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\r\nvar WIDGET_CLASS = \"dx-widget\";\r\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nvar FAST_EDITING_DELETE_KEY = \"delete\";\r\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox\";\r\nvar NON_FOCUSABLE_ELEMENTS_SELECTOR = \"\".concat(INTERACTIVE_ELEMENTS_SELECTOR, \", .dx-dropdowneditor-icon\");\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar FOCUS_TYPE_ROW = \"row\";\r\nvar FOCUS_TYPE_CELL = \"cell\";\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\n\r\nfunction isGroupRow($row) {\r\n    return $row && $row.hasClass(GROUP_ROW_CLASS)\r\n}\r\n\r\nfunction isDetailRow($row) {\r\n    return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS)\r\n}\r\n\r\nfunction isDataRow($row) {\r\n    return $row && !isGroupRow($row) && !isDetailRow($row)\r\n}\r\n\r\nfunction isNotFocusedRow($row) {\r\n    return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS)\r\n}\r\n\r\nfunction isCellElement($element) {\r\n    return $element.length && \"TD\" === $element[0].tagName\r\n}\r\n\r\nfunction isEditorCell(that, $cell) {\r\n    return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS)\r\n}\r\n\r\nfunction isElementDefined($element) {\r\n    return isDefined($element) && $element.length > 0\r\n}\r\n\r\nfunction isMobile() {\r\n    return \"desktop\" !== devices.current().deviceType\r\n}\r\n\r\nfunction isCellInHeaderRow($cell) {\r\n    return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length\r\n}\r\n\r\nfunction isFixedColumnIndexOffsetRequired(that, column) {\r\n    var rtlEnabled = that.option(\"rtlEnabled\");\r\n    var result = false;\r\n    if (rtlEnabled) {\r\n        result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition))\r\n    } else {\r\n        result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction shouldPreventScroll(that) {\r\n    var keyboardController = that.getController(\"keyboardNavigation\");\r\n    return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false\r\n}\r\nvar KeyboardNavigationController = core.ViewController.inherit({\r\n    init: function() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._headerPanel = this.getView(\"headerPanel\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._editorFactory = this.getController(\"editorFactory\");\r\n        if (this.isKeyboardEnabled()) {\r\n            accessibility.subscribeVisibilityChange();\r\n            this._updateFocusTimeout = null;\r\n            this._fastEditingStarted = false;\r\n            this._focusedCellPosition = {};\r\n            this._canceledCellPosition = null;\r\n            this._editorFactory.focused.add($element => {\r\n                this.setupFocusedView();\r\n                if (this._isNeedScroll) {\r\n                    if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\r\n                        this._focusedView._scrollToElement($element);\r\n                        this._isNeedScroll = false\r\n                    }\r\n                }\r\n            });\r\n            this._initViewHandlers();\r\n            this._initDocumentHandlers();\r\n            this.createAction(\"onKeyDown\")\r\n        }\r\n    },\r\n    _initViewHandlers: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var rowsViewFocusHandler = event => {\r\n            var $element = $(event.target);\r\n            var isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\r\n            var isCommandButton = $element.hasClass(\"dx-link\");\r\n            if (isCommandButton && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\r\n                var $focusedCell = this._getFocusedCell();\r\n                $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\r\n                if (!$element.closest($focusedCell).length) {\r\n                    event.preventDefault();\r\n                    eventsEngine.trigger($focusedCell, \"focus\")\r\n                }\r\n            }\r\n        };\r\n        rowsView.renderCompleted.add(e => {\r\n            var $rowsView = rowsView.element();\r\n            var isFullUpdate = !e || \"refresh\" === e.changeType;\r\n            var isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\r\n            var needUpdateFocus = false;\r\n            var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\r\n            var $focusedElement = $(\":focus\");\r\n            var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;\r\n            eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            this._initPointerEventHandler();\r\n            this._initKeyDownHandler();\r\n            this._setRowsViewAttributes();\r\n            if (isFocusedViewCorrect && isFocusedElementCorrect) {\r\n                needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate;\r\n                needUpdateFocus && this._updateFocus(true)\r\n            }\r\n        })\r\n    },\r\n    _initDocumentHandlers: function() {\r\n        var document = domAdapter.getDocument();\r\n        this._documentClickHandler = this.createAction(e => {\r\n            var $target = $(e.event.target);\r\n            var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\r\n            var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\r\n            var columnsResizerController = this.getController(\"columnsResizer\");\r\n            var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\r\n            if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\r\n                var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\r\n                !targetInsideFocusedView && this._resetFocusedCell(true);\r\n                this._resetFocusedView()\r\n            }\r\n        });\r\n        eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler)\r\n    },\r\n    _setRowsViewAttributes: function() {\r\n        var $rowsView = this._getRowsViewElement();\r\n        var isGridEmpty = !this._dataController.getVisibleRows().length;\r\n        if (isGridEmpty) {\r\n            this._applyTabIndexToElement($rowsView)\r\n        }\r\n    },\r\n    _initPointerEventHandler: function() {\r\n        var pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\r\n        var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\r\n        var $rowsView = this._getRowsViewElement();\r\n        if (!isDefined(this._pointerEventAction)) {\r\n            this._pointerEventAction = this.createAction(this._pointerEventHandler)\r\n        }\r\n        eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\r\n        eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction)\r\n    },\r\n    _initKeyDownHandler: function() {\r\n        var $rowsView = this._getRowsViewElement();\r\n        keyboard.off(this._keyDownListener);\r\n        this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e))\r\n    },\r\n    dispose: function() {\r\n        this.callBase();\r\n        this._resetFocusedView();\r\n        keyboard.off(this._keyDownListener);\r\n        eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\r\n        clearTimeout(this._updateFocusTimeout);\r\n        accessibility.unsubscribeVisibilityChange()\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"keyboardNavigation\":\r\n            case \"useLegacyKeyboardNavigation\":\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    isRowFocusType: function() {\r\n        return this.focusType === FOCUS_TYPE_ROW\r\n    },\r\n    isCellFocusType: function() {\r\n        return this.focusType === FOCUS_TYPE_CELL\r\n    },\r\n    setRowFocusType: function() {\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.focusType = FOCUS_TYPE_ROW\r\n        }\r\n    },\r\n    setCellFocusType: function() {\r\n        this.focusType = FOCUS_TYPE_CELL\r\n    },\r\n    _keyDownHandler: function(e) {\r\n        var isEditing = this._editingController.isEditing();\r\n        var needStopPropagation = true;\r\n        var originalEvent = e.originalEvent;\r\n        var isHandled = this._processOnKeyDown(e);\r\n        if (originalEvent.isDefaultPrevented()) {\r\n            return\r\n        }\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        this._updateFocusedCellPositionByTarget(originalEvent.target);\r\n        if (!isHandled) {\r\n            switch (e.keyName) {\r\n                case \"leftArrow\":\r\n                case \"rightArrow\":\r\n                    this._leftRightKeysHandler(e, isEditing);\r\n                    break;\r\n                case \"upArrow\":\r\n                case \"downArrow\":\r\n                    if (e.ctrl) {\r\n                        accessibility.selectView(\"rowsView\", this, originalEvent)\r\n                    } else {\r\n                        this._upDownKeysHandler(e, isEditing)\r\n                    }\r\n                    break;\r\n                case \"pageUp\":\r\n                case \"pageDown\":\r\n                    this._pageUpDownKeyHandler(e);\r\n                    break;\r\n                case \"space\":\r\n                    this._spaceKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"A\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlAKeyHandler(e, isEditing)\r\n                    } else {\r\n                        this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"tab\":\r\n                    this._tabKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"enter\":\r\n                    this._enterKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"escape\":\r\n                    this._escapeKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"F\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlFKeyHandler(e)\r\n                    } else {\r\n                        this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"F2\":\r\n                    this._f2KeyHandler();\r\n                    break;\r\n                case \"del\":\r\n                case \"backspace\":\r\n                    if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\r\n                        this._beginFastEditing(originalEvent, true)\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (!this._beginFastEditing(originalEvent)) {\r\n                        this._isNeedFocus = false;\r\n                        this._isNeedScroll = false;\r\n                        needStopPropagation = false\r\n                    }\r\n            }\r\n            if (needStopPropagation) {\r\n                originalEvent.stopPropagation()\r\n            }\r\n        }\r\n    },\r\n    _processOnKeyDown: function(eventArgs) {\r\n        var originalEvent = eventArgs.originalEvent;\r\n        var args = {\r\n            handled: false,\r\n            event: originalEvent\r\n        };\r\n        this.executeAction(\"onKeyDown\", args);\r\n        eventArgs.ctrl = originalEvent.ctrlKey;\r\n        eventArgs.alt = originalEvent.altKey;\r\n        eventArgs.shift = originalEvent.shiftKey;\r\n        return !!args.handled\r\n    },\r\n    _closeEditCell: function() {\r\n        setTimeout(() => {\r\n            this._editingController.closeEditCell()\r\n        })\r\n    },\r\n    _leftRightKeysHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $event = eventArgs.originalEvent;\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\r\n        var isEditingNavigationMode = this._isFastEditingStarted();\r\n        var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\r\n        if (allowNavigate) {\r\n            this.setCellFocusType();\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(directionCode)\r\n            }\r\n            var $cell = this._getNextCell(directionCode);\r\n            if (isElementDefined($cell)) {\r\n                this._arrowKeysHandlerFocusCell($event, $cell, directionCode)\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _upDownKeysHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this._focusedCellPosition.rowIndex;\r\n        var visibleRowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\r\n        var $event = eventArgs.originalEvent;\r\n        var isUpArrow = \"upArrow\" === eventArgs.keyName;\r\n        var dataSource = this._dataController.dataSource();\r\n        var isEditingNavigationMode = this._isFastEditingStarted();\r\n        var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\r\n        if (allowNavigate) {\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (!this._navigateNextCell($event, eventArgs.keyName)) {\r\n                if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\r\n                    var rowHeight = getOuterHeight($row);\r\n                    rowIndex = this._focusedCellPosition.rowIndex - 1;\r\n                    this._scrollBy(0, -rowHeight, rowIndex, $event)\r\n                }\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _pageUpDownKeyHandler: function(eventArgs) {\r\n        var pageIndex = this._dataController.pageIndex();\r\n        var pageCount = this._dataController.pageCount();\r\n        var pagingEnabled = this.option(\"paging.enabled\");\r\n        var isPageUp = \"pageUp\" === eventArgs.keyName;\r\n        var pageStep = isPageUp ? -1 : 1;\r\n        var scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (pagingEnabled && !this._isVirtualScrolling()) {\r\n            if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\r\n                this._dataController.pageIndex(pageIndex + pageStep);\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\r\n            this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _spaceKeyHandler: function(eventArgs, isEditing) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\r\n        if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\r\n            var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\r\n            var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\r\n            if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\r\n                this._selectionController.startSelectionWithCheckboxes()\r\n            }\r\n            if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._selectionController.changeItemSelection(rowIndex, {\r\n                    shift: eventArgs.shift,\r\n                    control: eventArgs.ctrl\r\n                });\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._beginFastEditing(eventArgs.originalEvent)\r\n        }\r\n    },\r\n    _ctrlAKeyHandler: function(eventArgs, isEditing) {\r\n        if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\r\n            this._selectionController.selectAll();\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _tabKeyHandler: function(eventArgs, isEditing) {\r\n        var editingOptions = this.option(\"editing\");\r\n        var direction = eventArgs.shift ? \"previous\" : \"next\";\r\n        var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\r\n        var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\r\n        var eventTarget = eventArgs.originalEvent.target;\r\n        var focusedViewElement = this._focusedView && this._focusedView.element();\r\n        if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\r\n            return\r\n        }\r\n        $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\r\n        if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\r\n            if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._resetFocusedCell()\r\n            }\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(direction)\r\n            }\r\n            if (isEditing) {\r\n                if (!this._editingCellTabHandler(eventArgs, direction)) {\r\n                    return\r\n                }\r\n            } else if (this._targetCellTabHandler(eventArgs, direction)) {\r\n                isOriginalHandlerRequired = true\r\n            }\r\n        }\r\n        if (isOriginalHandlerRequired) {\r\n            this._editorFactory.loseFocus();\r\n            if (this._editingController.isEditing() && !this._isRowEditMode()) {\r\n                this._resetFocusedCell(true);\r\n                this._resetFocusedView();\r\n                this._closeEditCell()\r\n            }\r\n        } else {\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _getMaxHorizontalOffset: function() {\r\n        var scrollable = this.component.getScrollable();\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var offset = scrollable ? scrollable.scrollWidth() - getWidth(rowsView.element()) : 0;\r\n        return offset\r\n    },\r\n    _isColumnRendered: function(columnIndex) {\r\n        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        var renderedVisibleColumns = this._columnsController.getVisibleColumns();\r\n        var column = allVisibleColumns[columnIndex];\r\n        var result = false;\r\n        if (column) {\r\n            result = renderedVisibleColumns.indexOf(column) >= 0\r\n        }\r\n        return result\r\n    },\r\n    _isFixedColumn: function(columnIndex) {\r\n        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        var column = allVisibleColumns[columnIndex];\r\n        return !!column && !!column.fixed\r\n    },\r\n    _isColumnVirtual: function(columnIndex) {\r\n        var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\r\n        var visibleColumns = this._columnsController.getVisibleColumns();\r\n        var column = visibleColumns[localColumnIndex];\r\n        return !!column && \"virtual\" === column.command\r\n    },\r\n    _processVirtualHorizontalPosition: function(direction) {\r\n        var scrollable = this.component.getScrollable();\r\n        var columnIndex = this.getColumnIndex();\r\n        var nextColumnIndex;\r\n        var horizontalScrollPosition = 0;\r\n        var needToScroll = false;\r\n        switch (direction) {\r\n            case \"next\":\r\n            case \"nextInRow\":\r\n                var columnsCount = this._getVisibleColumnCount();\r\n                nextColumnIndex = columnIndex + 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\r\n                if (\"next\" === direction) {\r\n                    needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n                break;\r\n            case \"previous\":\r\n            case \"previousInRow\":\r\n                nextColumnIndex = columnIndex - 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\r\n                if (\"previous\" === direction) {\r\n                    var columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n                    var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\r\n                    needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n        }\r\n        if (needToScroll) {\r\n            scrollable.scrollTo({\r\n                left: horizontalScrollPosition\r\n            })\r\n        } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\r\n            horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\r\n            0 !== horizontalScrollPosition && scrollable.scrollBy({\r\n                left: horizontalScrollPosition,\r\n                top: 0\r\n            })\r\n        }\r\n    },\r\n    _getHorizontalScrollPositionOffset: function(direction) {\r\n        var positionOffset = 0;\r\n        var $currentCell = this._getCell(this._focusedCellPosition);\r\n        var currentCellWidth = $currentCell && getOuterWidth($currentCell);\r\n        if (currentCellWidth > 0) {\r\n            var rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\r\n            positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1\r\n        }\r\n        return positionOffset\r\n    },\r\n    _editingCellTabHandler: function(eventArgs, direction) {\r\n        var eventTarget = eventArgs.originalEvent.target;\r\n        var $cell = this._getCellElementFromTarget(eventTarget);\r\n        var isEditingAllowed;\r\n        var $event = eventArgs.originalEvent;\r\n        var elementType = this._getElementType(eventTarget);\r\n        if ($cell.is(COMMAND_CELL_SELECTOR)) {\r\n            return !this._targetCellTabHandler(eventArgs, direction)\r\n        }\r\n        this._updateFocusedCellPosition($cell);\r\n        var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n        $cell = nextCellInfo.$cell;\r\n        if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\r\n            return false\r\n        }\r\n        var columnsController = this._columnsController;\r\n        var cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        var columnIndex = cellIndex + columnsController.getColumnIndexOffset();\r\n        var column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n        var $row = $cell.parent();\r\n        var rowIndex = this._getRowIndex($row);\r\n        var row = this._dataController.items()[rowIndex];\r\n        var editingController = this._editingController;\r\n        if (column && column.allowEditing) {\r\n            var _isDataRow = !row || \"data\" === row.rowType;\r\n            isEditingAllowed = editingController.allowUpdating({\r\n                row: row\r\n            }) ? _isDataRow : row && row.isNewRow\r\n        }\r\n        if (!isEditingAllowed) {\r\n            this._closeEditCell()\r\n        }\r\n        if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\r\n            if (!this._isRowEditMode() && isEditingAllowed) {\r\n                this._editFocusedCell()\r\n            } else {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _targetCellTabHandler: function(eventArgs, direction) {\r\n        var $event = eventArgs.originalEvent;\r\n        var eventTarget = $event.target;\r\n        var $cell = this._getCellElementFromTarget(eventTarget);\r\n        var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\r\n        var isOriginalHandlerRequired = false;\r\n        var elementType;\r\n        if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\r\n            isOriginalHandlerRequired = true\r\n        } else {\r\n            if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($cell)\r\n            }\r\n            elementType = this._getElementType(eventTarget);\r\n            if (this.isRowFocusType()) {\r\n                this.setCellFocusType();\r\n                if (\"row\" === elementType && isDataRow($(eventTarget))) {\r\n                    eventTarget = this.getFirstValidCellInRow($(eventTarget));\r\n                    elementType = this._getElementType(eventTarget)\r\n                }\r\n            }\r\n            var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n            $cell = nextCellInfo.$cell;\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            $cell = this._checkNewLineTransition($event, $cell);\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            this._focusCell($cell, !nextCellInfo.isHighlighted);\r\n            if (!isEditorCell(this, $cell)) {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return isOriginalHandlerRequired\r\n    },\r\n    _getNextCellByTabKey: function($event, direction, elementType) {\r\n        var $cell = this._getNextCell(direction, elementType);\r\n        var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\r\n        if (!args || args.cancel) {\r\n            return {}\r\n        }\r\n        if (args.$newCellElement) {\r\n            $cell = args.$newCellElement\r\n        }\r\n        return {\r\n            $cell: $cell,\r\n            isHighlighted: args.isHighlighted\r\n        }\r\n    },\r\n    _checkNewLineTransition: function($event, $cell) {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = $cell.parent();\r\n        if (rowIndex !== this._getRowIndex($row)) {\r\n            var cellPosition = this._getCellPosition($cell);\r\n            var args = this._fireFocusedRowChanging($event, $row);\r\n            if (args.cancel) {\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                this.setFocusedColumnIndex(cellPosition.columnIndex);\r\n                $cell = this._getFocusedCell()\r\n            }\r\n        }\r\n        return $cell\r\n    },\r\n    _enterKeyHandler: function(eventArgs, isEditing) {\r\n        var $cell = this._getFocusedCell();\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var item = this._dataController.items()[rowIndex];\r\n            if (void 0 !== key && item && item.data && !item.data.isContinuation) {\r\n                this._dataController.changeRowExpand(key)\r\n            }\r\n        } else {\r\n            this._processEnterKeyForDataCell(eventArgs, isEditing)\r\n        }\r\n    },\r\n    _processEnterKeyForDataCell: function(eventArgs, isEditing) {\r\n        var direction = this._getEnterKeyDirection(eventArgs);\r\n        var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\r\n        if (isEditing || !allowEditingOnEnterKey && direction) {\r\n            this._handleEnterKeyEditingCell(eventArgs.originalEvent);\r\n            if (\"next\" === direction || \"previous\" === direction) {\r\n                this._targetCellTabHandler(eventArgs, direction)\r\n            } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\r\n                this._navigateNextCell(eventArgs.originalEvent, direction)\r\n            }\r\n        } else if (allowEditingOnEnterKey) {\r\n            this._startEditing(eventArgs)\r\n        }\r\n    },\r\n    _getEnterKeyDirection: function(eventArgs) {\r\n        var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\r\n        var isShift = eventArgs.shift;\r\n        if (\"column\" === enterKeyDirection) {\r\n            return isShift ? \"upArrow\" : \"downArrow\"\r\n        }\r\n        if (\"row\" === enterKeyDirection) {\r\n            return isShift ? \"previous\" : \"next\"\r\n        }\r\n    },\r\n    _handleEnterKeyEditingCell: function(event) {\r\n        var target = event.target;\r\n        var $cell = this._getCellElementFromTarget(target);\r\n        var isRowEditMode = this._isRowEditMode();\r\n        this._updateFocusedCellPosition($cell);\r\n        if (isRowEditMode) {\r\n            this._focusEditFormCell($cell);\r\n            setTimeout(this._editingController.saveEditData.bind(this._editingController))\r\n        } else {\r\n            eventsEngine.trigger($(target), \"change\");\r\n            this._closeEditCell();\r\n            event.preventDefault()\r\n        }\r\n    },\r\n    _escapeKeyHandler: function(eventArgs, isEditing) {\r\n        var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\r\n        if (isEditing) {\r\n            this._updateFocusedCellPosition($cell);\r\n            if (!this._isRowEditMode()) {\r\n                if (\"cell\" === this._editingController.getEditMode()) {\r\n                    this._editingController.cancelEditData()\r\n                } else {\r\n                    this._closeEditCell()\r\n                }\r\n            } else {\r\n                this._focusEditFormCell($cell);\r\n                this._editingController.cancelEditData();\r\n                if (0 === this._dataController.items().length) {\r\n                    this._resetFocusedCell();\r\n                    this._editorFactory.loseFocus()\r\n                }\r\n            }\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _ctrlFKeyHandler: function(eventArgs) {\r\n        if (this.option(\"searchPanel.visible\")) {\r\n            var searchTextEditor = this._headerPanel.getSearchTextEditor();\r\n            if (searchTextEditor) {\r\n                searchTextEditor.focus();\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        }\r\n    },\r\n    _f2KeyHandler: function() {\r\n        var isEditing = this._editingController.isEditing();\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (!isEditing && isDataRow($row)) {\r\n            this._startEditing()\r\n        }\r\n    },\r\n    _navigateNextCell: function($event, keyCode) {\r\n        var $cell = this._getNextCell(keyCode);\r\n        var directionCode = this._getDirectionCodeByKey(keyCode);\r\n        var isCellValid = $cell && this._isCellValid($cell);\r\n        var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\r\n        return result\r\n    },\r\n    _arrowKeysHandlerFocusCell: function($event, $nextCell, direction) {\r\n        var isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\r\n        var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\r\n        $nextCell = args.$newCellElement;\r\n        if (!args.cancel && this._isCellValid($nextCell)) {\r\n            this._focus($nextCell, !args.isHighlighted);\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _beginFastEditing: function(originalEvent, isDeleting) {\r\n        if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\r\n            return false\r\n        }\r\n        if (isDeleting) {\r\n            this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY)\r\n        } else {\r\n            var key = originalEvent.key;\r\n            var keyCode = originalEvent.keyCode || originalEvent.which;\r\n            var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\r\n            if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\r\n                this._startEditing(originalEvent, fastEditingKey)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _pointerEventHandler: function(e) {\r\n        var event = e.event || e;\r\n        var $target = $(event.currentTarget);\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var focusedViewElement = rowsView && rowsView.element();\r\n        var $parent = $target.parent();\r\n        var isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\r\n        var isRevertButton = !!$(event.target).closest(\".\".concat(REVERT_BUTTON_CLASS)).length;\r\n        var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\r\n        if (!this._isEventInCurrentGrid(event)) {\r\n            return\r\n        }\r\n        if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\r\n            $target = this._isInsideEditForm($target) ? $(event.target) : $target;\r\n            this._focusView();\r\n            $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\r\n            if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($target);\r\n                this._applyTabIndexToElement(this._focusedView.element());\r\n                this._focusedView.focus()\r\n            } else if (!this._isMasterDetailCell($target)) {\r\n                this._clickTargetCellHandler(event, $target)\r\n            } else {\r\n                this._updateFocusedCellPosition($target)\r\n            }\r\n        } else if ($target.is(\"td\")) {\r\n            this._resetFocusedCell()\r\n        }\r\n    },\r\n    _clickTargetCellHandler: function(event, $cell) {\r\n        var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        var isCellEditMode = this._isCellEditMode();\r\n        this.setCellFocusType();\r\n        var args = this._fireFocusChangingEvents(event, $cell, true);\r\n        $cell = args.$newCellElement;\r\n        if (!args.cancel) {\r\n            if (args.resetFocusedRow) {\r\n                this.getController(\"focus\")._resetFocusedRow();\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                $cell = this._getFocusedCell()\r\n            }\r\n            if (!args.isHighlighted && !isCellEditMode) {\r\n                this.setRowFocusType()\r\n            }\r\n            this._updateFocusedCellPosition($cell);\r\n            if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\r\n                this._isNeedFocus = false;\r\n                this._isHiddenFocus = false\r\n            } else {\r\n                var $target = event && $(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + \", td\");\r\n                var skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\r\n                var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\r\n                var isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\r\n                this._focus($cell, isDisabled, skipFocusEvent)\r\n            }\r\n        } else {\r\n            this.setRowFocusType();\r\n            this.setFocusedRowIndex(args.prevRowIndex);\r\n            $cell = this._getFocusedCell();\r\n            if (this._editingController.isEditing() && isCellEditMode) {\r\n                this._closeEditCell()\r\n            }\r\n        }\r\n    },\r\n    _allowRowUpdating: function() {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var row = this._dataController.items()[rowIndex];\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }, \"click\")\r\n    },\r\n    focus: function(element) {\r\n        var activeElementSelector;\r\n        var focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        var isHighlighted = isCellElement($(element));\r\n        if (!element) {\r\n            activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\r\n            if (!focusedRowEnabled) {\r\n                activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\"\r\n            }\r\n            element = this.component.$element().find(activeElementSelector).first()\r\n        }\r\n        element && this._focusElement($(element), isHighlighted)\r\n    },\r\n    getFocusedView: function() {\r\n        return this._focusedView\r\n    },\r\n    setupFocusedView: function() {\r\n        if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\r\n            this._focusView()\r\n        }\r\n    },\r\n    _focusElement: function($element, isHighlighted) {\r\n        var rowsViewElement = $(this._getRowsViewElement());\r\n        var $focusedView = $element.closest(rowsViewElement);\r\n        var isRowFocusType = this.isRowFocusType();\r\n        var args = {};\r\n        if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\r\n            return\r\n        }\r\n        this._focusView();\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        if (isCellElement($element) || isGroupRow($element)) {\r\n            this.setCellFocusType();\r\n            args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\r\n            $element = args.$newCellElement;\r\n            if (isRowFocusType && !args.isHighlighted) {\r\n                this.setRowFocusType()\r\n            }\r\n        }\r\n        if (!args.cancel) {\r\n            this._focus($element, !args.isHighlighted);\r\n            this._focusInteractiveElement($element)\r\n        }\r\n    },\r\n    _getFocusedViewByElement: function($element) {\r\n        var view = this.getFocusedView();\r\n        var $view = view && $(view.element());\r\n        return $element && 0 !== $element.closest($view).length\r\n    },\r\n    _focusView: function() {\r\n        this._focusedView = this.getView(\"rowsView\")\r\n    },\r\n    _resetFocusedView: function() {\r\n        this.setRowFocusType();\r\n        this._focusedView = null\r\n    },\r\n    _focusInteractiveElement: function($cell, isLast) {\r\n        if (!$cell) {\r\n            return\r\n        }\r\n        var $focusedElement = this._getInteractiveElement($cell, isLast);\r\n        gridCoreUtils.focusAndSelectElement(this, $focusedElement)\r\n    },\r\n    _focus: function($cell, disableFocus, skipFocusEvent) {\r\n        var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\r\n        if ($row && isNotFocusedRow($row)) {\r\n            return\r\n        }\r\n        var focusedView = this._focusedView;\r\n        var $focusViewElement = focusedView && focusedView.element();\r\n        var $focusElement;\r\n        this._isHiddenFocus = disableFocus;\r\n        var isRowFocus = isGroupRow($row) || this.isRowFocusType();\r\n        if (isRowFocus) {\r\n            $focusElement = $row;\r\n            if (focusedView) {\r\n                this.setFocusedRowIndex(this._getRowIndex($row))\r\n            }\r\n        } else if (isCellElement($cell)) {\r\n            $focusElement = $cell;\r\n            this._updateFocusedCellPosition($cell)\r\n        }\r\n        if ($focusElement) {\r\n            if ($focusViewElement) {\r\n                $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\")\r\n            }\r\n            eventsEngine.one($focusElement, \"blur\", e => {\r\n                if (e.relatedTarget) {\r\n                    $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS)\r\n                }\r\n            });\r\n            if (!skipFocusEvent) {\r\n                this._applyTabIndexToElement($focusElement);\r\n                eventsEngine.trigger($focusElement, \"focus\")\r\n            }\r\n            if (disableFocus) {\r\n                $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                if (isRowFocus) {\r\n                    $cell.addClass(CELL_FOCUS_DISABLED_CLASS)\r\n                }\r\n            } else {\r\n                this._editorFactory.focus($focusElement)\r\n            }\r\n        }\r\n    },\r\n    _updateFocus: function(isRenderView) {\r\n        this._updateFocusTimeout = setTimeout(() => {\r\n            var editingController = this._editingController;\r\n            var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;\r\n            var isBatchEditMode = editingController.getEditMode() === EDIT_MODE_BATCH;\r\n            if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {\r\n                editingController._focusEditingCell();\r\n                return\r\n            }\r\n            var $cell = this._getFocusedCell();\r\n            var isEditing = editingController.isEditing();\r\n            if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\r\n                if (this._hasSkipRow($cell.parent())) {\r\n                    var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\r\n                    $cell = this._getNextCell(direction)\r\n                }\r\n                if (isElementDefined($cell)) {\r\n                    if (isRenderView && !isEditing && this._checkCellOverlapped($cell)) {\r\n                        return\r\n                    }\r\n                    if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\r\n                        var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\r\n                        var $focusedElementInsideCell = $cell.find(\":focus\");\r\n                        var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\r\n                        if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\r\n                            if (isCommandCell && isFocusedElementDefined) {\r\n                                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\r\n                                return\r\n                            }!isFocusedElementDefined && this._focus($cell)\r\n                        } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\r\n                            this._focus($cell, this._isHiddenFocus)\r\n                        }\r\n                        if (isEditing) {\r\n                            this._focusInteractiveElement.bind(this)($cell)\r\n                        }\r\n                    } else {\r\n                        eventsEngine.trigger($cell, \"focus\")\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _checkCellOverlapped: function($cell) {\r\n        var cellOffset = $cell.offset();\r\n        var hasScrollable = this.component.getScrollable && this.component.getScrollable();\r\n        var isOverlapped = false;\r\n        if (hasScrollable) {\r\n            if (cellOffset.left < 0) {\r\n                isOverlapped = getWidth($cell) + cellOffset.left <= 0\r\n            } else if (cellOffset.top < 0) {\r\n                isOverlapped = getHeight($cell) + cellOffset.top <= 0\r\n            }\r\n        }\r\n        return isOverlapped\r\n    },\r\n    _getFocusedCell: function() {\r\n        return $(this._getCell(this._focusedCellPosition))\r\n    },\r\n    _updateFocusedCellPositionByTarget: function(target) {\r\n        var _this$_focusedCellPos;\r\n        var elementType = this._getElementType(target);\r\n        if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\r\n            var $row = $(target);\r\n            this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row))\r\n        } else {\r\n            this._updateFocusedCellPosition(this._getCellElementFromTarget(target))\r\n        }\r\n    },\r\n    _updateFocusedCellPosition: function($cell, direction) {\r\n        var position = this._getCellPosition($cell, direction);\r\n        if (position) {\r\n            if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\r\n                this.setFocusedCellPosition(position.rowIndex, position.columnIndex)\r\n            }\r\n        }\r\n        return position\r\n    },\r\n    _getFocusedColumnIndexOffset: function(columnIndex) {\r\n        var offset = 0;\r\n        var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        if (column && column.fixed) {\r\n            offset = this._getFixedColumnIndexOffset(column)\r\n        } else if (columnIndex >= 0) {\r\n            offset = this._columnsController.getColumnIndexOffset()\r\n        }\r\n        return offset\r\n    },\r\n    _getFixedColumnIndexOffset: function(column) {\r\n        var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\r\n        return offset\r\n    },\r\n    _getCellPosition: function($cell, direction) {\r\n        var columnIndex;\r\n        var $row = isElementDefined($cell) && $cell.closest(\"tr\");\r\n        var rowsView = this.getView(\"rowsView\");\r\n        if (isElementDefined($row)) {\r\n            var rowIndex = this._getRowIndex($row);\r\n            columnIndex = rowsView.getCellIndex($cell, rowIndex);\r\n            columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\r\n            if (direction) {\r\n                columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\r\n                columnIndex = this._applyColumnIndexBoundaries(columnIndex)\r\n            }\r\n            return {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n    },\r\n    _focusCell: function($cell, isDisabled) {\r\n        if (this._isCellValid($cell)) {\r\n            this._focus($cell, isDisabled);\r\n            return true\r\n        }\r\n    },\r\n    _focusEditFormCell: function($cell) {\r\n        if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\r\n            this._editorFactory.focus($cell, true)\r\n        }\r\n    },\r\n    _resetFocusedCell: function(preventScroll) {\r\n        var _this$_focusedView;\r\n        var $cell = this._getFocusedCell();\r\n        isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\r\n        this._isNeedFocus = false;\r\n        this._isNeedScroll = false;\r\n        this._focusedCellPosition = {};\r\n        clearTimeout(this._updateFocusTimeout);\r\n        null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState(preventScroll)\r\n    },\r\n    restoreFocusableElement: function(rowIndex, $event) {\r\n        var args;\r\n        var $rowElement;\r\n        var isUpArrow = isDefined(rowIndex);\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var $rowsViewElement = rowsView.element();\r\n        var columnIndex = this._focusedCellPosition.columnIndex;\r\n        var rowIndexOffset = this._dataController.getRowIndexOffset();\r\n        rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\r\n        if (!isUpArrow) {\r\n            this._editorFactory.loseFocus();\r\n            this._applyTabIndexToElement($rowsViewElement);\r\n            eventsEngine.trigger($rowsViewElement, \"focus\")\r\n        } else {\r\n            $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\r\n            args = this._fireFocusedRowChanging($event, $rowElement);\r\n            if (!args.cancel && args.rowIndexChanged) {\r\n                rowIndex = args.newRowIndex\r\n            }\r\n        }\r\n        if (!isUpArrow || !args.cancel) {\r\n            this.setFocusedCellPosition(rowIndex, columnIndex)\r\n        }\r\n        isUpArrow && this._updateFocus()\r\n    },\r\n    _getNewPositionByCode: function(cellPosition, elementType, code) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var rowIndex = cellPosition.rowIndex;\r\n        var visibleColumnsCount;\r\n        if (void 0 === cellPosition.rowIndex && \"next\" === code) {\r\n            return {\r\n                columnIndex: 0,\r\n                rowIndex: 0\r\n            }\r\n        }\r\n        switch (code) {\r\n            case \"nextInRow\":\r\n            case \"next\":\r\n                visibleColumnsCount = this._getVisibleColumnCount();\r\n                if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex++\r\n                } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\r\n                    columnIndex = 0;\r\n                    rowIndex++\r\n                }\r\n                break;\r\n            case \"previousInRow\":\r\n            case \"previous\":\r\n                if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex--\r\n                } else if (rowIndex > 0 && \"previous\" === code) {\r\n                    rowIndex--;\r\n                    visibleColumnsCount = this._getVisibleColumnCount();\r\n                    columnIndex = visibleColumnsCount - 1\r\n                }\r\n                break;\r\n            case \"upArrow\":\r\n                rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\r\n                break;\r\n            case \"downArrow\":\r\n                rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex\r\n        }\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    },\r\n    setFocusedCellPosition: function(rowIndex, columnIndex) {\r\n        this.setFocusedRowIndex(rowIndex);\r\n        this.setFocusedColumnIndex(columnIndex)\r\n    },\r\n    setFocusedRowIndex: function(rowIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.rowIndex = rowIndex\r\n    },\r\n    setFocusedColumnIndex: function(columnIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.columnIndex = columnIndex\r\n    },\r\n    getRowIndex: function() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1\r\n    },\r\n    getColumnIndex: function() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1\r\n    },\r\n    getVisibleRowIndex: function() {\r\n        var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\r\n        if (!isDefined(rowIndex) || rowIndex < 0) {\r\n            return -1\r\n        }\r\n        return rowIndex - this._dataController.getRowIndexOffset()\r\n    },\r\n    getVisibleColumnIndex: function() {\r\n        var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\r\n        if (!isDefined(columnIndex)) {\r\n            return -1\r\n        }\r\n        return columnIndex - this._columnsController.getColumnIndexOffset()\r\n    },\r\n    _applyColumnIndexBoundaries: function(columnIndex) {\r\n        var visibleColumnsCount = this._getVisibleColumnCount();\r\n        if (columnIndex < 0) {\r\n            columnIndex = 0\r\n        } else if (columnIndex >= visibleColumnsCount) {\r\n            columnIndex = visibleColumnsCount - 1\r\n        }\r\n        return columnIndex\r\n    },\r\n    _isCellByPositionValid: function(cellPosition) {\r\n        var $cell = $(this._getCell(cellPosition));\r\n        return this._isCellValid($cell)\r\n    },\r\n    _isLastRow: function(rowIndex) {\r\n        var dataController = this._dataController;\r\n        if (this._isVirtualRowRender()) {\r\n            return rowIndex >= dataController.getMaxRowIndex()\r\n        }\r\n        return rowIndex === dataController.items().length - 1\r\n    },\r\n    _isFirstValidCell: function(cellPosition) {\r\n        var isFirstValidCell = false;\r\n        if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\r\n            isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition)\r\n        }\r\n        return isFirstValidCell\r\n    },\r\n    _hasValidCellBeforePosition: function(cellPosition) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var hasValidCells = false;\r\n        while (columnIndex > 0 && !hasValidCells) {\r\n            var checkingPosition = {\r\n                columnIndex: --columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _hasValidCellAfterPosition: function(cellPosition) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var hasValidCells = false;\r\n        var visibleColumnCount = this._getVisibleColumnCount();\r\n        while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\r\n            var checkingPosition = {\r\n                columnIndex: ++columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _isLastValidCell: function(cellPosition) {\r\n        var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\r\n        var rowIndex = cellPosition.rowIndex;\r\n        var checkingPosition = {\r\n            columnIndex: nextColumnIndex,\r\n            rowIndex: rowIndex\r\n        };\r\n        var visibleRows = this._dataController.getVisibleRows();\r\n        var row = visibleRows && visibleRows[rowIndex];\r\n        var isLastRow = this._isLastRow(rowIndex);\r\n        if (!isLastRow) {\r\n            return false\r\n        }\r\n        if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\r\n            return true\r\n        }\r\n        if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\r\n            return true\r\n        }\r\n        if (this._isCellByPositionValid(checkingPosition)) {\r\n            return false\r\n        }\r\n        return this._isLastValidCell(checkingPosition)\r\n    },\r\n    _isCellValid: function($cell, isClick) {\r\n        if (isElementDefined($cell)) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var $row = $cell.parent();\r\n            var columnsController = this._columnsController;\r\n            var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\r\n            var column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n            var visibleColumnCount = this._getVisibleColumnCount();\r\n            var editingController = this._editingController;\r\n            var isMasterDetailRow = isDetailRow($row);\r\n            var isShowWhenGrouped = column && column.showWhenGrouped;\r\n            var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\r\n            if (this._isMasterDetailCell($cell)) {\r\n                return true\r\n            }\r\n            if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1)) {\r\n                var rowItems = this._dataController.items();\r\n                var visibleRowIndex = rowsView.getRowIndex($row);\r\n                var row = rowItems[visibleRowIndex];\r\n                var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\r\n                var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\r\n                var isEditing = isRowEditingInCurrentRow || isCellEditing;\r\n                if (column.command) {\r\n                    if (this._isLegacyNavigation()) {\r\n                        return !isEditing && \"expand\" === column.command\r\n                    }\r\n                    if (isCellEditing) {\r\n                        return false\r\n                    }\r\n                    if (isRowEditingInCurrentRow) {\r\n                        return \"select\" !== column.command\r\n                    }\r\n                    return !isEditing\r\n                }\r\n                if (isCellEditing && row && \"data\" !== row.rowType) {\r\n                    return false\r\n                }\r\n                return !isEditing || column.allowEditing || isClick\r\n            }\r\n        }\r\n    },\r\n    getFirstValidCellInRow: function($row, columnIndex) {\r\n        var $cells = $row.find(\"> td\");\r\n        var $cell;\r\n        var $result;\r\n        columnIndex = columnIndex || 0;\r\n        for (var i = columnIndex; i < $cells.length; ++i) {\r\n            $cell = $cells.eq(i);\r\n            if (this._isCellValid($cell)) {\r\n                $result = $cell;\r\n                break\r\n            }\r\n        }\r\n        return $result\r\n    },\r\n    _getNextCell: function(keyCode, elementType, cellPosition) {\r\n        var focusedCellPosition = cellPosition || this._focusedCellPosition;\r\n        var isRowFocusType = this.isRowFocusType();\r\n        var includeCommandCells = isRowFocusType || inArray(keyCode, [\"next\", \"previous\"]) > -1;\r\n        var $cell;\r\n        var $row;\r\n        if (this._focusedView && focusedCellPosition) {\r\n            var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\r\n            $cell = $(this._getCell(newFocusedCellPosition));\r\n            var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\r\n            if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\r\n                if (isRowFocusType) {\r\n                    $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex)\r\n                } else {\r\n                    $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition)\r\n                }\r\n            }\r\n            $row = isElementDefined($cell) && $cell.parent();\r\n            if (this._hasSkipRow($row)) {\r\n                var rowIndex = this._getRowIndex($row);\r\n                if (!this._isLastRow(rowIndex)) {\r\n                    $cell = this._getNextCell(keyCode, \"row\", {\r\n                        columnIndex: focusedCellPosition.columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n            return isElementDefined($cell) ? $cell : null\r\n        }\r\n        return null\r\n    },\r\n    _startEditing: function(eventArgs, fastEditingKey) {\r\n        var focusedCellPosition = this._focusedCellPosition;\r\n        var visibleRowIndex = this.getVisibleRowIndex();\r\n        var visibleColumnIndex = this.getVisibleColumnIndex();\r\n        var row = this._dataController.items()[visibleRowIndex];\r\n        var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n        if (this._isAllowEditing(row, column)) {\r\n            if (this._isRowEditMode()) {\r\n                this._editingController.editRow(visibleRowIndex)\r\n            } else if (focusedCellPosition) {\r\n                this._startEditCell(eventArgs, fastEditingKey)\r\n            }\r\n        }\r\n    },\r\n    _isAllowEditing: function(row, column) {\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }) && column && column.allowEditing\r\n    },\r\n    _editFocusedCell: function() {\r\n        var rowIndex = this.getVisibleRowIndex();\r\n        var colIndex = this.getVisibleColumnIndex();\r\n        return this._editingController.editCell(rowIndex, colIndex)\r\n    },\r\n    _startEditCell: function(eventArgs, fastEditingKey) {\r\n        this._fastEditingStarted = isDefined(fastEditingKey);\r\n        var editResult = this._editFocusedCell();\r\n        if (this._isFastEditingStarted()) {\r\n            if (true === editResult) {\r\n                this._editingCellHandler(eventArgs, fastEditingKey)\r\n            } else if (editResult && editResult.done) {\r\n                var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\r\n                editResult.done(() => this._editingCellHandler(eventArgs, editorValue))\r\n            }\r\n        }\r\n    },\r\n    _editingCellHandler: function(eventArgs, editorValue) {\r\n        var _$input$get$select, _$input$get;\r\n        var $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\r\n        var keyDownEvent = createEvent(eventArgs, {\r\n            type: \"keydown\",\r\n            target: $input.get(0)\r\n        });\r\n        var keyPressEvent = createEvent(eventArgs, {\r\n            type: \"keypress\",\r\n            target: $input.get(0)\r\n        });\r\n        var inputEvent = createEvent(eventArgs, {\r\n            type: \"input\",\r\n            target: $input.get(0)\r\n        });\r\n        null === (_$input$get$select = (_$input$get = $input.get(0)).select) || void 0 === _$input$get$select ? void 0 : _$input$get$select.call(_$input$get);\r\n        eventsEngine.trigger($input, keyDownEvent);\r\n        if (!keyDownEvent.isDefaultPrevented()) {\r\n            eventsEngine.trigger($input, keyPressEvent);\r\n            if (!keyPressEvent.isDefaultPrevented()) {\r\n                var timeout = browser.mozilla ? 25 : 0;\r\n                setTimeout(() => {\r\n                    $input.val(editorValue);\r\n                    var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\r\n                    eventsEngine.off($widgetContainer, \"focusout\");\r\n                    eventsEngine.one($widgetContainer, \"focusout\", (function() {\r\n                        eventsEngine.trigger($input, \"change\")\r\n                    }));\r\n                    eventsEngine.trigger($input, inputEvent)\r\n                }, timeout)\r\n            }\r\n        }\r\n    },\r\n    _fireFocusChangingEvents: function($event, $cell, fireRowEvent, isHighlighted) {\r\n        var args = {};\r\n        var cellPosition = this._getCellPosition($cell) || {};\r\n        if (this.isCellFocusType()) {\r\n            args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\r\n            if (!args.cancel) {\r\n                cellPosition.columnIndex = args.newColumnIndex;\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                isHighlighted = args.isHighlighted;\r\n                $cell = $(this._getCell(cellPosition))\r\n            }\r\n        }\r\n        if (!args.cancel && fireRowEvent && $cell) {\r\n            args = this._fireFocusedRowChanging($event, $cell.parent());\r\n            if (!args.cancel) {\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                args.isHighlighted = isHighlighted\r\n            }\r\n        }\r\n        args.$newCellElement = $(this._getCell(cellPosition));\r\n        if (!args.$newCellElement.length) {\r\n            args.$newCellElement = $cell\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanging: function($event, $cellElement, isHighlighted) {\r\n        var prevCellIndex = this.option(\"focusedColumnIndex\");\r\n        var prevRowIndex = this.option(\"focusedRowIndex\");\r\n        var cellPosition = this._getCellPosition($cellElement);\r\n        var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\r\n        var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\r\n        var args = {\r\n            cellElement: $cellElement,\r\n            prevColumnIndex: prevCellIndex,\r\n            prevRowIndex: prevRowIndex,\r\n            newColumnIndex: columnIndex,\r\n            newRowIndex: rowIndex,\r\n            rows: this._dataController.getVisibleRows(),\r\n            columns: this._columnsController.getVisibleColumns(),\r\n            event: $event,\r\n            isHighlighted: isHighlighted || false,\r\n            cancel: false\r\n        };\r\n        this._canceledCellPosition = null;\r\n        this.executeAction(\"onFocusedCellChanging\", args);\r\n        if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\r\n            args.$newCellElement = $(this._getCell({\r\n                columnIndex: args.newColumnIndex,\r\n                rowIndex: args.newRowIndex\r\n            }))\r\n        }\r\n        if (args.cancel) {\r\n            this._canceledCellPosition = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanged: function($cellElement, prevCellIndex, prevRowIndex) {\r\n        var dataController = this._dataController;\r\n        var columnIndex = this.getView(\"rowsView\").getCellIndex($cellElement);\r\n        var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\r\n        var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n        var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\r\n        var row = dataController.items()[localRowIndex];\r\n        if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\r\n            this.executeAction(\"onFocusedCellChanged\", {\r\n                cellElement: $cellElement,\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                row: row,\r\n                column: this._columnsController.getVisibleColumns()[columnIndex]\r\n            })\r\n        }\r\n    },\r\n    _fireFocusedRowChanging: function(eventArgs, $newFocusedRow) {\r\n        var newRowIndex = this._getRowIndex($newFocusedRow);\r\n        var dataController = this._dataController;\r\n        var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n        var loadingOperationTypes = dataController.loadingOperationTypes();\r\n        var args = {\r\n            rowElement: $newFocusedRow,\r\n            prevRowIndex: prevFocusedRowIndex,\r\n            newRowIndex: newRowIndex,\r\n            event: eventArgs,\r\n            rows: dataController.getVisibleRows(),\r\n            cancel: false\r\n        };\r\n        if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\r\n            args.cancel = true;\r\n            return args\r\n        }\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.executeAction(\"onFocusedRowChanging\", args);\r\n            if (!args.cancel && args.newRowIndex !== newRowIndex) {\r\n                args.resetFocusedRow = args.newRowIndex < 0;\r\n                if (!args.resetFocusedRow) {\r\n                    this.setFocusedRowIndex(args.newRowIndex)\r\n                }\r\n                args.rowIndexChanged = true\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedRowChanged: function($rowElement) {\r\n        var row;\r\n        var focusedRowKey = this.option(\"focusedRowKey\");\r\n        var focusController = this.getController(\"focus\");\r\n        var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            if (focusedRowIndex >= 0) {\r\n                var dataController = this._dataController;\r\n                row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()]\r\n            }\r\n            this.executeAction(\"onFocusedRowChanged\", {\r\n                rowElement: $rowElement,\r\n                rowIndex: focusedRowIndex,\r\n                row: row\r\n            })\r\n        }\r\n    },\r\n    _isEventInCurrentGrid: function(event) {\r\n        return gridCoreUtils.isElementInCurrentGrid(this, $(event.target))\r\n    },\r\n    _isRowEditMode: function() {\r\n        var editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM\r\n    },\r\n    _isCellEditMode: function() {\r\n        var editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH\r\n    },\r\n    _isFastEditingAllowed: function() {\r\n        return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\")\r\n    },\r\n    _getInteractiveElement: function($cell, isLast) {\r\n        var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\r\n        return isLast ? $focusedElement.last() : $focusedElement.first()\r\n    },\r\n    _applyTabIndexToElement: function($element) {\r\n        var tabIndex = this.option(\"tabIndex\") || 0;\r\n        $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0)\r\n    },\r\n    _getCell: function(cellPosition) {\r\n        if (this._focusedView && cellPosition) {\r\n            var rowIndexOffset = this._dataController.getRowIndexOffset();\r\n            var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\r\n            var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\r\n            var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\r\n            var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\r\n            return this._focusedView.getCell({\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            })\r\n        }\r\n    },\r\n    _getRowIndex: function($row) {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        var rowIndex = rowsView.getRowIndex($row);\r\n        if (rowIndex >= 0) {\r\n            rowIndex += this._dataController.getRowIndexOffset()\r\n        }\r\n        return rowIndex\r\n    },\r\n    _hasSkipRow: function($row) {\r\n        var row = $row && $row.get(0);\r\n        return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)))\r\n    },\r\n    _allowEditingOnEnterKey: function() {\r\n        return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\")\r\n    },\r\n    _isLegacyNavigation: function() {\r\n        return this.option(\"useLegacyKeyboardNavigation\")\r\n    },\r\n    _getDirectionCodeByKey: function(key) {\r\n        var directionCode;\r\n        switch (key) {\r\n            case \"upArrow\":\r\n                directionCode = \"prevRow\";\r\n                break;\r\n            case \"downArrow\":\r\n                directionCode = \"nextRow\";\r\n                break;\r\n            case \"leftArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\r\n                break;\r\n            case \"rightArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\"\r\n        }\r\n        return directionCode\r\n    },\r\n    _isVirtualScrolling: function() {\r\n        var scrollingMode = this.option(\"scrolling.mode\");\r\n        return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode\r\n    },\r\n    _isVirtualRowRender: function() {\r\n        return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this)\r\n    },\r\n    _isVirtualColumnRender: function() {\r\n        return \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n    },\r\n    _scrollBy: function(left, top, rowIndex, $event) {\r\n        var that = this;\r\n        var scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (that._focusedCellPosition) {\r\n            scrollable.on(\"scroll\", (function scrollHandler() {\r\n                scrollable.off(\"scroll\", scrollHandler);\r\n                setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event))\r\n            }))\r\n        }\r\n        return scrollable.scrollBy({\r\n            left: left,\r\n            top: top\r\n        })\r\n    },\r\n    _isInsideEditForm: function(element) {\r\n        return $(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0\r\n    },\r\n    _isMasterDetailCell: function(element) {\r\n        var $masterDetailCell = $(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\r\n        var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\r\n        return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element())\r\n    },\r\n    _processNextCellInMasterDetail: function($nextCell) {\r\n        if (!this._isInsideEditForm($nextCell) && $nextCell) {\r\n            this._applyTabIndexToElement($nextCell)\r\n        }\r\n    },\r\n    _handleTabKeyOnMasterDetailCell: function(target, direction) {\r\n        if (this._isMasterDetailCell(target)) {\r\n            this._updateFocusedCellPosition($(target), direction);\r\n            var $nextCell = this._getNextCell(direction, \"row\");\r\n            this._processNextCellInMasterDetail($nextCell);\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _getElementType: function(target) {\r\n        return $(target).is(\"tr\") ? \"row\" : \"cell\"\r\n    },\r\n    _isFastEditingStarted: function() {\r\n        return this._isFastEditingAllowed() && this._fastEditingStarted\r\n    },\r\n    _getVisibleColumnCount: function() {\r\n        return this._columnsController.getVisibleColumns(null, true).length\r\n    },\r\n    _isCellInRow: function(cellPosition, includeCommandCells) {\r\n        var columnIndex = cellPosition.columnIndex;\r\n        var visibleColumnsCount = this._getVisibleColumnCount();\r\n        return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1\r\n    },\r\n    _getCellElementFromTarget: function(target) {\r\n        var elementType = this._getElementType(target);\r\n        var $targetElement = $(target);\r\n        var $cell;\r\n        if (\"cell\" === elementType) {\r\n            $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"))\r\n        } else {\r\n            $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first()\r\n        }\r\n        return $cell\r\n    },\r\n    _getRowsViewElement: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        return rowsView && rowsView.element()\r\n    },\r\n    isKeyboardEnabled: function() {\r\n        return this.option(\"keyboardNavigation.enabled\")\r\n    },\r\n    _processCanceledEditCellPosition: function(rowIndex, columnIndex) {\r\n        if (this._canceledCellPosition) {\r\n            var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\r\n            this._canceledCellPosition = null;\r\n            return isCanceled\r\n        }\r\n    }\r\n});\r\nexport var keyboardNavigationModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            useLegacyKeyboardNavigation: false,\r\n            keyboardNavigation: {\r\n                enabled: true,\r\n                enterKeyAction: \"startEdit\",\r\n                enterKeyDirection: \"none\",\r\n                editOnKeyPress: false\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        keyboardNavigation: KeyboardNavigationController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _rowClick: function(e) {\r\n                    var editRowIndex = this.getController(\"editing\").getEditRowIndex();\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    if (editRowIndex === e.rowIndex) {\r\n                        keyboardController.setCellFocusType()\r\n                    }\r\n                    var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\r\n                    if (needTriggerPointerEventHandler) {\r\n                        this._triggerPointerDownEventHandler(e)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _triggerPointerDownEventHandler: function(e) {\r\n                    var originalEvent = e.event.originalEvent;\r\n                    if (originalEvent) {\r\n                        var keyboardController = this.getController(\"keyboardNavigation\");\r\n                        var $cell = $(originalEvent.target);\r\n                        var columnIndex = this.getCellIndex($cell);\r\n                        var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\r\n                        var row = this.getController(\"data\").items()[e.rowIndex];\r\n                        if (keyboardController._isAllowEditing(row, column)) {\r\n                            var eventArgs = createEvent(originalEvent, {\r\n                                currentTarget: originalEvent.target\r\n                            });\r\n                            keyboardController._pointerEventHandler(eventArgs)\r\n                        }\r\n                    }\r\n                },\r\n                renderFocusState: function(preventScroll) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var $rowsViewElement = this.element();\r\n                    if ($rowsViewElement && !focused($rowsViewElement)) {\r\n                        $rowsViewElement.attr(\"tabindex\", null)\r\n                    }\r\n                    var rowIndex = keyboardController.getVisibleRowIndex();\r\n                    if (!isDefined(rowIndex) || rowIndex < 0) {\r\n                        rowIndex = 0\r\n                    }\r\n                    var cellElements = this.getCellElements(rowIndex);\r\n                    if (keyboardController.isKeyboardEnabled() && cellElements.length) {\r\n                        this.updateFocusElementTabIndex(cellElements, preventScroll)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex: function(cellElements) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var $row = cellElements.eq(0).parent();\r\n                    if (isGroupRow($row)) {\r\n                        keyboardController._applyTabIndexToElement($row)\r\n                    } else {\r\n                        var columnIndex = keyboardController.getColumnIndex();\r\n                        if (!isDefined(columnIndex) || columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        this._updateFocusedCellTabIndex(cellElements, columnIndex)\r\n                    }\r\n                },\r\n                _updateFocusedCellTabIndex: function(cellElements, columnIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var cellElementsLength = cellElements ? cellElements.length : -1;\r\n                    var updateCellTabIndex = function($cell) {\r\n                        var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\r\n                        var isValidCell = keyboardController._isCellValid($cell);\r\n                        if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {\r\n                            keyboardController._applyTabIndexToElement($cell);\r\n                            keyboardController.setCellFocusType();\r\n                            return true\r\n                        }\r\n                    };\r\n                    var $cell = cellElements.filter(\"[aria-colindex='\".concat(columnIndex + 1, \"']\"));\r\n                    if ($cell.length) {\r\n                        updateCellTabIndex($cell)\r\n                    } else {\r\n                        if (cellElementsLength <= columnIndex) {\r\n                            columnIndex = cellElementsLength - 1\r\n                        }\r\n                        for (var i = columnIndex; i < cellElementsLength; ++i) {\r\n                            if (updateCellTabIndex($(cellElements[i]))) {\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                renderDelayedTemplates: function(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change)\r\n                },\r\n                _renderFocusByChange(change) {\r\n                    if (!change || !change.repaintChangesOnly) {\r\n                        var preventScroll = shouldPreventScroll(this);\r\n                        this.renderFocusState(preventScroll)\r\n                    }\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change)\r\n                },\r\n                _editCellPrepared: function($cell) {\r\n                    var editorInstance = this._getEditorInstance($cell);\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\r\n                    if (editorInstance && isEditingNavigationMode) {\r\n                        this._handleEditingNavigationMode(editorInstance)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditingNavigationMode: function(editorInstance) {\r\n                    [\"downArrow\", \"upArrow\"].forEach((function(keyName) {\r\n                        var originalKeyHandler = editorInstance._supportedKeys()[keyName];\r\n                        editorInstance.registerKeyHandler(keyName, e => {\r\n                            var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\r\n                            if (isDropDownOpened) {\r\n                                return originalKeyHandler && originalKeyHandler.call(editorInstance, e)\r\n                            }\r\n                        })\r\n                    }));\r\n                    editorInstance.registerKeyHandler(\"leftArrow\", noop);\r\n                    editorInstance.registerKeyHandler(\"rightArrow\", noop);\r\n                    var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\r\n                    if (isDateBoxWithMask) {\r\n                        editorInstance.registerKeyHandler(\"enter\", noop)\r\n                    }\r\n                },\r\n                _getEditorInstance: function($cell) {\r\n                    var $editor = $cell.find(\".dx-texteditor\").eq(0);\r\n                    return gridCoreUtils.getWidgetInstance($editor)\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            editing: {\r\n                editCell: function(rowIndex, columnIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\r\n                        return false\r\n                    }\r\n                    var isCellEditing = this.callBase(rowIndex, columnIndex);\r\n                    if (isCellEditing) {\r\n                        keyboardController.setupFocusedView()\r\n                    }\r\n                    return isCellEditing\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var visibleColumnIndex = keyboardController.getVisibleColumnIndex();\r\n                    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n                    if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\r\n                        keyboardController._resetFocusedCell()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                addRow: function(parentKey) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    keyboardController.setupFocusedView();\r\n                    keyboardController.setCellFocusType();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getFocusedCellInRow: function(rowIndex) {\r\n                    var keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n                    var $cell = this.callBase(rowIndex);\r\n                    if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\r\n                        var $focusedCell = keyboardNavigationController._getFocusedCell();\r\n                        if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\r\n                            $cell = $focusedCell\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _processCanceledEditingCell: function() {\r\n                    this.closeEditCell().done(() => {\r\n                        var keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                        keyboardNavigation._updateFocus()\r\n                    })\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._keyboardNavigationController = this.getController(\"keyboardNavigation\")\r\n                },\r\n                closeEditCell: function() {\r\n                    var keyboardNavigation = this._keyboardNavigationController;\r\n                    keyboardNavigation._fastEditingStarted = false;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    keyboardNavigation._updateFocus();\r\n                    return result\r\n                },\r\n                _delayedInputFocus: function() {\r\n                    this._keyboardNavigationController._isNeedScroll = true;\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditingStart: function() {\r\n                    var keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                    var cancel = this.callBase.apply(this, arguments);\r\n                    if (cancel && !keyboardNavigation._isNeedFocus) {\r\n                        var $cell = keyboardNavigation._getFocusedCell();\r\n                        keyboardNavigation._focus($cell, true)\r\n                    }\r\n                    return cancel\r\n                }\r\n            },\r\n            data: {\r\n                _correctRowIndices: function(getRowIndexCorrection) {\r\n                    var that = this;\r\n                    var keyboardNavigationController = that.getController(\"keyboardNavigation\");\r\n                    var editorFactory = that.getController(\"editorFactory\");\r\n                    var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\r\n                    that.callBase.apply(that, arguments);\r\n                    if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\r\n                        var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\r\n                        if (focusedRowIndexCorrection) {\r\n                            focusedCellPosition.rowIndex += focusedRowIndexCorrection;\r\n                            editorFactory.refocus()\r\n                        }\r\n                    }\r\n                },\r\n                getMaxRowIndex: function() {\r\n                    var result = this.items().length - 1;\r\n                    var virtualItemsCount = this.virtualItemsCount();\r\n                    if (virtualItemsCount) {\r\n                        result += virtualItemsCount.begin + virtualItemsCount.end\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            adaptiveColumns: {\r\n                _showHiddenCellsInView: function(_ref) {\r\n                    var {\r\n                        viewName: viewName,\r\n                        $cells: $cells,\r\n                        isCommandColumn: isCommandColumn\r\n                    } = _ref;\r\n                    this.callBase.apply(this, arguments);\r\n                    viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {\r\n                        var $cell = $(cellElement);\r\n                        isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0)\r\n                    })\r\n                },\r\n                _hideVisibleCellInView: function(_ref2) {\r\n                    var {\r\n                        viewName: viewName,\r\n                        $cell: $cell,\r\n                        isCommandColumn: isCommandColumn\r\n                    } = _ref2;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\r\n                        $cell.removeAttr(\"tabindex\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}