{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/translators/translator2d.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { Range } from \"./range\";\nimport categoryTranslator from \"./category_translator\";\nimport intervalTranslator from \"./interval_translator\";\nimport datetimeTranslator from \"./datetime_translator\";\nimport logarithmicTranslator from \"./logarithmic_translator\";\nimport { getLogExt as getLog, getPower, raiseToExt, getCategoriesInfo } from \"../core/utils\";\nimport { isDefined, isDate } from \"../../core/utils/type\";\nimport { adjust } from \"../../core/utils/math\";\nimport dateUtils from \"../../core/utils/date\";\nvar _abs = Math.abs;\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\nvar dummyTranslator = {\n  to(value) {\n    var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\n    return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord;\n  },\n\n  from(value) {\n    return value - this._canvasOptions.startPoint;\n  }\n\n};\n\nvar validateCanvas = function (canvas) {\n  each(CANVAS_PROP, function (_, prop) {\n    canvas[prop] = parseInt(canvas[prop]) || 0;\n  });\n  return canvas;\n};\n\nvar makeCategoriesToPoints = function (categories) {\n  var categoriesToPoints = {};\n  categories.forEach(function (item, i) {\n    categoriesToPoints[item.valueOf()] = i;\n  });\n  return categoriesToPoints;\n};\n\nvar validateBusinessRange = function (businessRange) {\n  if (!(businessRange instanceof Range)) {\n    businessRange = new Range(businessRange);\n  }\n\n  function validate(valueSelector, baseValueSelector) {\n    if (!isDefined(businessRange[valueSelector]) && isDefined(businessRange[baseValueSelector])) {\n      businessRange[valueSelector] = businessRange[baseValueSelector];\n    }\n  }\n\n  validate(\"minVisible\", \"min\");\n  validate(\"maxVisible\", \"max\");\n  return businessRange;\n};\n\nfunction prepareBreaks(breaks, range) {\n  var transform = \"logarithmic\" === range.axisType ? function (value) {\n    return getLog(value, range.base);\n  } : function (value) {\n    return value;\n  };\n  var array = [];\n  var br;\n  var transformFrom;\n  var transformTo;\n  var i;\n  var length = breaks.length;\n  var sum = 0;\n\n  for (i = 0; i < length; i++) {\n    br = breaks[i];\n    transformFrom = transform(br.from);\n    transformTo = transform(br.to);\n    sum += transformTo - transformFrom;\n    array.push({\n      trFrom: transformFrom,\n      trTo: transformTo,\n      from: br.from,\n      to: br.to,\n      length: sum,\n      cumulativeWidth: br.cumulativeWidth\n    });\n  }\n\n  return array;\n}\n\nfunction getCanvasBounds(range) {\n  var min = range.min;\n  var max = range.max;\n  var minVisible = range.minVisible;\n  var maxVisible = range.maxVisible;\n  var isLogarithmic = \"logarithmic\" === range.axisType;\n\n  if (isLogarithmic) {\n    maxVisible = getLog(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\n    minVisible = getLog(minVisible, range.base, range.allowNegatives, range.linearThreshold);\n    min = getLog(min, range.base, range.allowNegatives, range.linearThreshold);\n    max = getLog(max, range.base, range.allowNegatives, range.linearThreshold);\n  }\n\n  return {\n    base: range.base,\n    rangeMin: min,\n    rangeMax: max,\n    rangeMinVisible: minVisible,\n    rangeMaxVisible: maxVisible\n  };\n}\n\nfunction getCheckingMethodsAboutBreaks(inverted) {\n  return {\n    isStartSide: !inverted ? function (pos, breaks, start, end) {\n      return pos < breaks[0][start];\n    } : function (pos, breaks, start, end) {\n      return pos <= breaks[breaks.length - 1][end];\n    },\n    isEndSide: !inverted ? function (pos, breaks, start, end) {\n      return pos >= breaks[breaks.length - 1][end];\n    } : function (pos, breaks, start, end) {\n      return pos > breaks[0][start];\n    },\n    isInBreak: !inverted ? function (pos, br, start, end) {\n      return pos >= br[start] && pos < br[end];\n    } : function (pos, br, start, end) {\n      return pos > br[end] && pos <= br[start];\n    },\n    isBetweenBreaks: !inverted ? function (pos, br, prevBreak, start, end) {\n      return pos < br[start] && pos >= prevBreak[end];\n    } : function (pos, br, prevBreak, start, end) {\n      return pos >= br[end] && pos < prevBreak[start];\n    },\n    getLength: !inverted ? function (br) {\n      return br.length;\n    } : function (br, lastBreak) {\n      return lastBreak.length - br.length;\n    },\n    getBreaksSize: !inverted ? function (br) {\n      return br.cumulativeWidth;\n    } : function (br, lastBreak) {\n      return lastBreak.cumulativeWidth - br.cumulativeWidth;\n    }\n  };\n}\n\nvar _Translator2d = function (businessRange, canvas, options) {\n  this.update(businessRange, canvas, options);\n};\n\n_Translator2d.prototype = {\n  constructor: _Translator2d,\n  reinit: function () {\n    var that = this;\n    var options = that._options;\n    var range = that._businessRange;\n    var categories = range.categories || [];\n    var script = {};\n\n    var canvasOptions = that._prepareCanvasOptions();\n\n    var visibleCategories = getCategoriesInfo(categories, range.minVisible, range.maxVisible).categories;\n    var categoriesLength = visibleCategories.length;\n\n    if (range.isEmpty()) {\n      script = dummyTranslator;\n    } else {\n      switch (range.axisType) {\n        case \"logarithmic\":\n          script = logarithmicTranslator;\n          break;\n\n        case \"semidiscrete\":\n          script = intervalTranslator;\n          canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (dateUtils.addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\n          break;\n\n        case \"discrete\":\n          script = categoryTranslator;\n          that._categories = categories;\n          canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\n          that._categoriesToPoints = makeCategoriesToPoints(categories);\n\n          if (categoriesLength) {\n            canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\n            that.visibleCategories = visibleCategories;\n          }\n\n          break;\n\n        default:\n          if (\"datetime\" === range.dataType) {\n            script = datetimeTranslator;\n          }\n\n      }\n    }\n\n    (that._oldMethods || []).forEach(function (methodName) {\n      delete that[methodName];\n    });\n    that._oldMethods = Object.keys(script);\n    extend(that, script);\n    that._conversionValue = options.conversionValue ? function (value) {\n      return value;\n    } : function (value) {\n      return Math.round(value);\n    };\n    that.sc = {};\n    that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\n\n    that._translateBreaks();\n\n    that._calculateSpecialValues();\n  },\n  _translateBreaks: function () {\n    var breaks = this._breaks;\n    var size = this._options.breaksSize;\n    var i;\n    var b;\n    var end;\n    var length;\n\n    if (void 0 === breaks) {\n      return;\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      b = breaks[i];\n      end = this.translate(b.to);\n      b.end = end;\n      b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end;\n    }\n  },\n  _checkValueAboutBreaks: function (breaks, pos, start, end, methods) {\n    var i;\n    var length;\n    var prop = {\n      length: 0,\n      breaksSize: void 0,\n      inBreak: false\n    };\n    var br;\n    var prevBreak;\n    var lastBreak = breaks[breaks.length - 1];\n\n    if (methods.isStartSide(pos, breaks, start, end)) {\n      return prop;\n    } else if (methods.isEndSide(pos, breaks, start, end)) {\n      return {\n        length: lastBreak.length,\n        breaksSize: lastBreak.cumulativeWidth,\n        inBreak: false\n      };\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      br = breaks[i];\n      prevBreak = breaks[i - 1];\n\n      if (methods.isInBreak(pos, br, start, end)) {\n        prop.inBreak = true;\n        prop.break = br;\n        break;\n      }\n\n      if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\n        prop = {\n          length: methods.getLength(prevBreak, lastBreak),\n          breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\n          inBreak: false\n        };\n        break;\n      }\n    }\n\n    return prop;\n  },\n  isInverted: function () {\n    return !(this._options.isHorizontal ^ this._businessRange.invert);\n  },\n  _getDiscreteInterval: function (categoriesLength, canvasOptions) {\n    var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\n    return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength;\n  },\n\n  _prepareCanvasOptions() {\n    var businessRange = this._businessRange;\n    var canvasOptions = this._canvasOptions = getCanvasBounds(businessRange);\n    var canvas = this._canvas;\n    var breaks = this._breaks;\n    var length;\n    canvasOptions.startPadding = canvas.startPadding || 0;\n    canvasOptions.endPadding = canvas.endPadding || 0;\n\n    if (this._options.isHorizontal) {\n      canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\n      length = canvas.width;\n      canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\n      canvasOptions.invert = businessRange.invert;\n    } else {\n      canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\n      length = canvas.height;\n      canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\n      canvasOptions.invert = !businessRange.invert;\n    }\n\n    this.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\n    canvasOptions.rangeDoubleError = Math.pow(10, getPower(canvasOptions.rangeMax - canvasOptions.rangeMin) - getPower(length) - 2);\n    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\n\n    if (void 0 !== breaks) {\n      canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length);\n    }\n\n    return canvasOptions;\n  },\n\n  updateCanvas: function (canvas) {\n    this._canvas = validateCanvas(canvas);\n    this.reinit();\n  },\n  updateBusinessRange: function (businessRange) {\n    var breaks = businessRange.breaks || [];\n    this._userBreaks = businessRange.userBreaks || [];\n    this._businessRange = validateBusinessRange(businessRange);\n    this._breaks = breaks.length ? prepareBreaks(breaks, this._businessRange) : void 0;\n    this.reinit();\n  },\n  update: function (businessRange, canvas, options) {\n    this._options = extend(this._options || {}, options);\n    this._canvas = validateCanvas(canvas);\n    this.updateBusinessRange(businessRange);\n  },\n  getBusinessRange: function () {\n    return this._businessRange;\n  },\n  getEventScale: function (zoomEvent) {\n    return zoomEvent.deltaScale || 1;\n  },\n  getCanvasVisibleArea: function () {\n    return {\n      min: this._canvasOptions.startPoint,\n      max: this._canvasOptions.endPoint\n    };\n  },\n  _calculateSpecialValues: function () {\n    var canvasOptions = this._canvasOptions;\n    var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\n    var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\n    var range = this._businessRange;\n    var minVisible = range.minVisible;\n    var maxVisible = range.maxVisible;\n    var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\n    var canvas_position_default;\n\n    if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\n      canvas_position_default = this.translate(0, 1);\n    }\n\n    if (!isDefined(canvas_position_default)) {\n      var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\n\n      if (this._options.isHorizontal) {\n        canvas_position_default = invert ? endPoint : startPoint;\n      } else {\n        canvas_position_default = invert ? startPoint : endPoint;\n      }\n    }\n\n    this.sc = {\n      canvas_position_default: canvas_position_default,\n      canvas_position_left: startPoint,\n      canvas_position_top: startPoint,\n      canvas_position_center: canvas_position_center_middle,\n      canvas_position_middle: canvas_position_center_middle,\n      canvas_position_right: endPoint,\n      canvas_position_bottom: endPoint,\n      canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\n      canvas_position_end: canvasOptions.invert ? startPoint : endPoint\n    };\n  },\n\n  translateSpecialCase(value) {\n    return this.sc[value];\n  },\n\n  _calculateProjection: function (distance) {\n    var canvasOptions = this._canvasOptions;\n    return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance;\n  },\n  _calculateUnProjection: function (distance) {\n    var canvasOptions = this._canvasOptions;\n    \"datetime\" === this._businessRange.dataType && (distance = Math.round(distance));\n    return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance;\n  },\n  getMinBarSize: function (minBarSize) {\n    var visibleArea = this.getCanvasVisibleArea();\n    var minValue = this.from(visibleArea.min + minBarSize);\n    return _abs(this.from(visibleArea.min) - (!isDefined(minValue) ? this.from(visibleArea.max) : minValue));\n  },\n  checkMinBarSize: function (value, minShownValue, stackValue) {\n    return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value;\n  },\n\n  translate(bp, direction) {\n    var specialValue = this.translateSpecialCase(bp);\n\n    if (isDefined(specialValue)) {\n      return Math.round(specialValue);\n    }\n\n    if (isNaN(bp)) {\n      return null;\n    }\n\n    return this.to(bp, direction);\n  },\n\n  getInterval: function (interval) {\n    var _interval;\n\n    var canvasOptions = this._canvasOptions;\n    interval = null !== (_interval = interval) && void 0 !== _interval ? _interval : this._businessRange.interval;\n\n    if (interval) {\n      return Math.round(canvasOptions.ratioOfCanvasRange * interval);\n    }\n\n    return Math.round(canvasOptions.endPoint - canvasOptions.startPoint);\n  },\n\n  zoom(translate, scale, wholeRange) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\n      return this.zoomZeroLengthRange(translate, scale);\n    }\n\n    var startPoint = canvasOptions.startPoint;\n    var endPoint = canvasOptions.endPoint;\n    var isInverted = this.isInverted();\n    var newStart = (startPoint + translate) / scale;\n    var newEnd = (endPoint + translate) / scale;\n    wholeRange = wholeRange || {};\n    var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\n    var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\n    var min;\n    var max;\n\n    if (minPoint > newStart) {\n      newEnd -= newStart - minPoint;\n      newStart = minPoint;\n      min = isInverted ? wholeRange.endValue : wholeRange.startValue;\n    }\n\n    if (maxPoint < newEnd) {\n      newStart -= newEnd - maxPoint;\n      newEnd = maxPoint;\n      max = isInverted ? wholeRange.startValue : wholeRange.endValue;\n    }\n\n    if (maxPoint - minPoint < newEnd - newStart) {\n      newStart = minPoint;\n      newEnd = maxPoint;\n    }\n\n    translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\n    scale = (startPoint + translate) / newStart || 1;\n    min = isDefined(min) ? min : adjust(this.from(newStart, 1));\n    max = isDefined(max) ? max : adjust(this.from(newEnd, -1));\n\n    if (scale <= 1) {\n      min = this._correctValueAboutBreaks(min, 1 === scale ? translate : -1);\n      max = this._correctValueAboutBreaks(max, 1 === scale ? translate : 1);\n    }\n\n    if (min > max) {\n      min = min > wholeRange.endValue ? wholeRange.endValue : min;\n      max = max < wholeRange.startValue ? wholeRange.startValue : max;\n    } else {\n      min = min < wholeRange.startValue ? wholeRange.startValue : min;\n      max = max > wholeRange.endValue ? wholeRange.endValue : max;\n    }\n\n    return {\n      min: min,\n      max: max,\n      translate: adjust(translate),\n      scale: adjust(scale)\n    };\n  },\n\n  _correctValueAboutBreaks(value, direction) {\n    var br = this._userBreaks.filter(br => value >= br.from && value <= br.to);\n\n    if (br.length) {\n      return direction > 0 ? br[0].to : br[0].from;\n    } else {\n      return value;\n    }\n  },\n\n  zoomZeroLengthRange(translate, scale) {\n    var canvasOptions = this._canvasOptions;\n    var min = canvasOptions.rangeMin;\n    var max = canvasOptions.rangeMax;\n    var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\n    var isDateTime = isDate(max) || isDate(min);\n    var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\n    var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\n    var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\n    newMin = isLogarithmic ? adjust(raiseToExt(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\n    newMax = isLogarithmic ? adjust(raiseToExt(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\n    return {\n      min: newMin,\n      max: newMax,\n      translate: translate,\n      scale: scale\n    };\n  },\n\n  getMinScale: function (zoom) {\n    var {\n      dataType: dataType,\n      interval: interval\n    } = this._businessRange;\n\n    if (\"datetime\" === dataType && 1 === interval) {\n      return this.getDateTimeMinScale(zoom);\n    }\n\n    return zoom ? 1.1 : .9;\n  },\n\n  getDateTimeMinScale(zoom) {\n    var canvasOptions = this._canvasOptions;\n    var length = canvasOptions.canvasLength / canvasOptions.ratioOfCanvasRange;\n    length += (parseInt(.1 * length) || 1) * (zoom ? -2 : 2);\n    return canvasOptions.canvasLength / (Math.max(length, 1) * canvasOptions.ratioOfCanvasRange);\n  },\n\n  getScale: function (val1, val2) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\n      return 1;\n    }\n\n    val1 = isDefined(val1) ? this.fromValue(val1) : canvasOptions.rangeMin;\n    val2 = isDefined(val2) ? this.fromValue(val2) : canvasOptions.rangeMax;\n    return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2);\n  },\n  isValid: function (value) {\n    var co = this._canvasOptions;\n    value = this.fromValue(value);\n    return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax;\n  },\n  getCorrectValue: function (value, direction) {\n    var breaks = this._breaks;\n    var prop;\n    value = this.fromValue(value);\n\n    if (this._breaks) {\n      prop = this._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", this._checkingMethodsAboutBreaks[0]);\n\n      if (true === prop.inBreak) {\n        return this.toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom);\n      }\n    }\n\n    return this.toValue(value);\n  },\n  to: function (bp, direction) {\n    var range = this.getBusinessRange();\n\n    if (isDefined(range.maxVisible) && isDefined(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\n      if (!isDefined(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\n        return null;\n      }\n\n      return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\");\n    }\n\n    bp = this.fromValue(bp);\n    var canvasOptions = this._canvasOptions;\n    var breaks = this._breaks;\n    var prop = {\n      length: 0\n    };\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = this._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", this._checkingMethodsAboutBreaks[0]);\n      commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return prop.break.start;\n      } else if (direction < 0) {\n        return prop.break.end;\n      } else {\n        return null;\n      }\n    }\n\n    return this._conversionValue(this._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize));\n  },\n  from: function (pos, direction) {\n    var breaks = this._breaks;\n    var prop = {\n      length: 0\n    };\n    var canvasOptions = this._canvasOptions;\n    var startPoint = canvasOptions.startPoint;\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = this._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", this._checkingMethodsAboutBreaks[1]);\n      commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return this.toValue(prop.break.trTo);\n      } else if (direction < 0) {\n        return this.toValue(prop.break.trFrom);\n      } else {\n        return null;\n      }\n    }\n\n    return this.toValue(this._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length));\n  },\n  isValueProlonged: false,\n  getRange: function () {\n    return [this.toValue(this._canvasOptions.rangeMin), this.toValue(this._canvasOptions.rangeMax)];\n  },\n  getScreenRange: function () {\n    return [this._canvasOptions.startPoint, this._canvasOptions.endPoint];\n  },\n  add: function (value, diff, dir) {\n    return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir);\n  },\n  _add: function (value, diff, coeff) {\n    return this.toValue(this.fromValue(value) + diff * coeff);\n  },\n  fromValue: function (value) {\n    return null !== value ? Number(value) : null;\n  },\n  toValue: function (value) {\n    return null !== value ? Number(value) : null;\n  },\n\n  ratioOfCanvasRange() {\n    return this._canvasOptions.ratioOfCanvasRange;\n  },\n\n  convert: value => value,\n\n  getRangeByMinZoomValue(minZoom, visualRange) {\n    if (visualRange.minVisible + minZoom <= this._businessRange.max) {\n      return [visualRange.minVisible, visualRange.minVisible + minZoom];\n    } else {\n      return [visualRange.maxVisible - minZoom, visualRange.maxVisible];\n    }\n  }\n\n};\nexport { _Translator2d as Translator2D };","map":{"version":3,"sources":["/Users/rahulsharma/node_modules/devextreme/esm/viz/translators/translator2d.js"],"names":["extend","each","Range","categoryTranslator","intervalTranslator","datetimeTranslator","logarithmicTranslator","getLogExt","getLog","getPower","raiseToExt","getCategoriesInfo","isDefined","isDate","adjust","dateUtils","_abs","Math","abs","CANVAS_PROP","dummyTranslator","to","value","coord","_canvasOptions","startPoint","_options","conversionValue","round","endPoint","from","validateCanvas","canvas","_","prop","parseInt","makeCategoriesToPoints","categories","categoriesToPoints","forEach","item","i","valueOf","validateBusinessRange","businessRange","validate","valueSelector","baseValueSelector","prepareBreaks","breaks","range","transform","axisType","base","array","br","transformFrom","transformTo","length","sum","push","trFrom","trTo","cumulativeWidth","getCanvasBounds","min","max","minVisible","maxVisible","isLogarithmic","allowNegatives","linearThreshold","rangeMin","rangeMax","rangeMinVisible","rangeMaxVisible","getCheckingMethodsAboutBreaks","inverted","isStartSide","pos","start","end","isEndSide","isInBreak","isBetweenBreaks","prevBreak","getLength","lastBreak","getBreaksSize","_Translator2d","options","update","prototype","constructor","reinit","that","_businessRange","script","canvasOptions","_prepareCanvasOptions","visibleCategories","categoriesLength","isEmpty","ratioOfCanvasRange","canvasLength","addInterval","interval","_categories","_getDiscreteInterval","addSpiderCategory","_categoriesToPoints","startPointIndex","dataType","_oldMethods","methodName","Object","keys","_conversionValue","sc","_checkingMethodsAboutBreaks","isInverted","_translateBreaks","_calculateSpecialValues","_breaks","size","breaksSize","b","translate","gapSize","_checkValueAboutBreaks","methods","inBreak","break","isHorizontal","invert","correctedCategoriesCount","stick","_canvas","startPadding","endPadding","left","width","right","top","height","bottom","rangeDoubleError","pow","updateCanvas","updateBusinessRange","_userBreaks","userBreaks","getBusinessRange","getEventScale","zoomEvent","deltaScale","getCanvasVisibleArea","canvas_position_center_middle","canvas_position_default","canvas_position_left","canvas_position_top","canvas_position_center","canvas_position_middle","canvas_position_right","canvas_position_bottom","canvas_position_start","canvas_position_end","translateSpecialCase","_calculateProjection","distance","_calculateUnProjection","getMinBarSize","minBarSize","visibleArea","minValue","checkMinBarSize","minShownValue","stackValue","bp","direction","specialValue","isNaN","getInterval","_interval","zoom","scale","wholeRange","zoomZeroLengthRange","newStart","newEnd","minPoint","endValue","startValue","maxPoint","_correctValueAboutBreaks","filter","correction","isDateTime","newMin","newMax","Date","getMinScale","getDateTimeMinScale","getScale","val1","val2","fromValue","isValid","co","getCorrectValue","toValue","shiftZeroValue","commonBreakSize","isValueProlonged","getRange","getScreenRange","add","diff","dir","_add","coeff","Number","convert","getRangeByMinZoomValue","minZoom","visualRange","Translator2D"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/translators/translator2d.js)\r\n * Version: 21.2.3\r\n * Build date: Thu Oct 28 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    Range\r\n} from \"./range\";\r\nimport categoryTranslator from \"./category_translator\";\r\nimport intervalTranslator from \"./interval_translator\";\r\nimport datetimeTranslator from \"./datetime_translator\";\r\nimport logarithmicTranslator from \"./logarithmic_translator\";\r\nimport {\r\n    getLogExt as getLog,\r\n    getPower,\r\n    raiseToExt,\r\n    getCategoriesInfo\r\n} from \"../core/utils\";\r\nimport {\r\n    isDefined,\r\n    isDate\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    adjust\r\n} from \"../../core/utils/math\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nvar _abs = Math.abs;\r\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\r\nvar dummyTranslator = {\r\n    to(value) {\r\n        var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\r\n        return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord\r\n    },\r\n    from(value) {\r\n        return value - this._canvasOptions.startPoint\r\n    }\r\n};\r\nvar validateCanvas = function(canvas) {\r\n    each(CANVAS_PROP, (function(_, prop) {\r\n        canvas[prop] = parseInt(canvas[prop]) || 0\r\n    }));\r\n    return canvas\r\n};\r\nvar makeCategoriesToPoints = function(categories) {\r\n    var categoriesToPoints = {};\r\n    categories.forEach((function(item, i) {\r\n        categoriesToPoints[item.valueOf()] = i\r\n    }));\r\n    return categoriesToPoints\r\n};\r\nvar validateBusinessRange = function(businessRange) {\r\n    if (!(businessRange instanceof Range)) {\r\n        businessRange = new Range(businessRange)\r\n    }\r\n\r\n    function validate(valueSelector, baseValueSelector) {\r\n        if (!isDefined(businessRange[valueSelector]) && isDefined(businessRange[baseValueSelector])) {\r\n            businessRange[valueSelector] = businessRange[baseValueSelector]\r\n        }\r\n    }\r\n    validate(\"minVisible\", \"min\");\r\n    validate(\"maxVisible\", \"max\");\r\n    return businessRange\r\n};\r\n\r\nfunction prepareBreaks(breaks, range) {\r\n    var transform = \"logarithmic\" === range.axisType ? function(value) {\r\n        return getLog(value, range.base)\r\n    } : function(value) {\r\n        return value\r\n    };\r\n    var array = [];\r\n    var br;\r\n    var transformFrom;\r\n    var transformTo;\r\n    var i;\r\n    var length = breaks.length;\r\n    var sum = 0;\r\n    for (i = 0; i < length; i++) {\r\n        br = breaks[i];\r\n        transformFrom = transform(br.from);\r\n        transformTo = transform(br.to);\r\n        sum += transformTo - transformFrom;\r\n        array.push({\r\n            trFrom: transformFrom,\r\n            trTo: transformTo,\r\n            from: br.from,\r\n            to: br.to,\r\n            length: sum,\r\n            cumulativeWidth: br.cumulativeWidth\r\n        })\r\n    }\r\n    return array\r\n}\r\n\r\nfunction getCanvasBounds(range) {\r\n    var min = range.min;\r\n    var max = range.max;\r\n    var minVisible = range.minVisible;\r\n    var maxVisible = range.maxVisible;\r\n    var isLogarithmic = \"logarithmic\" === range.axisType;\r\n    if (isLogarithmic) {\r\n        maxVisible = getLog(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        minVisible = getLog(minVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        min = getLog(min, range.base, range.allowNegatives, range.linearThreshold);\r\n        max = getLog(max, range.base, range.allowNegatives, range.linearThreshold)\r\n    }\r\n    return {\r\n        base: range.base,\r\n        rangeMin: min,\r\n        rangeMax: max,\r\n        rangeMinVisible: minVisible,\r\n        rangeMaxVisible: maxVisible\r\n    }\r\n}\r\n\r\nfunction getCheckingMethodsAboutBreaks(inverted) {\r\n    return {\r\n        isStartSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos < breaks[0][start]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos <= breaks[breaks.length - 1][end]\r\n        },\r\n        isEndSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos >= breaks[breaks.length - 1][end]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos > breaks[0][start]\r\n        },\r\n        isInBreak: !inverted ? function(pos, br, start, end) {\r\n            return pos >= br[start] && pos < br[end]\r\n        } : function(pos, br, start, end) {\r\n            return pos > br[end] && pos <= br[start]\r\n        },\r\n        isBetweenBreaks: !inverted ? function(pos, br, prevBreak, start, end) {\r\n            return pos < br[start] && pos >= prevBreak[end]\r\n        } : function(pos, br, prevBreak, start, end) {\r\n            return pos >= br[end] && pos < prevBreak[start]\r\n        },\r\n        getLength: !inverted ? function(br) {\r\n            return br.length\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.length - br.length\r\n        },\r\n        getBreaksSize: !inverted ? function(br) {\r\n            return br.cumulativeWidth\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.cumulativeWidth - br.cumulativeWidth\r\n        }\r\n    }\r\n}\r\nvar _Translator2d = function(businessRange, canvas, options) {\r\n    this.update(businessRange, canvas, options)\r\n};\r\n_Translator2d.prototype = {\r\n    constructor: _Translator2d,\r\n    reinit: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var range = that._businessRange;\r\n        var categories = range.categories || [];\r\n        var script = {};\r\n        var canvasOptions = that._prepareCanvasOptions();\r\n        var visibleCategories = getCategoriesInfo(categories, range.minVisible, range.maxVisible).categories;\r\n        var categoriesLength = visibleCategories.length;\r\n        if (range.isEmpty()) {\r\n            script = dummyTranslator\r\n        } else {\r\n            switch (range.axisType) {\r\n                case \"logarithmic\":\r\n                    script = logarithmicTranslator;\r\n                    break;\r\n                case \"semidiscrete\":\r\n                    script = intervalTranslator;\r\n                    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (dateUtils.addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\r\n                    break;\r\n                case \"discrete\":\r\n                    script = categoryTranslator;\r\n                    that._categories = categories;\r\n                    canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\r\n                    that._categoriesToPoints = makeCategoriesToPoints(categories);\r\n                    if (categoriesLength) {\r\n                        canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\r\n                        that.visibleCategories = visibleCategories\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (\"datetime\" === range.dataType) {\r\n                        script = datetimeTranslator\r\n                    }\r\n            }\r\n        }(that._oldMethods || []).forEach((function(methodName) {\r\n            delete that[methodName]\r\n        }));\r\n        that._oldMethods = Object.keys(script);\r\n        extend(that, script);\r\n        that._conversionValue = options.conversionValue ? function(value) {\r\n            return value\r\n        } : function(value) {\r\n            return Math.round(value)\r\n        };\r\n        that.sc = {};\r\n        that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\r\n        that._translateBreaks();\r\n        that._calculateSpecialValues()\r\n    },\r\n    _translateBreaks: function() {\r\n        var breaks = this._breaks;\r\n        var size = this._options.breaksSize;\r\n        var i;\r\n        var b;\r\n        var end;\r\n        var length;\r\n        if (void 0 === breaks) {\r\n            return\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            b = breaks[i];\r\n            end = this.translate(b.to);\r\n            b.end = end;\r\n            b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end\r\n        }\r\n    },\r\n    _checkValueAboutBreaks: function(breaks, pos, start, end, methods) {\r\n        var i;\r\n        var length;\r\n        var prop = {\r\n            length: 0,\r\n            breaksSize: void 0,\r\n            inBreak: false\r\n        };\r\n        var br;\r\n        var prevBreak;\r\n        var lastBreak = breaks[breaks.length - 1];\r\n        if (methods.isStartSide(pos, breaks, start, end)) {\r\n            return prop\r\n        } else if (methods.isEndSide(pos, breaks, start, end)) {\r\n            return {\r\n                length: lastBreak.length,\r\n                breaksSize: lastBreak.cumulativeWidth,\r\n                inBreak: false\r\n            }\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            br = breaks[i];\r\n            prevBreak = breaks[i - 1];\r\n            if (methods.isInBreak(pos, br, start, end)) {\r\n                prop.inBreak = true;\r\n                prop.break = br;\r\n                break\r\n            }\r\n            if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\r\n                prop = {\r\n                    length: methods.getLength(prevBreak, lastBreak),\r\n                    breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\r\n                    inBreak: false\r\n                };\r\n                break\r\n            }\r\n        }\r\n        return prop\r\n    },\r\n    isInverted: function() {\r\n        return !(this._options.isHorizontal ^ this._businessRange.invert)\r\n    },\r\n    _getDiscreteInterval: function(categoriesLength, canvasOptions) {\r\n        var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\r\n        return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength\r\n    },\r\n    _prepareCanvasOptions() {\r\n        var businessRange = this._businessRange;\r\n        var canvasOptions = this._canvasOptions = getCanvasBounds(businessRange);\r\n        var canvas = this._canvas;\r\n        var breaks = this._breaks;\r\n        var length;\r\n        canvasOptions.startPadding = canvas.startPadding || 0;\r\n        canvasOptions.endPadding = canvas.endPadding || 0;\r\n        if (this._options.isHorizontal) {\r\n            canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\r\n            length = canvas.width;\r\n            canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\r\n            canvasOptions.invert = businessRange.invert\r\n        } else {\r\n            canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\r\n            length = canvas.height;\r\n            canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\r\n            canvasOptions.invert = !businessRange.invert\r\n        }\r\n        this.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\r\n        canvasOptions.rangeDoubleError = Math.pow(10, getPower(canvasOptions.rangeMax - canvasOptions.rangeMin) - getPower(length) - 2);\r\n        canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\r\n        if (void 0 !== breaks) {\r\n            canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length)\r\n        }\r\n        return canvasOptions\r\n    },\r\n    updateCanvas: function(canvas) {\r\n        this._canvas = validateCanvas(canvas);\r\n        this.reinit()\r\n    },\r\n    updateBusinessRange: function(businessRange) {\r\n        var breaks = businessRange.breaks || [];\r\n        this._userBreaks = businessRange.userBreaks || [];\r\n        this._businessRange = validateBusinessRange(businessRange);\r\n        this._breaks = breaks.length ? prepareBreaks(breaks, this._businessRange) : void 0;\r\n        this.reinit()\r\n    },\r\n    update: function(businessRange, canvas, options) {\r\n        this._options = extend(this._options || {}, options);\r\n        this._canvas = validateCanvas(canvas);\r\n        this.updateBusinessRange(businessRange)\r\n    },\r\n    getBusinessRange: function() {\r\n        return this._businessRange\r\n    },\r\n    getEventScale: function(zoomEvent) {\r\n        return zoomEvent.deltaScale || 1\r\n    },\r\n    getCanvasVisibleArea: function() {\r\n        return {\r\n            min: this._canvasOptions.startPoint,\r\n            max: this._canvasOptions.endPoint\r\n        }\r\n    },\r\n    _calculateSpecialValues: function() {\r\n        var canvasOptions = this._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\r\n        var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\r\n        var range = this._businessRange;\r\n        var minVisible = range.minVisible;\r\n        var maxVisible = range.maxVisible;\r\n        var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\r\n        var canvas_position_default;\r\n        if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\r\n            canvas_position_default = this.translate(0, 1)\r\n        }\r\n        if (!isDefined(canvas_position_default)) {\r\n            var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\r\n            if (this._options.isHorizontal) {\r\n                canvas_position_default = invert ? endPoint : startPoint\r\n            } else {\r\n                canvas_position_default = invert ? startPoint : endPoint\r\n            }\r\n        }\r\n        this.sc = {\r\n            canvas_position_default: canvas_position_default,\r\n            canvas_position_left: startPoint,\r\n            canvas_position_top: startPoint,\r\n            canvas_position_center: canvas_position_center_middle,\r\n            canvas_position_middle: canvas_position_center_middle,\r\n            canvas_position_right: endPoint,\r\n            canvas_position_bottom: endPoint,\r\n            canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\r\n            canvas_position_end: canvasOptions.invert ? startPoint : endPoint\r\n        }\r\n    },\r\n    translateSpecialCase(value) {\r\n        return this.sc[value]\r\n    },\r\n    _calculateProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance\r\n    },\r\n    _calculateUnProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        \"datetime\" === this._businessRange.dataType && (distance = Math.round(distance));\r\n        return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance\r\n    },\r\n    getMinBarSize: function(minBarSize) {\r\n        var visibleArea = this.getCanvasVisibleArea();\r\n        var minValue = this.from(visibleArea.min + minBarSize);\r\n        return _abs(this.from(visibleArea.min) - (!isDefined(minValue) ? this.from(visibleArea.max) : minValue))\r\n    },\r\n    checkMinBarSize: function(value, minShownValue, stackValue) {\r\n        return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value\r\n    },\r\n    translate(bp, direction) {\r\n        var specialValue = this.translateSpecialCase(bp);\r\n        if (isDefined(specialValue)) {\r\n            return Math.round(specialValue)\r\n        }\r\n        if (isNaN(bp)) {\r\n            return null\r\n        }\r\n        return this.to(bp, direction)\r\n    },\r\n    getInterval: function(interval) {\r\n        var _interval;\r\n        var canvasOptions = this._canvasOptions;\r\n        interval = null !== (_interval = interval) && void 0 !== _interval ? _interval : this._businessRange.interval;\r\n        if (interval) {\r\n            return Math.round(canvasOptions.ratioOfCanvasRange * interval)\r\n        }\r\n        return Math.round(canvasOptions.endPoint - canvasOptions.startPoint)\r\n    },\r\n    zoom(translate, scale, wholeRange) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\r\n            return this.zoomZeroLengthRange(translate, scale)\r\n        }\r\n        var startPoint = canvasOptions.startPoint;\r\n        var endPoint = canvasOptions.endPoint;\r\n        var isInverted = this.isInverted();\r\n        var newStart = (startPoint + translate) / scale;\r\n        var newEnd = (endPoint + translate) / scale;\r\n        wholeRange = wholeRange || {};\r\n        var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\r\n        var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\r\n        var min;\r\n        var max;\r\n        if (minPoint > newStart) {\r\n            newEnd -= newStart - minPoint;\r\n            newStart = minPoint;\r\n            min = isInverted ? wholeRange.endValue : wholeRange.startValue\r\n        }\r\n        if (maxPoint < newEnd) {\r\n            newStart -= newEnd - maxPoint;\r\n            newEnd = maxPoint;\r\n            max = isInverted ? wholeRange.startValue : wholeRange.endValue\r\n        }\r\n        if (maxPoint - minPoint < newEnd - newStart) {\r\n            newStart = minPoint;\r\n            newEnd = maxPoint\r\n        }\r\n        translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\r\n        scale = (startPoint + translate) / newStart || 1;\r\n        min = isDefined(min) ? min : adjust(this.from(newStart, 1));\r\n        max = isDefined(max) ? max : adjust(this.from(newEnd, -1));\r\n        if (scale <= 1) {\r\n            min = this._correctValueAboutBreaks(min, 1 === scale ? translate : -1);\r\n            max = this._correctValueAboutBreaks(max, 1 === scale ? translate : 1)\r\n        }\r\n        if (min > max) {\r\n            min = min > wholeRange.endValue ? wholeRange.endValue : min;\r\n            max = max < wholeRange.startValue ? wholeRange.startValue : max\r\n        } else {\r\n            min = min < wholeRange.startValue ? wholeRange.startValue : min;\r\n            max = max > wholeRange.endValue ? wholeRange.endValue : max\r\n        }\r\n        return {\r\n            min: min,\r\n            max: max,\r\n            translate: adjust(translate),\r\n            scale: adjust(scale)\r\n        }\r\n    },\r\n    _correctValueAboutBreaks(value, direction) {\r\n        var br = this._userBreaks.filter(br => value >= br.from && value <= br.to);\r\n        if (br.length) {\r\n            return direction > 0 ? br[0].to : br[0].from\r\n        } else {\r\n            return value\r\n        }\r\n    },\r\n    zoomZeroLengthRange(translate, scale) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var min = canvasOptions.rangeMin;\r\n        var max = canvasOptions.rangeMax;\r\n        var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\r\n        var isDateTime = isDate(max) || isDate(min);\r\n        var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\r\n        var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\r\n        var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\r\n        newMin = isLogarithmic ? adjust(raiseToExt(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\r\n        newMax = isLogarithmic ? adjust(raiseToExt(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\r\n        return {\r\n            min: newMin,\r\n            max: newMax,\r\n            translate: translate,\r\n            scale: scale\r\n        }\r\n    },\r\n    getMinScale: function(zoom) {\r\n        var {\r\n            dataType: dataType,\r\n            interval: interval\r\n        } = this._businessRange;\r\n        if (\"datetime\" === dataType && 1 === interval) {\r\n            return this.getDateTimeMinScale(zoom)\r\n        }\r\n        return zoom ? 1.1 : .9\r\n    },\r\n    getDateTimeMinScale(zoom) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var length = canvasOptions.canvasLength / canvasOptions.ratioOfCanvasRange;\r\n        length += (parseInt(.1 * length) || 1) * (zoom ? -2 : 2);\r\n        return canvasOptions.canvasLength / (Math.max(length, 1) * canvasOptions.ratioOfCanvasRange)\r\n    },\r\n    getScale: function(val1, val2) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\r\n            return 1\r\n        }\r\n        val1 = isDefined(val1) ? this.fromValue(val1) : canvasOptions.rangeMin;\r\n        val2 = isDefined(val2) ? this.fromValue(val2) : canvasOptions.rangeMax;\r\n        return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2)\r\n    },\r\n    isValid: function(value) {\r\n        var co = this._canvasOptions;\r\n        value = this.fromValue(value);\r\n        return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax\r\n    },\r\n    getCorrectValue: function(value, direction) {\r\n        var breaks = this._breaks;\r\n        var prop;\r\n        value = this.fromValue(value);\r\n        if (this._breaks) {\r\n            prop = this._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", this._checkingMethodsAboutBreaks[0]);\r\n            if (true === prop.inBreak) {\r\n                return this.toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom)\r\n            }\r\n        }\r\n        return this.toValue(value)\r\n    },\r\n    to: function(bp, direction) {\r\n        var range = this.getBusinessRange();\r\n        if (isDefined(range.maxVisible) && isDefined(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\r\n            if (!isDefined(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\r\n                return null\r\n            }\r\n            return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\")\r\n        }\r\n        bp = this.fromValue(bp);\r\n        var canvasOptions = this._canvasOptions;\r\n        var breaks = this._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = this._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", this._checkingMethodsAboutBreaks[0]);\r\n            commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return prop.break.start\r\n            } else if (direction < 0) {\r\n                return prop.break.end\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n        return this._conversionValue(this._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize))\r\n    },\r\n    from: function(pos, direction) {\r\n        var breaks = this._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var canvasOptions = this._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint;\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = this._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", this._checkingMethodsAboutBreaks[1]);\r\n            commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return this.toValue(prop.break.trTo)\r\n            } else if (direction < 0) {\r\n                return this.toValue(prop.break.trFrom)\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n        return this.toValue(this._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length))\r\n    },\r\n    isValueProlonged: false,\r\n    getRange: function() {\r\n        return [this.toValue(this._canvasOptions.rangeMin), this.toValue(this._canvasOptions.rangeMax)]\r\n    },\r\n    getScreenRange: function() {\r\n        return [this._canvasOptions.startPoint, this._canvasOptions.endPoint]\r\n    },\r\n    add: function(value, diff, dir) {\r\n        return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir)\r\n    },\r\n    _add: function(value, diff, coeff) {\r\n        return this.toValue(this.fromValue(value) + diff * coeff)\r\n    },\r\n    fromValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    toValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    ratioOfCanvasRange() {\r\n        return this._canvasOptions.ratioOfCanvasRange\r\n    },\r\n    convert: value => value,\r\n    getRangeByMinZoomValue(minZoom, visualRange) {\r\n        if (visualRange.minVisible + minZoom <= this._businessRange.max) {\r\n            return [visualRange.minVisible, visualRange.minVisible + minZoom]\r\n        } else {\r\n            return [visualRange.maxVisible - minZoom, visualRange.maxVisible]\r\n        }\r\n    }\r\n};\r\nexport {\r\n    _Translator2d as Translator2D\r\n};\r\n"]},"metadata":{},"sourceType":"module"}